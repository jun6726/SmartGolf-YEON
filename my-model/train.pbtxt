node {
  name: "lstm_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 140
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10793741792440414
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10793741792440414
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3282285
    }
  }
}
node {
  name: "lstm_1/random_uniform/sub"
  op: "Sub"
  input: "lstm_1/random_uniform/max"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/mul"
  op: "Mul"
  input: "lstm_1/random_uniform/RandomUniform"
  input: "lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform"
  op: "Add"
  input: "lstm_1/random_uniform/mul"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/kernel/Assign"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/kernel/read"
  op: "Identity"
  input: "lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
        tensor_content: "\337\305\200\274L\000\004\275q\366\323\273\203\337\327=SU\014=\365\177\216\273J6\273=\231\n\337\274\324t>\272\357&\303<J\207\006=\262\"\215<Z\343\243\274\005\007h;\343\216k\275_\217Z<UIx=\346\2049\275\223\377)\273$4\3108\3437w\274r\211\227\274\033Q\t\275\240k\234\2740\256\217\275\315[ \2751\224\243<\277\315\300\273\217m\223\273\215\357\277\275\305z\275=;\277\246\274\244\024z\273\332\313r=b\271\265\274\264\350\221<A\226\323\274\344\323\203\273m6T\274\214\323L\274\336\315\331=\350\272S\275\036`\027\275\021\025\250=\326z#=5\277q<21(=\325i\010<\301\256Y\273\276\t\362;\247>\001\275\233\345\235=o\326\267\274;S\320;w:Z<\203\300\217\275\244\331=<\311\245E\275\336\244-=n\323\214\274\270\026\344\274\363\335\233=\326\274 \274\377|\364\272M\037j\274o\345\233\272\302\304\362<NK\343<\267p\036=4\020g=\014\367\322\275d\377\244\273\301C\256;Q\332\030=S\350l=\337\264\216\275\033\027\225;\217\'\313;\000\014\226\275\335y,\273}\311\374<\351ZE<\222\352\332\274K\031y\275\211\366\344<$L\206\275|R^\275\334\263\256=\336\366\224<=\024\'=Q\027\247<\375\264\226<\335\371\001\276\225%1=\203\343\217=wB\212\273[4\264=\240\263K=O\3109\275\320\026\250<\030L\357\274F\nt\275uxW=\312\002=\275\231uK\274\273\333\307<\306\347\027=.?|<\333Ub=\261\020\037\275\267\232\373;@W\205\272\246\336\204<T+\024\275P\205{=\314\313\307\274\365R\034\274s\333\234<\272\004\302<I2\237;\333\316\306=>\341\202<\007p\216=\226\2361=J8/\274\223\204\225<\332\016W\274\256.\365\274\2649C\2758\007f\275Uq\300\274\333\211\016< \257\271<\352\356\010;\247\212\036\274\200m\001\274\004m\312\274\006h\031=^\2579<tdY=\2655\223<\255\372w\2713B\232\275ieO\275a\016\332<\366I\210\275\r\364\372\274\324\325H\273k\212\250\275Cq\305\274\005W\370\274\376\266J;\216mk=nw8\275BZ\241\2756=7=\326\245{\275\356&M=\204M\320<l\t\013=\216y\207\275x\013\347<\264\215U=\226\001\017<\212\020>=\035ak\275\372\007\355<\035\004\325<[\273\220<\237\"Z<\322qf\27594\230=@\207\210=\367\225\177\274\0205\257\275%i2\274\315\265\331\273\317\226S= \257t<\212\363P\275\340\255\257\275j;\010\275\3457\304=>\220\223<\324H\256=aNY\275(\331\213<\317?\200\275X\243\021\273c\274\253\275A\022\220\272\033\253P<\010g\000=Ip\327;\265\020\210=U\010\t;\020E\241;\210\2746=\364<\342<\377k\242=\227\314\326;4\351\255<m\352\250=\000\265\022=\267\200`\275\010XQ=\366\303\361\274\262\300\325<\221\365\204;9\211\262=\276{\334\273l\273\270\2754\017\2569\2008&=]Y4;\315\246\026=x\213\210<1>M;\264l(\275b(B=\357\271\345\274t\333w</_\"<L\247\222\275\311w\300\274|\036\233\275\312\260\220<\001\323C=\030\245\322\274\335\200\360<e\325\022<\031\262\033\274\020$k=\016\005\"\274\002\354=;U\350\262\273F\240\371=ZT\251\275\260PA;\254\\\302<\375:l\275 \204\252=^\342\026=\006d9=\212_\260;m\223#=!L\031\275W\366\276\274\274qC\274\263\377\026=\225\025\225=gi\277\275\317\344`=\362\020O\275\026\202k\275\177\317*\274L\337M\275\225!\242\274\316\234\004;\300C\r\2746\275\202:\010\\\037<\230\206\'<:\021\242<\366\263\007=\363\311\305<\323\177\013=\2768\342\274xQ\010=\313h\013\274W2D\275\245~\225\275\267:\214\272117=\335\003\215\275Q\241\276=?\003\367\274\376\252T;=Y\306<\206\225\321<\\\034\224\274\221\007\201;$\265\020\275bV-\275\301\010\247=5\352\\=\313\000\235\274;dD\275\375L\004=}kS=}\274\244=\361-\277\274\000\242p\275\203\345\014\275\274\000?=\377\343I\271\000D%=\017T\252<\325!\275\273e\271\214<\027\311<=\345\220[=\240`*<\337\240 =i\nf<s\300I\275G\365\200:\235:\272\274s\316\213=\302\354\023=\203\026\322<\206^\032\275\267\257\374\274\243\250\007=\371\210\206=&a\026=\373\013\334;\2457\224=\3620\n>\370\216H\275\230\320\272<\000g\247\274\244\034\332\273\r\3244\275V\025\330=&\261\262\274\252v\273;v\2038=\231\004(=\320\003\243=\255\321\301\274K\355^=U\372\220\273\212a\334=DM\324\274\254\371;\275^&l9F\235g\273-I-<\224\371\242=\0258\215<H[\256\274\030\304g=[Z,=A\002\332<\224(\217<\3547f=2Q\024=P\303E9`G\"=TMD\275\257)S=\022\377\277\274\243\311\203\274U\002\301<\001\264\332<{D\303<\372\263\261\275\255\230j\275\341*(\275\346\2508<\221\031F\274\205#S=\237\177+\275s\252\207\274y\317>\275\245\246\210\274\"}\242<|\210K\275B\026\313<\016\"\260<O\333\371\272=DT\274\263\n0\274\276\360\346\274~\235\272<\311\360U\275\017\354m=x\323\373;c\376\264=\257!\204\275Rb\271=Z`\332=,-\242=\371\255\347;O\324\220;\351;\233<p\016\267\274g]\306\274\342\246\233\274\032\267t\275a\375w\275]C\212:\371\224\222=\201o\356\274#-m\275\254\232#<m$\247<W#l\273`\306&<w\205\200=\300\352(\2752\016\307\274\240\261\023=)\274\257<L\377\355\272\310\220\345\275\341\370,\275\n\247\030<\225\306\177\274\350p)=C\267\334;l\213\020\274~[\225\273\304\217X\274\370B\006\274\360\207/=\0258\205\2742wl=*\371\317\274\363\210&=>\251\270=+\347\212\274@y\231<\345\030]=i\333V\275-\221\227<\314LL\2748\307\212\274\2428a<U-\242=\260\2420\275H\224`=\377\304\266<\264(3\2754\204\331\274f\211\023\275\324r\230\274\226\327\256<\303\312\222\275\r\005\326\274\030\025\257\274\030\017\302<\224\215\320\274\267`\017=\377\010\217\275\241b\032\274\206\226w\274\231\005X=\221\241\245=\376~\036=\3236C\275\037\252\221\275\351x\304=`e+<\364m\216<\027\037D\275\304\220\227\274\306<\340\274\374\004\246\274T\212)\275\234*\357\273\017\335\031=\300\261\352<NOZ\274\003\025\350<=\216(\275\241\371p\274\317?\372<T\'\240\272\322\365\216\274\300\345\033\274\300\226\255=\376\014m<C\361\316\275\343R\021\275\353\n\022\275\267R@=\264\3477\275:c\020=f\342N\275\210\261\262<\3671\321\273`Z>\275\223J\340\273T\220y\275\241\\\254\275\013\267B\275\343;G=\272\017[\2751\222K=L\311\304\275q\236h\273O\035\017\274\277\006\351;\241\212\334<\201q\206\275F\313\"\274O.\346\274H\315g<\366\251\351<\346\332\265\274\370\273\372\274\312\366\002;\t\2426=8YS\274\275Z\314\274\33025\274TM8\275\344\322\007\275-5\214=.\335@<l\210\207=>^\235=\353\370)=jUx\275!\224)\274\330\245+<*c\013\275o\rl=\021q\371<\2012\327\273\340\275\230\275db\305<\021\255\217<\305\222o\275%@/\275(FP\274\271+f=\340!\307\275\032\370:\274\350l\230=\200\315\027\274\255\326o=\345g\363\274\364\t\215<\3530u\274\014`\354\275KwV\275\225\350R=\266c\206<Z\215\302;\245WP\274\362\302\311=\331\273\340<\374\215\343\274\331_\334<\367\226\216=a\204K=\244\263\334\273;\2424\275\303Q\217\275\260\276\010=\347\315\220\274\312\240\001\274M\320==_\241\260=r\226\212\274\004\203\230\275>\0359=\205\210\t\274=\232\313<W\030\222;M\007U\275?5a\272}3\254\274\247x\023<\3224\274\275\003\333\215=\334\201b\272\t\222?\275Mv\361<\037\256\230\274E\000\"=FP5=W\253\237<\331\\\303\274\022O\200<\007\356D<\372N\345<k\037\241<\001Hn=U7\020\275\205\311\330\274l#\227\274\327\305&=\313\216\226\275\210\360\200;\254\376\235\275\346\266\014\274I\375\'\275\261S>\274\007y\216\275K\361\221\275\226X\232\275Xjv\272\303%;=\251{\257\274f\336\203<E\2415=&\374\206\275\214\261\003\276\306\036\'=u\216\202\275:\362\270\274E\026\321\274E\014!=>\276\317\274\031\3046\275\273\221==Z\371\231<G|`=\224m5;>\006X<\222\234x=\025,\227\271\021\254?=\"DI\274\037\326G\274\312\240\001=\342\203\215<\337}s<\251\301\245<~-\022\274p\332=\274\206\031v\271\247\205p\273\211&\031\275\253&\353<\251\276\227<y\367\376\274\361H\347;\002{\342<\235\022t:\356!2<\201\"\023=\275L\001<S#(<\035\342\232\275Z\254C\274\"CL\274\337\231F\2754\003\026\275\006\326[\275R\351\006\2745VA\274%\326\032=\351F\260\273\254\367\226=\037\330\272\275%J\321<W\017\226\274\375\311p\274\331`\200\275~ST\275\270\010\254\275\016q\376\27343\224<m\225\033=\366\304\217<\234f\301\275^\236\212\274\200\267\362<re\340<\323\033\004=\\N\215=9\310A\275\227\334\305\273\031\272\251\274\215y\352\274v#:\272\302y\344<\272\212@\275\345V\017\275h\363\227<S\n\200\275\205\345`\273|\206\n\274\236Z\336= \035\332\274\254\257I\275\2171\215\275\300\213\010=\320V\213\272\373\336\035\274\321\036\203=Xx\201\274\027\177Z\274\342{\260<\332\347\202\275\003\304?=\376\233;=d\360\343<w\264\226=\324\353J;\255\006\254\274q\320e=Q0\032=\317U!\274\220~:\274\211\000-<o\021\210=\262\206\020=\034\346\305=n\2053=|\311}\274\313X\243<\304o\211\273\030\037e\275\302\251\317<\326E\236<\362\325\302<\024\2741\274\007\266P\275l\256\330\272\213\251P\274|\354\275\275\037\364$\275\305@\367<\327\001\033\275\263\313\204\275\'\334\005\275L\3655<\330\340\317<\276\356\006\274\237\260F\274\237\227\226\267\277$h\274:}\337\274c\014q\273\2725\217<T \001=U\212\222\274bqb<\013\365\372<\335\243\231=\002\021\224<\334`T<\020\352_;\003<[<\273C!;\3066\032>\271\233\014=\225a\357<\017Bb\274\227C\273=\010\351\037\274\317n\t=\032\260\210\274\021\r\033\275\346\331\221=f\ny=Qz\371<\236!\352\274 \345\254<\2142>=0y\225<v\311<\275\221X#<i\321\271<\335m~<\262\024W<\256\215\t\275\244\254\007\275[fD\275^\010\350<\3162\230<x\357\222;\022W\343\274\232\220\276\2746\214\275<\267\374\252:\ro\217\275k}c<\247}9=YC\245=J\321&\275QH\236<\331\367\375\274\317\010\005\275 v\221=\206\324\363<\313h\217\2757:#\275\202\002\032\275:\301d<\310k4=\026\363\254\274\262\033\257\275\236\365I\275g~w=.\216g=A_2\275\267\206$\276\324\212O=*\216\274<\237\232\024=\202\254\025=\252\037\225\27516/=H\233=\275\235R\262\274\3436\034=\372\243\363<\270Q:=\233E\240\274\355o1\275ZQs=\013e\270\274_\254\024\275_\207\326=\204\367\246=\032\0344=\263=l=C\314\t\275\234Dd=\371*\311<\224K-<8\0236\2733 \003\272\3554\026\274\205\372Z=\304N\004\275\000\307l=\210\357I\275\017\'j=\360T\021<\372\207\314\274\217>\200\275\256\217\331<\240\033\024<\000 \322\274\324\3024\275\177\2221<\021\306\t=?\343\"\274]U\016=#\227_\274\276lU=\324\001\226<\350\234{\275\316S\241\275\257}\224\274\323\r;=o\312\377=I\376[=\024\262d\273\000\030\214=\004\222\r=[\214\"\274\343\307\240\274~0\\\275\307A\036\275\336\245\315\273W\254\231=\262\367*\275S\007a=@\000\t=/\273\206=\017\256\334<\216\205\003\275\374\337`\274>e\002\274\372N\363\272\023\357\335;\323{\030\275\031\336\256<\005\204\017=\222\001\035<\211\024\005=\344A\371<\335p\034\275\325W,=\326\376z\274-\332\306\274\310X\025\275\204\275\300<\366\343\206\275g\332\215=}\376\312<\303\200>\275\241*\310<\360\037\007;\033\207\342\274\306\200\304<\335\000o<b\221\373\274\251\305\004<2\375\265<\360\303u<\237\206\243=~\255\367<\203\353\255;\363\345\014<\034\350P<<O\331;\246%\344<\231\266\017\275\331\330b=\216L\274=\177\260\032=\321C\016=\322\0027=\253,]=\000\364\310;\337\213~\275<\007\327\274\360\331\036;\303\001\355\274d\321\202\275\366\023%:\236\313\034=\\}\377\274\350e\233\275N\372\273\274\235?\256\274]\rM\2756\364\307=\023\333*\274\324\235\375=\031\351\217\275emO<2lL\275\341\3525\275\343G\033\275\313\241\350\274~!\201=F\302\220\275+\3407;\251m\212=\r\367\310\274=\002\006<\333\346\005\276\247G\211\275l\033!\274\330\232\321:\334\344\342<\ruM\275\014*\312;\254\214\337<X\361\022\275\337&\365;\334\026\217\275W\226\274\275\342\014\006=\325\363\222<\2069\276\274W\007\225<\364GN\275\344\255\265\273\227\233t=\031\376\025=op\362;\016-\201<\272\201\250<\341`\005\275\347\266\340\274O\re=0,\221;\340C\245\2745b\377\274L\355\022=\037\0221\275F\303s\275U\252\373=r\351\266\274]\215\332\274\364.\007=\357z@<#\356G<\315\245\272\273\026=\200=LJ\216;c\007\014\275\247\243%\275a\245M\274\'\\\223<\340\240\226\274P\227`=q\351\030=\235\001\236;\331\025\266\275\006?\030\275\345\022H=\237k\017=&;\025\273\201c\300<\370\260\322\272\353\323Z=\205,\361<\022\t\344=!E\216<\312\347\231\273\216w\221\273\022\356q\274)\355|\275\315\014\026\274c\271B\274\365;t=;R\237<k\2129=/4\335\272\021>\203\274}\330\362\274\271\2052=\313\035\013\275\312\361\234\275\033\236\375\274\235\016\332<\204\001\326\274h\323\241\275\030\365p\273\367\337\016<)1Z;\264\027\005=\242m3\275{\010\036\275\361\264\177=\027\213s\274\347\346\260\275Q\035@<w\316\235\274I\224 \275\213\005\260=Bm\363\274\372\350\352=\235R\232\273\350\010R=\267\263\246\273\3230F\275\245\3722<\273e\024\275\270\311\032\275\363\224\355<f\222\230\275\217\004\310\274\367\233\244\275k\001;\275CEb<\357\r\222=\223^\311\275\213\347I\273\226G\256=a\313%==#\216=\255ia\275\014\363\253\275\241\\U=\207J0<\255\344\346<|\025H=\346\311\316<IV0=\246\221i=\242\200J\275\322\261v\275\3531[\274Z\261#\273\367?>\275^1\272\275\214\233\344;\364\213P=k\211\000\275\217\344I\273\242\327\034<\027\005M\274\205\205\237<z\335\347\274\036\273L\275\314\362\200\275O\301\230\275Hj\210=]Rb=&\262\201\2744y\265<\025\225\362\274\001\304)\275\373\3711=\025\266C<\337\240&\275{\032\245;\324\337\223=\034Y\005\274\224\362m=cW\227=\231\366i\275\301F\220=][\261<\324\314\213<\327\031T\273\004\014\252\274F\002\353<\272.C\275\227\307\305\273X\343\356\274\272^\n\275\250\246u\274\276\226\252<\350V\344;.\325\241\273\033+\000\275\321\n\301\274\350\321\342=\261\026?=Q\330\313\275\352I\243=G\231E=\303\305\333<\'\253\244<\373\303\311;39\\\274.:t=\267\331\330<\225\362\032=\304cK=Dd\014=!\240\345\274\377\256[\275M\215}\274%\241p=mu:\275$\222D=(d-=k\322\010\275s\037\t\275\220\316\241\275\234\216,=\236\3512<\204X\213\275\324\374\375<\033=\207\2745\350\033\275\247\311\200<n\344=<\254\302R=\306e\230\275\215\351G<J\2426\275\257\352c=6G\364=\235\232\302=6\t\266;\206x\016\274QV>\2746\311\243=u*\215\275_(u8!\334\014\275\220O\"=oi\024=\305\251\206\273*7\026<\365\rh\275\321\240\351\274\242\342!\274*\314M\275\302\360\307<\005\031\272=\021LW=\020\207\252<\231\326\022\275Q\0266\274^l\272<\307cn\275\327\337\305<\207u0=*\255\251</j\250=t\323\202\274\272!\362\275\020Y\240\272m\243\022=\361)\000=\2553[\275\251\245\357\274J\001,\275\037\327\360<_?R=\342r\232<>r5<\013\324a\273\367\322\230\275*?\346\273\251\376?=Y\'\n\275h:\342\273aei<\230\233~\274~2\206\274\016\323g=\217o\030=\366\357\234;\270\242\202=\347\270Q\275\220\000v\274\301\244\332\274\035\226\022\275O=u\274I\374\315<\032\310\256<\266R\004<\005\205\210<\336\026F\275\300}\240\274\301\021\334\274aY\276\275\\S\226=@\215L=_4\030\275\203I \275O\220\212<\0339\305\273S\202\317\273&\276\202=\343\243\247=\357\001\010=RT\313\274T\370\301\273\031\321\320\275\013\034Q<t\026\347<N\324\266;\223\022\326\275\007>W=\366\317.=\314f\222<]O\307<\306\272(\274\001\233?=n\027V=Z\212\305\274*\030\340\275\273B\017\275[\222\354\274+\014\215=\264\222\005\274AK\247\273R\246\354<%{?\274\265{\314\274\031?%=}y\017\275\253\323C\275\024\227\025<zK\314<\366\227\026=w\244D=\246lL\274\3039\022=;\022i\275u\001\351;\031\250T\275W+\272\274\317y\247<o)1\2752Vb\275a\002/\272f\"\274\273~\364\220\274\001G\273\273\201\014\310<\304\271\273\272\032\263\245\274-\337\332\273u\203\212=&S6\275|U\370;vIJ\275\177\001\313;M\274g\275\302\t1\2748,\303\273\014\262\325=\324\r\247\274\016\003#=\001\312\327\274\310\276c<\366\006\272\2749\375\210\275\312\246\201\275\300f4\274\252\000N\275\207\301\210\272s\247\236;DqF=y\355\262=\301\222!=Z<\237<\345\207F\275=\322[\275!\346\257<\031\265\027\275i\210\376\273\341{\370<H\362|\274\001\330\033=ka\237=LF\203<\313\232\225=z\377\232\274q\3071\275\331\243\347\273\000\333\351\274X\232A\275*\021\270=\\\344\225\275\315\306\233\274\311\251\371\2752u\037=\356K\017\274\255\300\214\275\234BI\274\330\230\377<\227Q\264;\227{9<\336\025\205\274\360N\234\275\265\334\\\2741\024\t\275O\273^=\274+\256:\235\360A\274\307\3217\274G\242\255\274\267\311\351=\261\271\242;\245\303O=T\242F=I*\240\273\262\2620\272r\345\342=.\337]\274\224C\003\274\250S\231\272\037\021f\274\321\217=\275\251\271\206<P\227r\275\200\200k\275\206>&<a%P<\327\023\244\274e\032\213<\242\373\371<\247\001\036\275\340\020\210<\263\374\260:\363\324\274;\347\334\332\274\340\235\300=\223\275!=S\263n\274\206\372\270\274\332\036\007\275\275W\374\274\231}\252\275\256\3761:\305\213\272<\325L\241<\372\310\247=\371\301\356<\014C.\275C\207\305<!\262|\274d\001Z<BV\007\275&\335k\275\032\365(=\315i\016=\335L\315\274\227\212\357\274O\377\003=\014\004\373\274a\017_\275\013iA\275?p\322<\332\003B=J6\305\274\256\324\016=\333\337o<\347\364\264<\272\220F\274E\215\326\275\314J?\275BX\227\274U\277]<Y?\206;a\010\351:4\224\013\275)\202\027\274\325\340\357\274\251\r~<\255P\031=\220d\202;LP1<\320\375\243\275\372\r(=#\220P<\355.\376\2742H\231\275Y\205\014\275\323V>=6e\220;%\370{\271\003\235\334\2742\207\364;\264,\252\275\033\tH;5\364\000\275\242=\347\274\0160\373<\024\034w<\326\025\026\275&\367\224=\273\342\206\275\260\035\247\273\322\300\216=S8\342<6\017)=\254\333\311=\000\201v=\333\\\200\275\361\360\350<Oc\255\273\022\345\007\275\024=\035<L\346\225\275\215\215G=ou\344\274\305~c\274c\220\304\274<(\007=\356\026+\275\257\300|\274^\307p\274#i1=\370\216\366<?;d=z\"\332;v\037\216\273\363\010]\275T\313\216\2755\354\310:\343i\252\271\236\366\233\275\202K\357\274t\233A:\236\3314\275\t\300\346<\272\226\354\274\377d\367<\260\036\r\272\203\221\243;gr.<\036u\306=22\027\275\025G\230=dH\376\274\263S\207=h\027?=\263\365\031=>\252\272<\213\252A\2759\027\205=\223u\255\275\224M\002\275\357\'G\275^\377\270=\357\207\013=c\225\026\274\3504\363<\314\007\266<68\210=2\200\274=\330G\267\274C\303\030=;\263\007\275\036A\321<;\202N\274*\207J\273\310\026\310\274\226P\214=\2207\364<\3129x\2759\327\276;\010YX=Nq>=-V\177<\022\326\310\275\227 F<\242<Z=\215\235I\275j\014\320\274\277\021\250\275\266w>;?\335e=@\344\035=\300aS\274c\360\345\274\244\031\224\273\t\r:=\366\026\313<\221\252\267<neJ=\260\2533\275yw\017\275\353XQ=\264\316F\275\002\362]<\221i\252=\355\333s\274U\001\010;\365\203\004=\263\037\004\275\315f\217=\250\356P\274#\312\264<]\273X=\235-\237<\324\337\013\275\001\322!<\200\243\003\2741\312\226\274\331@\354<\023r\202;5L[=\307\314+=\2715\005=2Mr\274q3\253\274}\377&\275_\033\227\274R\016\204=\352l/=0\024V\274\2149:\275P\037\272<O\312\334\273\373\332~<\345\240b;K\216t\274(\001\005\275\243\361\303\273\254\362}\273T\034D\275\353?)\275\367\017\306=SD\350<\276\\\005\275\354\036\212\273\201\335\331\274\376\255\236\274\242%<\274\036\333\303<\372\205i\274\261c\300\273\276w\312\275pFp=E\021\300\275B!\237=JRk\274\371\242\347\274\001\273\207=\336\325\033>Y\344\276=\325\373\027\274\213\261Q\274\345\263\241\275\030\224\216<\264\\F;]\322\'\27505\300\275\3114\264\2740C:=s\305~=q{ <\350\273\237\274\343\364\206\274\030\263\265\273JP\203\275,\240Y<\204q\375\274n|!=M~,\275\206\265\344<\373H\021=\246F\267\274` \203<\274P\300\273\0257)\275kQ\224\274\360\257W:\246]:=\267\316\353<B\243;\275U\005\3529W\370\360\274\312\342\203=H\325\276\275j\000\242</\017D=\001\3022=vHG\274\310\266U\275\274\346R<=\000\310\274\305\000\273=ia\342\274\366\352J\273\240t\330\274\236\252\354;\257\317\302\274\306\326\375<;;\253=\213d\006\275\240^\202\274ZK<=e\374\356\274\371\332\226;<\331\374\274\014g\r\274\002\364\262<\027b+\273vm\224\275)}\216<\316\225\260<v\201<;\022s\245\274\346\266\200\274\332KI\273\203|\025\273f\272e\274\'\237\n=\242\367\256\274W\204\020<\364\230\207<\254\237\251;\036+\203\274iu\217\274\364\344\264\274\311\216\217<\304\235A=\010\311$\275l\2309<\222\031\206\275}\022i<\245\225\255\274\326l_\273G\034z=\214I\001=\225\220/=O\212\003=\014\320\303\273R\320\035=\355q\226\274\035s\335\274\036\353t\274\r\363a\275\357\233\314\274PM7=\274\251\036\275\300j\247<\177\254\244<\234\232\242<p\275\210\275\232\361J\275\232\371\316\274\354#c=`\235\254=C\224\216\275)E\n;\254xE=7\344\021\275\205\213\220=nA\306\275\347\2233\274\276\246\222\274\331>\020\275\267=k\275\332n\243\274\204\250\324\273u\351\'\275\032\323/\275\252\204\343\273\354Z)=4\006j=>\334\341\274\026f\343; \207\362\273\265;\314=q\243\034=HZ\275<\233p\376\273\2613\005=]%9\274\271\305\327\273.g\341=9\263\326;\260\350C\275\341k\004=\305w\217\274SW\254\274\373r\323\273t\251\217<\333\321~\274\3527\277\275\016de\275\234S\031\275u)\203=\217hl\275\237\242e\275&\256\024\273\267\315\362\274f\300%=;\365\266<r\210\370\275\366%C\274<\207\216\274!S\230\274\253)%\275\234d9;\371\362\014=\r\201a\275\200A\'\275\265\341\\<\241\311\335<RN\343<\016\216\211\275\334\370\235<Y\333*\275\371\264\032<\263a\215;\013,\346=\237\355\341\274%\021.<-\330\242=\266\034\005<;\021N<\306\354(\275\021\272\007\275\333A\200<\204\"\204=\374\220i\275\205*I=m\006B\275\223\224\363<h\277\023=B\262\001\275\256\247\035;\236\0030\275\346Ld\275\2470\242\275M\304\212;\250\346\007<\027\316\255=\010\337\213\275~\2469\275\001\356\311\274\305\203\264;wW\037=-hd\275\342*\246;\376$\246\274\271\376\033\275.\2540=\224\0109=O\226\n\274\341g\365;@\310\216\274\252\217\017\272$=\221<\306\320\022\275\317\376\014;)n\226<\253z\325\273\303\312\360\274\024\360!=\216\333\010=\367\036\201\275\353C\306;\240\033*\275\035\367\225\275\327!\351<d\205\342:\\4\024=J\220\325\275\316G\252\275j\303\221\274`m\\=-1\216<\323g\232\274%\275]=\233\2701=\2464E=;\030\220\275\321\332Z<\007\351\321<\315\023\024=\201\242Z;\255\002\226<\263\2151=\353\003\257<n\260\304<\363\016h\275zR\"=Yz\t;\352\316\332\275\373\361\322\273\037 E=\227\212\325;\207\214\217\274X,\226<\254\na\274\037\277\204\271\275#\002\275\315\345b\275g\235\263<\330\235\241\274/\350,\275\226o\350\275\202\342k\274l\211\007=\241\336o=$\333\227\275\177\230;\275?\270\355\275\332\203X\275\224x\357\273\312\213\305\2731\246\306<0\252^<\020_&\2757^=\275\243\r\305<\267W\243=\314\205j=\036y\242<\037\035\304\274\276\351\277\274\t\321\347=\215\227\371<\223\204\037<dB\302\273\\St\275E\243\261<\225c\246\273\327\274\022\275\376\217\267=\302\032\010\275L\335\005\275\371\003\027:p@\205\274\003\251\207\274\211\365\312\275\246\244X\274\247\335\310\274|\344+\274Q\0366\274,\346\345\274\244\326\013\275G\022A\274jD\315:\026\351\220;\275\257\240\274\345J]\2751\232\351\274\376\323@=6]\373\2747p\215=1\025\307<\325r\020\273\016`)\275l\031!=u\352\221\274\305\256)=\rHC=\035\323z=\025\232S<P\010m\273\323\273-\274\235\203\273=\277\252\361\274Ox\014=_\324\211<\207\267\357\275+nh=\307\261.\275w\200\300\274\311&\210\275\203\320h<\202\244\001\275Kx\231\273\323ne\275\030\031z\275X)\310=q\231\214=7 \221\274\275\027m\274\203R\006<7\351\021\2759\030e<\226\211\277\274n\225\336\274S\373#=6\036k\273\273\036?\275F\343\226\275\025$\377\273q\310\271=\236N\322\273C:w\273\342~\300\274\"\0019\275\211@\211;Tf\304\275\021\262\202<\315\n\331\273\204\213\202=*\205\262=\022\001\177\275%\276\220\275\256\237\211\275\375\206\005=6\257\026<.t\221<\237\371h\275Bzd<p\304\356<6\201D\275o8\304;\327\252\207\274\337q\212<;\021\223\275\030jn\275_\346\223\275\303\305\r8\036\303d\275X\025*\274\r\267\307\274\266D\203<\030\376\311\274H\230\371;\351LR<jO\277<3\372\277:\245W\244\275\021\355\226\273\233\"\006=\240\324\020\275\245L\371<\341H4;\243\337\007\276`U\326<\237\222P\275\213\343S=\316%g\275k\223*\275\001c\'\275\270\n\240<1\3201<)\332\205\274P\006\0019~`\001\275\361%\302:\200\375\271\275\277{\377\2748\225\207\274\017\262\240\275c\327\252<\251\007u=v\357n<\252\234\r\275\205\275\220\275k\321\210:\366A\002\274}\222\221\275n\023+\274Y[-\275\227\244\377\273Vjk=\310y\215\275r[I<\025|\255=\237S\311\272\256L\017\274\315\024\203\275\0379\320<\2628`=\271\227\351\273\026\213\262\274\345\031R=\004\321v<\344\342$\274\274\335\341\275,\nx=jHG=q;S\275\315\"D\275\212\325\031\275\001\310(=\035\276\'\275\2125\360\273\025\032\203=`\272\356\273\\v^<\r\205~=\303\'\241\275&E\306<\033\214\214=^\346M\275Q\211\224\266\034\216\224;\264\345\376;\240\251\227\274\371\233\203\274\260s\020\275\377\214\231<\361\360:=\003\371V\274\372\204\320\273\366\032P=\360_\260=a\265\027\2759O\225\275}\335\217<\"\342\240=\222\323\252<\000\307\374<8\3335\274}%\273\274\235b\375\272\247\311Q=\211C\230<?\306\031\273Z\246g\274\344\322,\275\350\370\333\275X\025\031=\376\217\000=\002=\246\274!\314\014={\007\354<\347\356\374\274)\315\001<2]\247\273\221\031\244\2758\027\254\275\253Y\271\274A\2778=\375\300\252<n\202\020=\376\333\221\275\332\277\000<\313v(<X\351_=\000\203\222=\334\207\363\274\231\364,\274\317\357Y\274\274\306\210=c\361\010=\005\227\225=\'Q\206=\\\022\'\274\320\373@\275\363T?\275L\266\357<t\256\277<\035\024\\=\273\023Y\275\227v\275\274\265n\202\275\376e\277<7\021\231\275\255\321\"=\333\340\254<C\234\377<\306\237\006=\037\306\337<b\006\003=\345\304\201\274)i\240\275s\310\333\274\276\302\244\275\210\256\352\274{\254\317\275*\266\000=\264!x\273D\025\222;%6\315\272\23415=,i\204\274+{\023\275\3159\273\274:\270\356<lK\237\274\366\000\273<\016\242\377=\223\364\252\275\357\031r\274}\003\303\274V\204\252<\376\262\245<\367\337\337\274F\325g;\202|\302=\211\364m\273~\324f=\374\022I<\273\305 \275v\325\202=\355__=\342\'3\273\n]\333;\026\241\300<\212\233\246<2{\014<\375C\271\275\261m\314;d\221\306=\213\320\253\274\266\377\215\275S\223\263<\226\263\017\275`1\266;\246X\020\274\357)L\275\017\217\215=\006d\026\275\200\314h\274\375S2\274$\202@=\243d\356\274\214\243\003\274\263\214k\274\217\245\227<f\246\010\274\032=\271\274\037\r\242<\337bL;\30164<s\036\305\274E\025\307\274\306Tm\273Z\201\225\274\255\034)=\357S\r\275R\266H\274\252\277\"=\322\211\026\274\341\320\211<\036\326\300\275k\354\032<9\212\025=\320j\266\272\343\315z\2751\022\322\2747\254\230<\246\360!\275]\312\365\274I}\254;\033\271;</l2\275\267\003\325\272l[\334\274\241D\035\275\245r\020\275\235\225\027\275\323\342\271<\200\212\263\275\357\326\231=\215\rl;\006\272\205\275ww\024\276\'\226\370<\256\216\351;\336j\231\275\250?\027<\261\273\014=X\372\220\275\022z7;e\205(=\235\272\240<\001\374\227\274\230\313\234\275/\003\021\276C\311\251\274)K\031=f \313=8\340\232<\213\220k\2753$\023=\254HY:\312}\037=?Xq\272\214\026z\275\273\264o=\177\344\224<\374\247\370<\024_\304\274\327N\037=\262\373F=\363\332\256\275\242\365\014=\031\357\350\275\234}== \021W=\316\307\007\275\261M\000= \352k\2758{n<\225\320u\275R\245\305<\'Y\301<2N\300\275\363+\024\275D\275v<\225\022\t<<\246\256\274\355\364k=\246\345r\275\245\321\004=[\205}\2756\335S=/\264\022=7\353,=]>\257\275\233/\033;\036\034\\<GO\241\274m\264!\275&\034Q\275\235\004\360\274\320\311~\273\347\253\371\274\311\261\230\275~\321R=\265W \275P\217\317<K>\272\274*\275\363\274\303\031\210;se9=k\332\212\275\026Q\222\275\002\034c;=\375%=c\243\372\2754\217\377\274\231\212\250<\003\257$=\273C\243:+\032\367\274\322\333\005\275\370zd<\3645\005=\037\254\320<\240\024\262<\352\364\274<\002d\211\274\014\340\023\275\'4\307\275\2534\221\275\005\316\022\2749\267\234=\255\214\223\275\320p\220<\236\236\264\275\275\351\037;>\235\207\275\005=\034=YQ\001\275>\341\004\275\022<\302;m\247\356\274}\320\016=\360\017-9\306\256\362\274R\204\016\275[\305!=-\032\035<\355N\257=\222\231u<\257\262\202=\222&H\275E\374N<n\025\240<\353\225\006\275\364\212\271\274\270d\250<\332\217\243\275\367$\227==q\017\275.=\366<j\221;=\212\233p=/\027f\2741\352\030\275P\2035<\026\246\273:\231\016\001\275\204\301\207=\r\344\204:e\312V=J\371\221\274\365g\003\275\306\n\t\274%.\260<\277^\264<1\247E\274U\240\020\275sB\202<\'\215\177\272\224\235\255\271\002F\353\273\370\321\362\274\262\346><a\266\273;\227\244\306\275\177\216\'=!y\251\274\315\001\241=d\246\033\274\344\025\322\275\200%\026\274\273\266\303\273\331\230\274\275\003T\272\275\242P\002=1\264\223=c\336\225\275\212\211\260\274G\314\007\275\031\217\225=;\366\037\275\330b\n\275\177\330\\\275l\317\260<A\003\220\274\267\376M\275x\300B\275z#\225;ghG=\006\372.\275\237\214\271;7\374\243\274\254\277\200:\265\350E\275\233\023\216\274\2266z<\022\350\224=\267\313X\275\215\r\243\274\207\341Y\275\367p1\275qs\350\274a\317\243=\370\355\003<$ \005=\336\342\231=\020\202M=\334\266\354;u\221|\273\335\335I=\335\324*\275\331\325H<?\317\252\275\334\2663\273yY\003=f\372\000\275\377\3653\275\277\017\355\272U\004\226\275\213\351Z\275\036O\237\274\243oK\275\351\371\002\275\312I\243<D\302\244= \363\331\274\243\246l\275N_\312\274~\321\205=\265\207\031=\377\247\'\275\231\356\000\276\370\340\024<<0\226<\320\276t<\217]$=\207&\331<\027%\r\275L\340\233=J\371U=?L\376<\0275\221=#\335\327=\340xA=\270\271,\275<W\211<GJW=\364\352u\275\021\345\217\272\332\277\243;\266DJ\272\177\257\337\275.\034\241\274\340\376\261\275\177\335T\275F\220\210\275\331vf<\262\301@\274\271\254%=\315\365d\274\257\376}=\2271\200<$\374\314<0\230\311=L\226\314\274$\237\212<\020\036V\273\236\311\356\274\316\314<<9\326\202;?\305\272=\371\310Q\275u~`\275*\375\006\274^\rT<>\226\220;\244T\276<\277\207\254\274\355^=<\260\306\357<DV\221<{.W\274\211,\244\274t\232j<\306\t\217\274\243\274\002\274\366N\244=\323\264\255<\362kZ=R\275H\275I6\035\275\357\216N\274\367\tM;\024\014\234;\262V\311\274\333\026E\275uN\030\275\351\361\021\275\352L\225\273\325\273T=\303\3761\275\320\2611\273\354\234P\275\0032\253\274q2\206=L$K<\235&%=\351\211\371\273\324HB=my\241<;\t<<\200\177\217=\313\241+=Su==\275\372\310<\241\250\206\275\201JA<PK\002<=z\037=\327C\006\275Y\205\006=\200t\351\274\342\277\207;\215O\307<\177\226\200\274\363\212\333\274\352$3\274\336*\010\275i\032K\275\3222\320\274~\275\326=\345\376\224<\315{-=1F\326:u\341\006=\337I.\274\324\215\237\274\264\215X\275\337\301\222\274\324\276\203=\347\r\034\275\305\326\357<\211\216\030=\026\031J=h\364N\274\376\277c\274Vm\250<J\312:=\014~E<\345\221\260\273\"\007\270<\257P/\274\023\333\277\274\022\211{<F\357v\274~\264\034=T*\2749\017Cq=\000]\331<\356\020\257\275&\200\025=\325\2233=\215XH\275E|\036\275,\177s\274\374}P=\035s|=\342\312\231<\'\247Q=\366Lk\274~)D\275=Z\377\272\252\222\226\274\250\237\036=\305\223 \275\314E\370\274\204\353\302<\261\251\324\274H\201\307:\261\360\264<^\203c\273\275\256\037=H\244\341\273\371\276\235\274\232t&<\211\357!\275\223@\202;\231\265\333<}\237\037;+\027D=\024\202\004\276\014\331\277=\337\372R<\\\222,\274\271\206\200\272\006\275R\275\325\333r\275\016\3038\274ZO <\245\212>:Z\260\366<\013\263\026<\244\203\026=>^!=\005\213\306<\\\2120<\371K\n\275\334\366\005\276\203\325?\273\222\350W\275@F\325=v\247\332;Pf)\275\245\352<=\272\246Z<\205\006\271<<\260\332\274\253\366N=\235\376\251\273\323\036\267\272w11<\216\307\352<\234hU;]n\344:~\227\034=&\020\276;\004\335\031\275&b\006=\232\351\301\274s\252\027=WA\'\275\036\314\206\275\321\002\033\275\"\"k\274\375?+<\323\272\265=UY\033\274 \261Y\275\2248\241=\003X\216\273\020\242\'\275\3663\037=\256\333\324\274\234\244\245<\003\265\372=\030\214\274=LQ/\274\210#\203\275_\230\255<E\"\023\274\315=P\275Q4\240<E\205\316<?\245\207=\210\254\035=4\252(\275>\344\303\272 \\`\275z\0260\275\017\230 \2755\242\221\2746\035M\274\242\335\362<l\377\335\275\377\326\341\271S\313\321\274\276M\027\275\036\030\301=\371\213\254\274F\302y\275\013+\214\273\010\324\356<yN\002\275\241\234\304\275A\272\224<\224}\032=\007(_=\314\200\231\273\253\035\264\274\033\266&\275l\355y\274\033\026\325:\216\214t=\3248d\275\367D\035<\231T\245<\307\363\022\275j\301\363\274v\302;\274\3618\3059\3205\004\275\n\213\005;Ocs\275\267\324\227<Z##\275N\335\020=\376\354K\274S\336\320\273i\376\322\274\302\030\200\275\370\033\303\274\245\354\260\275\272\003\323\274\314\252\233=\2632\321\274\'%`;\200\023\027=z\317\031\275lP\342;\273\023T=+MA\274tU:\274\014D*=\257U9=\335\275B\275MIT=\324\2503\2750\310\252\274\017\3639=\351>\024<\301\374J;\"\222s=28\341=\372j\004;!\177\267={\021E<\367\207,<\263\200\204<\245_\013=\3066\221\275\235\275a<\017\006\001<\3408Y\275\340\374F\275\320v\243<mtB<\365]\214\273\005\r[<\200\276\264<\267D\234=r\237\227\275q\344p\2735\251\262<J\207*\275\234\006\033\274\332\273\231\274rY\005\275\r\353\230\274h\001D\275\201\255\323\274f\216\n\275\033\330Z<&\274><\322\n#\275\3427D\274R\211\034=Z2\203=\334\333)=l\246\210\274\201]\005\275fa\265\274\036q7<\td\273<\341\360\305\275\265\026\362\273\241]e=\033O\223;QG;=y\327\270=\244\257?;PH\250\274\204\303\243\274 \366\354\272<8q=)\314\365\274z~\202\272\244\262\277<\315\2315=\037\0001\275`\374\202= \373\245=E\377P\275#J\360<O\214X=~\023\230;\252C\023=\266\"%\275\007\200\013\275\334\0000\275\232U(\274\217,\241=\271\010\004=\363\231\r\275r\024\200\274\254\022F=\r\342\220\275=Q4=\211\357\224\275YU\213\275\213\224~<\322\311W;=:\031\275\351;\304\274\177\227\205\275;\346\252\274A\260\312\274Eu\003\275\320Rh\274H\311:\275|\313E<\266a\301=\300A\303\274|\240\024\274\373\341v;\006]\310<\030\303f;\361\031@=\314\264\303\274\331\212\200\274\277\204K<\224\017o\275u\312u\274\202\267\256:\211\037u\273k\037@<\221\271\217<P\236A=[\nY=\035\246U\275\\\305\306\275tS\017=o\034\255\274MF_=\034Bq\275B\302\232;%\206\345<\250w\031\275\2173\271\274\305\315.=\205\322\005={`\021=\214{\232=\270\2419=\365\036\333<\221\237\367\274\350-`\273\260\2202=\344[\t=\250\201\350\273\360\n\353<X\243\331;w3\031\274=\264\214<\310\005\000\275g\213:\275\327\313V\274\275\032\031\275\321t\257\273\242\223+\2752\257\260<\237d\242<\277\005\207\275\227X\254<\254\205\270\274\356\236\352\274\252u\253=\307\003\260\274\020\361\336<\207\326m\2750\3445\274\363d]\275)\244k<\205em<\371\277\276<\314\341\352=\213\026\232=\232\272\023\275G;_\275D\355%<{\340\307\275\312\2738=u\266@=\215\201\240\275\365\246\327<w\006\030=\223\213\357<\310\205i=\377\273c\274K:\233\2754\032\230=\010\337-=\343V\212\275t\1776=\025V\257<\275s\225<\030\363\257;\250dO<r\335\037\275]\207q\271\246\342\201\273\301q\336\274\23372\271\023aJ\275\342\225\034\273\257b\353\273P\210\232=\336\006\t=\320\020_=\336\007\305<5\241E\275\260\352\232\275#\2406\275.\374\242\275O1N\275\267%(\272\221\271C\273B\271\373<\260\257\200=\237\366\r<\025`\024\275_#\215\275:\226O\274\373%[\274G\034\003=\251\374\n\275|\354\027\275P\000$\272U?\241<y\214\002\275\2174D=.\220Y<\375b8<\370Y\226\275\200\317\325<\305\316\205\273@\345\'=\244\222\024;h\235\244\273\304o\017\276\001_\316<\006\204\002=u\227\237<x\264~<\275\336\t=3s\356=c\"\203=\253\342-<\346\303\025<\310\r7<\334\010\210\275e*T=;\371\006\275\216\237\240\275jY\204\2746\206\263<\333\273\264\274zFi;\202\205==\245\3347\275\307\225\240\275\267Dy=\344X\302\274\306Q\032<~w\257\274\210\230\004=\300\250\226\275\340\247\341\274#\305\003=\"`\377\274\003\214\224\273\357H\246\273\244\2332\274@\023\203<BK>\273\3323\343\274\003\014\241:\322v\232<YZR\275\314A\021<\364\346\315\2752\022\221\275\201\2731= (R\275\346\274L=\247W%<r\2001\275\353\'0\274\314mL=@\367\003\275\253\235\023\275\330\346*<qC\277\274n\236\275;\315\\\204\274M\206\033\275\335\017\003\275\236[\006\275\341<\366\274J\022Y<\333\207\227:0%S\275rs\341<5\300-\274\326F\323;\300\324 \275I\017\222\275\202\250\200\275\005\220z<\352\2555\274MV\016=$7\214<\026K[=@+\007=\nV\371\2732u\366<Xk]\275V\334\231=\032[\340\274T\245%\275\272B\322\274\360\200\301\274\013\033|=\220\314\342:R?\261\274\350Kg\274W\301\013\275bcS\2753\267\375\274}\202(\275\242\003\270;\004\030\021=\035D\006\275hn\250\2751\332\022\275I\330~<\306\253\036<K\"\252<w7\337\274\2656\002=\275\236\201\275\355k\001=l\033\036\275y\272\375\272A\325\343<a\334\250\274P(j\274\226\037K=\260\255f=+\222\033\275*\2642\275\322\201\331\274\221\235\326\2740\271&=\255&\321=*\261\230\275\241\277\026\275|\027\211\274\354\262\315\275\027\371\315<U\004\014<\356-N=\353\000\247\274\010\215|<M\323:\275\025\014\343<\232\205 \275\rd\367\274\013Fy==j\256\275\262\265F\275\373\243\271\275\010bZ\275\222\274\000\275\217\224J\275\257V\273=\035[\322\275S\253&\273\305\215\203<\364?>\275\243\274\024=\316ej\267\311j\314=\007\036\215<\003\344\342\274Q\3064\274M*\026\275)xv\275)t\361\274\263\211\200=e\362\223=\2638\017<JJ\276<t\343\235\275Y\205\251<\273z9\275\241[\030\275\2250\n\276\233Y\316\274\334&I=_\334f\273\247\0375\275\306\020\250\275Hs\274=\331\304\036;{o\016=2\025\264<\240I\215<ZA/\275\337\201\206\274n\270w\275\263b\007>\035\212\013=\203\255E=\3244\024\274(\361\265\274\335k\237\2732\'\035=\307e\313\274\305Q*\275\260\271m=+L\217\274\307\303\354=Y\033\251:)\213U=R[\352<m\363\230\275\231\376\337;\311Y\227=\347Rp\274\235\2525<\2105+;D\002\211\275l\372\201=5P\254<\310a\003\276\2439\265;\230\035\177\274\332\025\205<\306t\027\272\340\'\207\274e\232\334\275g\250`\2751\'S=\r\310v<\331?\264\273!>\236<7w\006=}Q\025\275\304Q\217=-\320\235=UK\021<}\240?=\221\230\260;\023\373)\275v\203\220\275^\322\250<BCs\274\213\366\302=\323&\033=\333E8\275\220h\276;uEP\273&O\251\275\203\321\324\275h\205\023\276\235\344 =\220\022Q\273\001\035\321\274\251\215?=\317\244C<w\"%\275\343K$\274\217\023\321\273\373\251\200\275 KT=g\345d=\264\232\316=\177\253\222\274\206o\242<\353\341\203\274\343C\037\275B-@\274\216\342Q;\200\254\256\275jdH<\\\254\\\274\237N?\2751\361\022=L\273\207<\004\346\233<\017X\";*U\214\274\313,_\273\374\241M\275\272\232\273<\244(^\275%t\260<.\316H\2757\202\261<\261\025T\2752RJ\275[;L=\204D\225\275m\255\006\275\234\000\023=P\233N\275\223$\324=s\336\032;\255s\014=0\256\272<3\360\203<\020\310\204<\370\254\r\275\270\224W\274\'\302\201\275\202\2355<\343\3230<3\260\217\275\376\224\214\274B\302x<\217@\206<u\310V<N\003y;\361\317Y\2739\300\226\274\300\037%<\273\301\250:Y\305H=\007\214\006\275\037\323\204=L\324r\274\324\255\200\274!T\352<\025\306t<\264&\214=\242\374<=>m\243\2746\243\203<\346l&=\330\232\270\273\237\373X<^\355\026=AR\244\275\202r\025\275j&\257\274@<3\275s\006q\274ccr<$\223E;\032G:\275\3768\021=\360W\200\273\322\306J=4\326X\274e\2712=w\031\205<i\305?<\253|7\275\263>u=\223\330<\275\022\306\023\274g\336\255<\363\252J=4\342d=i\3322=\030\314\031=Y\205,\275\312\332\000=i\374+\275\206\311\375<\347se\275\222\266\331;D\355\005\275R\262#\275\203%\323<\245_\307\274\253S\245<i\367%\275\224y\242\275\221e\254\275\240\323/=$\357\002\273\010\317v\275\217iQ<\214\007Z\275.\353\200<L\274I=\031\034C\275\344\001$\275\215V\010=\212\302\027<\206\343\222\275\330\003+=\013\363\014<\243\026\306\274\360q\212\275\266\221\246\274~\375\215\274\t\336M=sW\247=\355P\341\273\264t\001=\243?S\275\207\323s=\370S <\221\")=\246X\236\275\336<\361\273\037AP<l>\315\275yV\367\273zA\227\275$Pw\275\350\'Y<v\026]\274\010]\002=;NX\275\3026\307<\332<Z\275\233\277\331\275\361\017I=\310&\245\274\334\317\252\272\"3\351;GCx\274\0019\211<\025\364p\275\353O*\273!~\206\274Q\233\024=\366\246\'\275\302\232\221\2753\324\263=\260\264\024=\223~;;\211\252\216\274\243\034N=\002\"\016\275\001b\367<.9y\274\013\253[\275W\260\010\273 \311\262\274\253\317\200\274\3274\217<\034$\204\273\020\0302<\336\316\"\275\005vG\274\371rI\274\313\353\352<\347\024\201\275*$\377<G\2038\275E\2422<H\224|=%)\331\273\335\220\374\274\2064\276<\227\024\275\274\343\270L\275m\364L=\347\004.\275\254\255\016=\200\370\277<p\367\n\275\351\210\013\275\302G\202<\372\026G\275\010Q\275=S\313/\275\335\334\014<\t\330\"=\232\301\007=|3\257\274\377r \274\004?\205\2750\321\036\274w\333\211\274\272T\305\274\337\021\3669\204r\000<\330{\315\272\326\351\312<\323c\n=\"b\340\274\237Ev\275+\006\027\274S\336\202\274\035\247\262;\216v\324<:k\322\274M\267\265\273\246\037D=\325\226\314\273\354\301\014=\251\226\265<\023\336\250\273\205\324\233\275dY\336\273{\325\303:{\320Y\274+\0277\273*7\206=\033\005\214<\313\350b\273\321\320c\274\023k\305<N\244[<\004}\224<\007\203i=\252\300W=\026\270a<+~\350\274\363,\205\274\367\021\225<d\205\006\274g\344\035\274\021.\372\274\223\016\001<O\244\021\275Y\361p\274M\315\272\274\005!G<\010\013\324<\220\225\221\275o\242l=Wx\327=\2608\300\275\246\021\376;|\364\023=\323_\244\274\201\261@=\313h\310\273w\370\256\274W\223v<\246\316\223\275B\353\217<\r\302m=\027\212\202<Ay\253\274E\346\345\274&\260F=\022m0;\342fl\275\006d\273=\">\246<\251\316r=.\273\246=6\273\246=\002lG=\342\245U=]\370\004<\022\311\253\274d\243\211<\r\226)<$&T=B.9=\2714\212\274\003~\242\274\363\267\260<\031\'\232=\225c\335<\014\232-\275\262\335\201=A\327\210\275d\036}<\027^\276\274}\002\316\274\312\364(<`t\325\274\323S\224<\377\376\345<%\352+=(\n\220;\200\241\222\273\2448\374<\350\236\003=\273\r&\275\340\251\216<E\023\357<\322\365\232=\016\000\230<\335\276\n\274g[\017\27522L\275\017\276E=q\350C<\214_\334<\310\237\034=\212\250i\275a\353C\274J\016+\275C\r\t=\351s\372<\275\373\306=\300\007\026\273\314\313\022\275z7{=]|M<\262\215m\275\267\3359\275\222@u<\202\371w=\rs\325\2745\225\017<\327\332\256\275\343\016\\\275\n\316\270;\224ui<\251\004\310\275\265A@\275\325\023\021\274\322\336\237\274\t\334K=`\202\246\275\206\245{<\2024k\275\220\304f=\224\365\"\275\201n\211=\353\207\373=\322*\004\275[\t\317\274\017\3479\275\333X\213=\233u \275\345\235\206\274!\003\217;S$\021\275\360\214\036=-AQ\274\034q\270\273\017zK\275\354 \323=^A\032\275YH\267<\240\256;\275\363\301\212\275P\340\210<\374G\242\275\370-\272<\317\326\276;o\271\277\274\002\026J\275c\227\203;?w`\275\330\306\320\274\223f\000=\n\004l=\351\014D=\225\033m\275$\000\220<s\007\273\273}h\201\275\315\t\016\275\270k\030=\370<\334\274Ug8=\343\016P=K_\267<\232\221\265\275\244\343\016=K \226\273\266\323\230\275\222rH=7\324I=\262\262\272\274\351\373\323\274JZj=3\331r=\272T\355:\r\233\367;\267f\275\275?\251\223=\231\257P=\255\005\345<+[\325<\2544\361\274\356\233==\235\263\364\274\300\346\347\274:,\324\273\001\210l=\034-\326<z+n<\305C{\272F>\211<\373.\000\275&\217\334;!\034\366<\037\327\272\275\262\245\024>\201\306G<\322\007\213\275\251\201A:\225nM\275\342#A=`Bj\2751w{\275\000^M\2758}5\274T\342[\275\222\216\215\275\306\037\211<j\231r=J\251D=\2633?=#2\243:\345\004\256\275\263\347\375;\3643#=\033)\004>\222#X\275 T\002<\021\207\240;q\250Q\274\345\3448<pO\r<=@\231\274\321\212\306\274\200\203E;\374\231^\274c\034\210=\030\303\340\274z\003*\275\224\357y<|V\206\275TB\266=\r\305G=\270V\004=\363\333\030\275k\\\002\275\327I\007=\244J\201=\304\335\206=\255\n\032=3\312\032<\347\265\344<\215\031\262\274vu\212=\300$\272;Mb\024\275\300\214+\275U\354\345\274x\026\305<J4?\275\317\356\200<f\311\021>n\013\203=\215\224N<\225\204\324<-\251\016=\212r[\274#\310\355<\342\345\020\275[\235\023\275\366\243\204=\2606\307\274D\336\236<-\005)\275\325o\262\275E!Y\275\213%\212\275\005\331(\274`\227\032\275\316IT<\362\326e<,\017*\271.\3219=\225#\306;}\000:<B\344 <\351d\233<\342\376\014\275\204\250z=u\261\217\275\226~M\275\364\342\324\274\224N\375<.O\200<\001\223\227\273\377\034\233:f9\220<\247_\030=y\251\031<\000T\255\2752%\207=\302^W<v\376\027\275+\257<=\262\004\010=5\360:<\022\227\255<\265\350\220\275Zy\n=\366g =u\014\227\273Y\354\206\273__\313\273*ZU=V\2648\274,\027F\273lS\005\275\214/\361\275y\t\360=/\353\212=XJ\271;\017\232\337\273X|\276\274Q\255\226\271\262\n\365\274\310\352\333<*>\246\274&\250\023\275I\356V<#4\373<\367\\$\274\035\033\273\272\025\220z<\rm#=\237L\226\275{\000f=\227\331\030<_z\305\272\374\014\210=\224\031\247<\342>\245=+\350 =\367\'\013\272\n\034\035\275\337\347R=\036\231e\275\003\307}\275Hkx\273\367\267\010\275\231\227X\273\177A\322<~\340x\2751]\0249\237\006\007\275\t\277\357<T\001\\\273\300w\244\274\212\305m\275:\224\207<\326(\204=\201\356\333<a\222Q\275\366]\367\274\325\216]=\2470\217<\023\021q\275\304b\331;\r\235\225\274\340\270\'<\310J[\275\376\026\332<\327gS\272\272y%\275\365\243\315<\220\263\220;\276\242\207=\306<\264\274\207\024$\275\013\233d:\271y\224=\031/\245<\244? \275sn\216<\305\2607\274\306?.=Q\263}=Q\310\234\274\255\2314<\334J\251<DNR\275\273\007K=\230\331L\275\302\366:\275\274\0217<\336Yn\275\307\311\006=\274\367i\275\365\247H\275}8U\275\273\363\232;\215\002\203<\344p\335\274\312\236\232\274o`\372<\303\332\032\275\333>i\275b1\262\274\003\317\033\274n|\216\274\251\210\214=s\'N\275\275\310\245=\327\311\017=Zdk=\035\351\272<\314\376\317=ZJG\274\276^\240<\010\031X\274?\230\016<f\242\233=\361-\210\274c\010\315\273[q\014=,s\275;0\311\205\274\306l\221;\365\021\251<t\312L;|\222\356<#\325Z=\277}\006=Kk\220<\306j\223\274\343\343\232\274\216\177Q=\254\361\n=\000jZ\275]\267(<\213\242]\274\332\203\240\274\037\005\002<\n\2559=8\362\322<,\\h\275\333fX<\220\035\325\274\265\367\034=\352\217\216<m+\302\274j\034\306;\356\344\344;NL\027\275\373\020\356:\rM9\274\271\310a=\277\305\024\275k\337\370\274\010\276/=\251\247\260\274\261h-=$?\'=!\225R\275\276W\246=p\033\372<t\240\027\275Z%0<\260\247\226\275R\357\203=\017\301\023=\000\314}\275\007\231\003\275p\004\223<?l\023\275\215\237A=\246I1;\262\242T=\265\2413\273c\t\311\275\213D\224\273Q\245\025=~\021\001=\272L\255\274F\337\370<n\201\305\273\344\347g\274\302\014\035={sH\273\201\002\205=C\221\251\273\272\036\230<\332\017\361\274\020F\221=J\326\n=\347\225y=\010s\213\274\013s=;\355\rv=n\'a\275\021\247\326<}wv\275\237\354\341\2743hv\273\306\031\215\274\260\345\236\275i\331S\275\233\322\236\275E\253^\274\016\022\343\274\322\215\375<\033\335\211\2747\002\360<p`Y=2\025`\274\001?\222<\322z@=I\247\356<\004\314p\275\367\345\341\273\353\325\233\272i\371r\275\313\016\343\272A4W<U\036\021<o`b<0\270\200<(\235\002=\244i\376\274\031\340J\274\373\332\271<\257\202\342<\272WN\275-\317\357<\017K\356;l\356\235<\2127\026\274q\300\270\275\220I%<\262\377i=d1\021\274\312\\\027\275l\222\025\275Q\213b=\202o\203\274\226\231\006\274\263\010\031\275\304/\241\274\273\371\320<2\335\320\274\316&B\274\305\232\r=z\306.=\331\206\001=\005\237S<\350\326)\274~M9\274\361/\032=\357u\216\275\304!\330\275\027]\031=\0147\210=\330C\375;\336\376T\275\020]\233<\204\030\n\275]\236-\276\005\037#=c\026\353\274\200\014E;I\223D\275\344\214\373\273\031\366\345\273\356!V\275\204\247\355\275\305w\203<~\334H<\277\212\342=\372\267\002\275\244e\026=\210C\022\275\352\037\002<\375\300 \275)\372)\275\253\217=\275\364j-\273\371\2022\272\332\246\021\274\r\025|=\313b\304=\345g\365<\346G\323</\022\323<\365\n\351<\227\206\237=\322ar=\030+\032\274`/\'<d\263\332;\302\020\204<\002:\220\274Z\322\253\275\317\242}\275\013\3256=\312\345y;\224S\247\274\tX\013=t=<=2\354\037=\004\217\305\274\n\016y<\256z\217\275\222\032\236<\023\360\222=\2347%\275^\\\"=\346N\241<\325\321\206\275\321\010O<\344\340H;\351R\373\273q(\023\275\026\222y\275Qf\007\274\206\266\204<\304\335H={\351\217\275\242.\311\273\305\330\242=Kc(;\301\352`=\314\177t\275\315\342\222=n\013@\275\207\316~\275}\336>=\021\025+\275\365\235\347=8\020\226=\354\"\243\2720\217\351:\275\311\350\274A\257\253\274\177\033\004<\372\314B=v\030\035=M\250\002=\027\035\213\273\023\316#\274\364\027F;\242:\241=\021\222\275=\224)\032\275\266\270\217<\022[\026\274\321{H=\177\305\017= r\251<\0239\033=\255W\007:\326\213\020\275\362\374-\275\306\322\331=\204\273\334\274\2466\300\274\203\326@\275\322\267\010=\313\203\023\275\027\300K\274{\230\010\275f\032I\275\360R\244<\324z\017<\237Q\036\275z\224\232<P\277\211\275\244\200Z=\242E\233=\204`\216\275\014\013X\275\323\376\036<\377\t^<O\247\214\275\270\214 \274&j\005=l\216\274\275\324:\327<\270\232\325\275\302V\224=\240\360\017\275\277\217$\275)\"\225\275\363Xn=\353_\336<\006\212\276\274\360\201]<\266\0061\275!\335\001\275s\307>\273\336\262\333=\244\252!;\267\303\033\275x\010o\274\003B\007\275\000\350\320<\326\010\206\275\335d]<ml\177=\357_u\274\251V\t<4|G\275\212\326\314=\247\2456=\243s\266\275\032+$\275\202\200\332\275UY\301\273v\322;<!\214\266\275J$\334\274\242\262\014\275\206\320|=Q\266\204\274+\355`\275g\266\206\273\037\\\220\273\322:\'\275\344\272Z\275^\021\304\275Q\376\243=\377\003k\275\005\245-\275\3358N\275;\263\256\274+\241\352;\210\246\332;E\376\241<ni\313\274f\r3\275&\241\237\275s9^=k\347e\275W\300\255\274\237\237\273<\037v\336\274<`\220\273\210?b\275\007\253\013>\\1\025\275X\357\207\275C\213\"<\311\027\372\274\272\354j=@\270\210\274\332|\177=\225\266\320\274\354\260\203\275\337\264\253<n}h<\001\234\035=\177T\230=\344{I\275@\234O\275\300\332\310\273\035\221\300\272\303BT;\335\366\270\2744\230a\274\306\304*=il,=K\363*=\376\316\267\274S\315\300<l\3631\274P\\d=\356\252\306\274\267\'\200\2752\272\201\275\306\255\337;D&\010>F\030\302=H\272\006\273 \321k\273\307,I=C\271\317\275V/\262\272\261P\327\274\342S\272\274\361\032\014=\034\264\001<\350or=\344T\312\275\004\021a\274S\310\334\273\262\263\220\275\272P\261<\375C\375;\177?\262<~<\324\274`nY=Q\305`=\243:\352\272\230v\322\274\353:Q\275QH\254\274BF_\275\213FU=)D,\275j\204*<\263w\260\275\245]\243\273\313\247==\205`\244=\330H\210<N,\235<\354g\237<\314\200\006\275A\021\273\275\004\376D\275\3533R<\233\014\212;6\n\216=\003\332\010=i\007\265<g\255\264<\331\315\000=\247V\033=\"\006\r<3\215\"=\035\273\200=\222:\206==\\\255\275R\330N=Ym\324<3\213~=\307\210\376:\253e?\275\322\034\277\273m:\"\275\360`\220\274=))\2756\210L=\001\2530\274\362\004\222\274h\031p\274U\3527=o[\315\274\363\337\231\275\272(\253=\333\367\377\274:U\233<JD\022;#;C=\311H\n=\274!\363<\237\301\303;\222\207\017\274\350\321\223\275\036\3675=\3153u:\371\206\333\275n\0136\274\331{a=\223\344#\275\312\261\345\274\325\020\342=^\'\356\274\013\302\212=L;\024\276\303\371Q\275\270y\366\274h\356^<\270\017w<\t\371S\275\337:\010=t\373\207;6\303\t\275 \270\344;b\237\210=\004\243\234\275G\345\212\275 \013\030\275w\230h\274G\236\235\273*\027/\275\177{\"<(=c\275+\306\225<m{6=\260\231]=\267\017\003=\354\010\3328v\251\205;\205c\013<\030@b\274\350\004\336<\221\205\232\273\334x\002= \225\312\274\266\037\353\274\205\332\200\275p\232a<p\321\243\274O\307\355<\201\014\260\274P\025\227=\230\233\033=\216\342a\274^\204j=\207\260\233<u2\000;\223>\251<!\035v\274\340\202\355=\267\367\227<7\356r\271\004\244(\275\330\032O\275\324\3767\274^\311n\274\344tU=x#\235=\006\371\201=\213|\t\275(\251B=\360\2142=\255\363\221\275X:\262=:\217_=\264\333=\275\226\244c\273*\031\261\273]\327\232=\rW\261\274\254\337\227\275G\023\032=\031\031}\274\021\333d\274\007x\024=\377\033==/\216\000=`\374\207\274I)\352\274ek\204<\033\206\301\274\370F\303\274||*\275j\301\343\273fU6=O\366.=\266\2266=JWs=\356Tb=a_\254<(\3015=n\rN\273\230\014=<\351\232\204:\325\014\014\275\3409n\275\277e\014\275\211\235\377\273\367\367#=\017\034\232\275\274#\325\273\207\333*\274\000>\355\274\326\021q=BU\353\274hB\234\275\351\273f;.\204\360\274\007\210L\273>\240\306:\2707#\275\nW\320\274\306j\254\274\232\362\220\274i:\347<J\365\304<W*\214=q\036\272\275\264\221+\275\"R}\275\224S}=\324\326\034\275\366\366\017<\244\354\027\274\034\266\033\275D\373S=a\026\020\275\2775N=\314~\310=\223;3=\315;\215<\010\216\310\274-/J\275\006\274\201\275\230\\\246\273~-\305\274f\223\023\274\344\313\005=\304\200\263\272\346cw<.\251\305\275\n\324\215=\356\"H\272\266E@=.\277\021\274u\020Y\275\357\357\022\275|=\265\274\365\362\252\275\003\215\321\274\035\3341=f\214y\273\312\020\373\274\376\306\352\274t(8<\233Jd<\211\245\360\273\344\276\246=\301\316i\275Z\013V=1\342\346;[f\036\275\007S.\275L(x=\0260\200\274\311yx\275\266\023\212\274\243\254\305\275&\310\373<{/\305\274\316g\037\275\360{\204\273\217\342%\275\332\247\261<x\001\365\274\215\257*\274i\306\220\274\214t\227\274\242\230&=\374\343\266=b\253\036=-\030\376\273\233\357:=6\251\003=\217}\005=`CJ=1qd={\016\254<\271BH;U9\214\275\363\345E=\032E\r\275\014\277\216\275\303Ui<\260\327{=\200gI=\347\347\014=\372-\007\275\003Y\231\274\2760\214<\022\244\324=`\242k\274[\003:\275\303y`\275\351g\273<\374\335i=\356\\\202=r\017\007=]\360\310\272=\364\"=\024}\247:\312\317\235\275\271r\207\275v\344\316\275\2433\367<X\027\245\2748\333\312\274\310\'\245;3\334\177;\264\020X=\337-\261\275\322\330\375<\026\014\267<\306uV<\251>}\274\034\3364=i\233Q\272\365\213R=e\206\353<\223t\265=[\305c=\236\341\226;\212\206|\2756.\224\275\240\031\213\275\361\211\251\274\274\000j\275\2640\240<\231\331\347<,\337\222\275\356a\251\275[^\033=\216\300E\274\246k\222<\3027\234\274\225)\220\275]C\271<\201\2005\275>8\271\274\270zK\274\253v\277<\330\277\310=\314_\223\275\030v\344<\035\346\347\274T\321\216\275\351\3201\275m\251\372<\357\373@\274n\031\264<\263A\310\275\313\367\t<\014\025@\273ME\336:\331\357\315\273\321Ij\274%\225%=!\246F=o\325\357=[fb\275\301N\371<5Q\345\272\264\326\370\273\301\034B=w`h=\006\365\322\274\003\025\324;\360\327}\275\275\377\032\274\363\355\234\275\004\2162\274\003\200\023\275\375\231\"=\021x\312<\203\361\001=\275\357\243;\261^\276\272i\372\027=-\271#:m\307Z\275H\025\013\274\022\310\277\274\250\036B<@B\001\275\206e\001\275\025\232v=\213\263\002=3J\212\275\214\345\263<Pz\315<2\220|\273\357\301\234<\277W%=\004\256\202<h\235)\275PJ\364\274\203h\252\274\277\224V=\230\372\204\274n\212\306\273\205<\232<\216\353\017=\243\366\257\275zOK=\232\031\225:\030\307\331;\010\376\r\274!\320%\275\2543\241\273s/\211=\267\363]\274\002p\n=g{\003\274g\230(\275\373\246\303:1\267Q=\r\010\361\274\242\265\032=\314\"&=\225\274\016\275w\345h\275C[\006=7z\230=\347\363\032<9b\016\2754\331z=\267\305\346<\3370K\275Py=<\031\000\n<\344\270P\275\245\330Z\274p\2272\275>\353\227=\010Nd\275\302\241)\274\240\330m=JG\321<?\246\325\275^\265\001\275\017\317\377=2,\013\275\220\205\000=\016\254Z=:\\\224\274e\031\244\274F\031\322<\327\316\020\275y=\363;\001c\214\273\306\014\035<-\363\031=\213F}\274\371z\303<\212c\201=c\256g\274\304\247\220<=72=(\365\376<\013\024X=\304l\315<\303\266\214<(s\n\275\214\364\007<l\324\233<U\260[<\371\302V<!6\000<\345\226F=]k3\275\034\001\013\275fzi\275\324\276\022\275\275\017\374<uo\204=\214\006\310\274\307v\024\273\331\372\021<6@\006=\310sn;0\377\022=x\236\276=\244\345=\274B?\336\274-\273\256\272\214rI=w/\246\274\375R\017<\372F\261<\244\216d\273\352XF\275[a\213=\032\310\221\275\235Tm=4\315\002\275w\001\362<\336\027\001\273\373\301\346<[ \033\274\304\203#<\023\345\177=\016\241\224\274\016_\243<7\033\225\274\275\312\320<k\220\344=\313\251\033<R]m;\034W\212\275\037`\023\274\014m:=\335\275:\275\241\220+<\200]\033=\364\236\236<70\347\273\205\232T\273\221\271\037=\'\034\227\272\t\372B<@i\232\274\346\326a=7w\200=\017%\276\275\244]\023<\225\327\256<n_\210=m:\004=\034-\2348x\r\231\2758\332\374;W\0336=\340#\367;u\261\253\274\023\314\r\275\031<\005=(\200\203;L\375\347:\345k\220\275IuL=\016\367\216\275\271\257\030\275\350\340z=7\260;\275\235;\203=\007\345\252\275\252y<\275t\211o<\230`X\273\231s\003\274/d(=\300U\206<\240\025\342\275\025\334L;\214w\314=\025\317\017=\372\214\005<\355dS\275/0O\273\3700\260\274#\300\'=\224\356\033\275\364A\272\272z\307\252<\231\024\010\275,\243\367\275\341i\025\274e<\274\274\3626\t=\275\332\243=f\241\261\274\3377f;\372 \273=\255\377k=z\'F\275 *\347\274\022\257\370<\224&\343\274\005\273\223<m#\225=\t\253\357<{\201\264\274\004\312:<:\301\201\275\335\213\266\274Z\241c\274\317W\032=\313\262\370\273\216%\022=\277.o\274\325\346\343\274\245\214\223<i\245\244\273\366\251-=\213\304\316=T(5<fz+\273\337\213\357\274\277R\n\274\371\2358\273\206}\273\274\\\274\031;\250G\320=\367\003\024=*bT\274\245(B=%\260\343;ct&=\371\006\353\274X\0259;;\304\224\274\337\255*<\335l\013\274\374\333\226\273=\360\275<y\2357=<Qr=/\361\212;+%Z\274z\232Q\275\313P\330<\216\\\265<f\250\001<=\375\211<c\314S=\'\005\303\27402o<\333\255\237\274\205\301\225\275\271\027\374\272\200l\036=\332\232\324\274\361\006D=\252\260\354<=g.=%\306\340=&\237\206\2756\245\236=\257[a<\005i.=Y4\027=A(\334\274Q=\254<\276?l;\311\352N\274sw6\275\233\314u<K\300\025\275\321\345\236<\305\224\177:\263\366T<f\325\235;\255\247\204=\231\005T\275.\315\267\275T\0213=,H\201\275\345\177\213;\266\273y<\005v6=E\n\323<1\327><\251~\254\274\n\211\214=\234\000/\274\270=\031=*v\212<y\334\025=\002|e\274\312q\345\272\220\267m<\027(\005\275m\026\256\274ib\021\275\2434\355\275\274@F=\006\330\02798~\303\274\302\024\220\275\'e\230\274\203\344\326\274\036\357<\275i\201\356=\252\025\021=\2406\273<\301\301\332\274l\354\257\275\227-\276\275\371e\364\274}\021\374<\231\245\027=iK\025\275d\210\\=\211A\206=\374\032}:\271U1\275\277\257\323\274\273\356J<\025\233_\275n\232+\275\034d\236;/x\025\275?\373\010\275\211\267\372<\341\313\216\274\217B\233\274\n\317\267\273:\332\002\275\207]4=\252{\021>\255\343\220=\213\220d<2?;<v}\301=\r\324\343\274\372!\245:\026\003\277\273\025\212\245\274\'u\274\274W\204_=\202\036\001<\276\014\206=\226/\207\275#\341\351\274y\344\235\274(\3111\274\303\252\244\274\235\367\245\275\360j\230<\2343\003\275\202\245g=\223\205V\274\277\243\214\266\306\"\341\274\013uL\273\323\352\223\2736&\244=\325&3\274\361\243q\275\t\350\357\274\205\251X\275\311\3144=\340X\304=\2770\201=\265R\323<x|\014\275\362\206I=\255\346\246\274\265\277\272=\366\317>\275\267\236\027;\236\371\020\275\270\");\223\307\243\275A\237M\275\204-7\275\353\n\005\2768b\315<I\022)<F\002*=\300\"\027\275\263i\203\275\365\236\253\273\313\035\226\275\357\320\004=\326\032\207\275\\\254\030\274i\313g\275\246\357=\275u\325\312<3\005\356\274\241\010\\=\3101\201\2748d\227=B\244%\274\302\264\220<\021\341\353<\274\213j\275\341\235A;*\354\037=x\336\222\275\303q/;\261\210=\274\257\231i\273\220_|\275\365\315\237\2749\373&\275\223\263\304=\266\332\205\275w\200\211\275HI\005\275Y\014\300\274\370N\211=\270S\224=\237;*<\322,r=V\254\237<\035\255}\275\026\365\213;\354\002\t=^k\274;c\332Z\2759\262g<]\270\241\275\216\030\225<\200\235c=\236z\340\274<\320\205\274~\234\225\274\214\207\206<\302\321\005\275\260\304h<\315\230D\275\013\014\013=\246[\332<\326-\'\275\264\323b<_\326\362<[.\177;\213\216\246<\266\371\216=;\257\212<\022\306\325<\351!\010\274\003\217\001\275`\313\304\274\024\355\277\274\243\n\214\275\312\351\014\275F\274\257\274H\307\030\275\244M0<y\377\004=,\222\216\275D\335\244;\033\252K<\376;\016=\247\375O\274\321\3241<k\306U\275\255\t\375\274\354\232\306;!\3508\274\314\276\307<16\034\275\347M\252\275\337P@<D\222\255=\340E\004=\375\002\315\275\266\347O\274\016\214o\274_9\025=\241o\334\273\251\213L\275\310\014G\273\037\'d\275U\206\230\275`j.=\321%\375\274\033\330|<\007a7;|\210e\275\274\346\310;\366\222\027<\0369\021\273\2243\316\274\360U\313\275#\340\\<\202\366\002\275\321\344\326;\037\273\242=\237)0=y+B\274\337\311U<\336>\026=\t/k=X\274\213\275\223T\216\275Zi\305\274L1\243\275\307\210$\273\311\354X\275 \013\340\274\014\232\274=d\240\021\275\020\346<\275\232,\204=Y\273\323=6\317\333\275\267\3623\275@\313\\\274\302\377\032:f\272.=\275\261\255<&\001%=jo\036=\354{\362\273\374\336\345\274\371KN<\247^\262=e\354l=\250z\007=\331W\256:P\211D=1b\207;EiG<k\222\336=\263\271?\275~5\300\274\333\016\215\275e\315C\275mZ\016\275\337\344Z=|2w=\302\245p={\317\366\272=\256\033=\024\306\217\2736\376\361<\301O\023=\302\346\272<ba\304<\334,q<I\022G\275\200w\213\275\313Z4\275\212\234\367\274\020{\034\275N\035\001\275\346\247<=\210\300\201\273\232\035!=\250\247\322=\345\244\307\274Io\315<\032}\203\274\361\314\271\275yoD\2743\\B<\307\331I;\266Nu=\225$\335\274\224\027\366\273/\255\343\273:\026\024=\345\305\250\274\364A\212=c\344\000\275 a\017\273Y\032\236\274\036\\\243=\227\235\203=\302\335,=5\204\342<T\267\351;u\263p\275hYO:[\353\332\274\\C3<\335\353\322\2745\006D;\266B\260=\276\021\342<<\375\007\272dl\247\274\341\236)\274\247\205\317\273\303\207\027\274\203\025\263\273\213v\027=A\373\205=v\010S\275R\224)=\353\235\315\274\266b\313\274\021\263\241\274\3522\271<>\370\037=H\362\274=\221\003?\275\03466\275\330P\241\274\332\346\252\275\252\307\204\274>j\n\274\304\246\231\274\245\344X\275\364\263\241</e\210<\327\236\222<\311\013]=\014\367b\2751z[\275\263T\027\2751\356\315<Q\336\237\272\312\016B=%\270\"\273\260\\Y\275\000\223\215\274\271\025i\275\264\332\251=lN\001<\027\357}\272\003\346\276<\330\231\317\274\361\010\241\275\251\246w\275\363\331U=\217R\214\275\202\010\201\274\"K\204\274\316Kh\274uV\023=\271\372\261<7\276\267<g\014\177\273\202\017,=}\237\276\274\325\225P=J\331\221:#\271\031=\374\244\261;|D\275<\302\320\224<,\307\226<\236\261\277<\336\245\270\274\226.5\274U\231\035\275\305\272\243\275\022\242V=\327\275\004\275\317s/\275\232\221\217=\2056\300<E\000`=\226\230\253<\224\005\227\274\364\2327=\014y\246:\021\360\000\274}\235\017<\010\275\372\274A\330p=^\360\305\274\246\333h\273\311M\016=\361\247|97l~\265\333\330\333;\2469N=\331N\247\274i\307\237<\247i\335\273\217\317\n>\251$\032\275&\337\331;\347\226\237=&{\270\274-\013\271\274y\301\311\274L\334*=?\334~\275z\322\204=\201FG=\021S\234\273o\2732=/(\314<\365\221\221\274{\212\220:\036\332\362\273\312\'j;\032*<<\262\211@=eC\036\275\3753\265<\224\200\207<\255\031&;cw\033=\257\003C<\032\370\225\272\346\275\241;.\231\275\2745\035\355:\307\227\234\274\225 g\275G\222\353\272\374\0362<\203\240\223\272\022\035\323\274\006\222\226<0\312\220\274\343\'m\275\361\355a\275\201\034\246<7\335\355\272\366\336c=S1\271\2750\250\275\275\211\205\367\273\3420\014\275<\2477\273\332\341K\275[\250\307=D\223\333;\366\224\350\274\2508\332=\347\017\017=\'\373\310\273\236}\304\272k\316\013\275\"\206\002>\325\375\367\273(h\245\275\n~\323<hh\340\275\220\340\354<\271\267\374<\000\n\020=\036\312\351\274\"Z\273\275\211\037,\274\201\302\237=.\347u=\013\230\356=\215\370\246\275\266\\#\275\314\342.=\310P\370\274\312\005i=&\373\210\271\331{\034\275j/b\275\346K>\275W\243x=Z$\007=3\274\316<@\020\201\275\231\251\000\275\342\3623\275\331\007\226\274\031k\245<\013LZ=\337\246\001=\025\314Y\275\372\377J=2\246+=\277\005%\275\301\317u=\t\267\226<\215\257\210<\210ev=\310\214\251<\241\\\264;\204\026\270=\212]\201\275\327E\020\275/C*<U\3667\275\233\234\236\275\005SB\275r\212\217\274\250\233(\274I\217\027=U\322\325\274,\234\211\274\312\001$\274\032{\277\274EsL\275\373\354\013<\2378\026\273\355a\000=j*\350\274R\364\221\273[\314\000=M\305\344<O\014\212;/j\312\274\350\364\243\274\307\356\343\273s\177\234<\005\010\256:\272U\020\274\0237\334\2746\030\322\275\276\372\\\275\262\266\243\274\302\375\244<\354\315q=\3018\326\275\\\232\217\274\354\237\225;\361;\304<\201\334\334\274\373\303\334<2;\001\275#/U\274\312\010\t=-\3162\2756\016_=H\256a\274\372DT\275\252\214\217;`\201\314\275\366\340\002=\2727\027=G\322\n;\003\253\256\275\206}\327\273g\260r\273\313\323\205<\300B\231\275l\274\342\274\236N\241=\242\210f\274\371{\260<\360\224z=h;\234<E\237\275=\231\317\246\275\245\003\247\275\246I\367\272yWb=$\303\337<\227\224\202\275\250p\276\275\237\033\206\272\210\243\351\274\010\362\000;B\343r\274\"\031\253\274\360a\333<|\242\211:_\022t=\303H2=\233s\026\275\362W\245\275\316]5<\331w\230;}\254.\275!\025[=k\266\213\274\031\356C:\005\226\020\275\027\252\337<\3644\270\275\303\2743=\216\304\244\2754\026\320;\356\266\027=\333\246u\274^\334\257<\037\\\027\275}p\232=\024\236t\274\017.\340\2740WE=\n]\217\275S\201=\275h\341\210<Q\337\n;\221I`=.T\224\274<\343W=\363\226\300\274\307\316p=\344 5=\224\265<\275\344\t\245;\2631\000>\307D2=\027B\304\274\374\215\262<tAt\274\017\302k<\204\212\255=\204\004?\274X\014\272=\2726\252;\323\224x<\325yg=|\260\026\275}\301\232\275\325\004K\274\336\363l\275{(;<l\024\223\275\016W\343<\330\206t\275-\361\215</\247\326<\213\241\017\276\312\343\\\274\322}\226=\306f\016\274\3023\233<\300r\236\274s\371\032=\256\341\005\276\034\376\023=\003$d\272\264\215\'\274P\222}\270\014M\352\274\325\264\226\274$\243!\275.\266\374\272\212\215\212=*\023\253;\367\027\346\274\025\215r\275e\000\370=\206\256\311<Ei\013<\t0D<E\343\262\273\204\324\036=\201Y!\274\232\375\324;\1774m\274\023\267N\274\252\323\200\275\366d\023\274i\332\236\275|\360w;&\307\377\273;+\305\275\375\335\005<{\374\010\275\266\002\225<\3610;\273\362K\234=\271N\337<W\230\235<\337Q\201\272-a\242;\230A\177;Y\371\325\274\262\200\270=\010\270\022=\023\363\307\274\350\234k=\341`\276\275\370\331n=\036&J<`D\257<\316\273\032=\327\010\276<\031\261\014=@\315\027=\374\277|\275\301<\206\275\326\237\032\274o\310\242<\230&=:\2478\'\274\370\025*;Dk\212\273\317\252\211=\n\221\201\275\030{\307\2741~\200\275\316\277W<\275\256v\275)5\n\276d\300V\275\224\nW<\365\351\216=\032#\203<\246\006P=7\377\032\274\nsY\274\232\256\020<\340\324F\275\201\"\271<\351\030\376\274Y\277\374\274\337K\347<\337\356\360:\365\370M\275\270\032\025\275r\024\377<A\010G\275\310\326\224\274Il\251<\252\333\255\273\252-\244\275\364C\324\2742\364\271<\372\216\037\275\353T?=\216D\272;\037\243\"=\200\004\315\272\217\234\361\274\363\231\002\275\340\330=\275)\316\205\275\342cV=n+\273\275\325<\201\273\275\240\242\2754\261-\275\222\tz;\027\025+\275\350\243\217\274\235\317\361<#\357\022\275c\230\245\274cT\256\275V\323t<p\253N\273\324\216E<\033\274\242\274\327\324\205\274y5Q\275\270\221i=\301)\341\274u5\007\274\256\317?\275\220a\352:\313\3770:/\367\266<\006\367\314=\220?G\273&\272\343;\242\356V\275F\002n\274\264\370\201<(\031\226=\270\337l\275\n\362J\2730\270-=\303Ic=+\t\010<HM\036<O\004\302<\002\240\025\274|n\271<\367\346\301;;\210\224<\200\371\216\275\366\000\364;\203\235\370\274\023\227\205<\260\217\020\274\373\325\032<\026\335E\274\241\240^\274h\217\212<\277\261\036=i\317O\273h\346\342;\3306\215\275\322\033f=\335e,\274\236\306\033<V\032\356<MO&\274\257c\215\274 Wu\274\021\235\253\273\371\032\334<\213\235\255\2754\311Q\275\202\252\\\275\233\374\371\274\010\235\254;f\252\213=\312\240\334<\327O\004=\214\250+=\361]8<\270cb\274F\203\001<I\362-=\236Ei<\023\240\272\272pK\177=\225s\321\274,;F=\0039\246;\002I2\275\364\343\273;\000\241\022\274\332\026\237\272\223\272m=\337!\223\273\377\014\310\27543\202\274\020\n\237\274\010LX\274\205\034\266=\277\250\232\274kD\021\274\345kJ\275!\014\272\275\317\262\236\275-\373\342\272\243\002N\274\3529\210=\001Rz\273\354*~\275\324\014?\275w\022\221=$\272\003\274\0242<=\332\035B\274\025^\265;\310U\021\274\254\212\263=m\304H<{V\261\273=y\033=\207\271\214\275:M\231;\362\000=<,h\013\275\257\350\025=\310\341\270\274V\362S\275\031\002\252\273E\325x\275\316h\t<\n\376\206<6\364\303<\010O\327<\'~\016=F9_=\214\0078=\204\302&\275!\300,=\216B\256\274\377\t\231<(y@<\'\320.\275\003\360\023=\347\004\031\275\264[Z=\201\335c\274\325\037\316\275\246\206\235\275\361W\247<\256X\227<\327\276\210\275\016\253\014\275R\303\201<\016RV=6!\226<\004c\201\275\312\213T=\336\334\305;]\330\200<7\330\305=\217\213\364<\343E\243=\327\372\016=\344,5\275\010\tr=;R\272\274\314\200n\275\230\362\202\274z\251\217\275\312\370\035\275I\363\332<j&\235<\316?\271<\037Q\247\275\362\311\262<\370\225)\275\021E\206\275\342|\265<n3\220=L=@=8\271\376\275\204{\323\273\177DR:\255TZ\275L\207\206=H\030C\2755\257\233;r\364\255\271]\321,\274\027\251\256\274\251k\237\273\026q\032\275!\355\020\274\264\363S;\027I;=[l\220\275\007\345\272=\350\225\004=d\206\317\275W\261\250\274\034d\263;B\360\236<y\372\342\273\203\256+<\2268\272\275\271\247\215\275\252\024\'=oN\261;\004g+=\217X.=\n\022\217=\241z\020= \356\363\275\"\253\354\273\200\270f=\314\203k\274(z\227\274\2277]<\n\322\271;;]\231=\003F\2409\365\237\024\274\267\2259\274\263\240I=\364L\224\274b\366\347;\330\340n\275)+J=\232N\250<f\006\007\275\2351\224\274\320\253\026\275\235>i\275\321\315\215\274E\024\271<\301\007U<i\377\033=c\006\020\275\330\355\001=\320<z\274\214\"A\275pD\326\274\036\275\021=\010Sr<\205\002\267<\363\010\002=w\006\337\274\252J%=\030M\203\2715O4\274/\022\347<\320\024\244;\243\311\354<\232\362h\275\"\264\345\274\250\241X\275\275[t=|F9<\005\275%=(Z\023\274e\375#\275\010\233\220=\276\326 =\005\242C=\3443\027<\020D\313\274,\022O=\332?9\275\226B\032<G\227\177<}\205Q<~\247\237<\355\361\242=(\016\375\2742]|\275y\207u\274*fV\274\002b#;\256\027\233<\r\014e\275\323wD\275\235\347\024\275\213qQ\274\321\273\246=\344\224n=\327h\240=\362\316 \274H=\"\275\266\365p\275;N\207\274\024\243Y8H\271G\275\261\357Z<\254r\255=\343\314\277<\277|\354<\017\034\241\274Q\256W=\'\342g\275~\222\320\274Q\020\277;`\030\241<\270\227\337\274\355Y}\274\004v)\275XGF=\031r{\275\200I\200=\3641\253\274\342\217\013=B\326\217<]\t\202=\375l\217=\302cc\271\347v\260\274\007\236\335\274wR+=\300\337\205\275\234\235\222\273\303z\014\275\377\355\036=\004?\240<\267\246:=6~\005\275]G\217\275\204v{\274\333\276\026=_)q<M\245\365;\000\323\324\274vu\301\271_\2030\275V\r\025\275n>\225\271K% \275i2\332;z=a\274\340\310\271=\252\t\345\274w\0035=\304\254p=+B5\274`xe=N\\d;u6d<$\226 \275\340\257 ;n\362C=\351\001_< \355\226=\361\204\215=&\003\000>\203\275\376\274/\336Q\274\334\342\262<\317{c<Q\221\021\274S\2135=d\331};\021K\036\275]\211\"<\317\225&=\000\200\217<\246h)=\202As<q\005\014\275z\311\'\274\345e.\275f\273\036\273\216E\236\272\307\235\262\274M\300\320<\320C\347\273\217|$=\3532Y\275\t\017\240\275\323\226*=\002\024\220\274#8\370=d\177\016=\036\3231=\370\031*<\t}\217<j\370\007\274\236\017\356<\003wU\275\312\303\336\274aA*=\226>\004\274]\214\321=\267\231-=L\340\"\275\301\212m;\250\260\034\274\330\t,\275\230\356#\274\005\033\337\274\256W!\274\336\346\370<\262:\t\274^\315\242\275\226\217\375\275\020mq=\222\013\363\273\025\200\206\275\365\315\027<\006\346=\274\242o\036<U\371\344\274F\203u<T\275\277;.\251\307\273\276\022\215=\345q\232\275\210-\231;?O\t\275t\007\252<\0334-<\311ml=\330\270\343<\231\275B\275v\342\007=~\211(:\237D\274\272q\215\245\273,.`=\013\272y\275\260\232\365\272a\233\016=\266\274\317\274!\324H<\270\265\337\274\243\013%\274a\365/=e\333O\275\212\234\343;A\315?=\353aQ=I\257\231=J\313\263\273r\236\001\275\212\332\206\274\217\300\003=\"8\227<\316h}<\014\377\222;5w\304;\350\227\256\275F\274\205<\272l\320\274\330z\302\272\236\023R\274+cZ=\254\331\260\2745\270\233<F\371\370<\t\301\263\275\206W4\274c\307\250<\245\021e=\233&e<\224\2414\275<\244\027\275Ih\276=\004\324n\275k\2012<\261n\356\275\241<\232\274;\204L=0\256\362<\245t\017\276@\207\024;\277;\265\273\225\335\264=\t\245\326\273\374\350\264\275~I5=cs\033;\3302\r<_\004\350=f\366\217<\203\203\212\274>\237\000\275\243*\323=iI\335\270\346\251\342<*\336\274;\305\035\225\273\010\'L\275\023\322\025=\270\243\213<g\341\t=\362\263\373\272\220\037\002\275\260(\206\275!az=v\302\332\273\221\035\037=P:\321\273]\244r\275\205\265=\274\0048\217=\324\306\264=S\272\232<\300\220\204\274A\2318=7\234F\274Vk1=\212\3310=x\032\245\275V\005M=\203\3709\275\037\347(\275}\210x<9\013\270\273Km\231\274H\362#<}\306\216=p\322\n;\245\306\246\267J\007\324<k\276\202\274\034;M\275D\261\303\275f\343\372<\277\350\352\273j\232O\272\244g\233\274\006\242\347\273\213\224p\273\330\365\346<\230\227\017\275\307\353\225\274\365\204Y=\212]\035\274f\215\312<<\341\325\274\204\320`\275\266\206?<\244T\344=9\216\200\274_\301\005<0\322\351=2/|<\013[O=\"\025\327<\250W\241;\245\227\252\275\351x\206=D9\027\274\375F\223\275\300\200\262\275n2@=\001\235\033\274_\324\202=\016\355u\272,7U<\203\357;\275Q([\275\223@\032=8\315\300\275K\344N\274\213\306\001\275O9@=\360l!=l;\235\274\327L@\274]\253\026<\273[\221\275\324#\360<\276/\244=Cw\007<&\303\240=\264Oj;F\361\363\274\r\2222=wy\035\275\364\205^\274\335\217G=\242\203\224\274\350\315&<5a\330\272\250\246V=:\344_=\"\333l=2\\\300\273\253\306%\274B\320\237=\025\377\204=\267c\265<\337t\032\274k\251\221\274\267\301\034\274\306\r\355\273\201N\243<\202\212}\275\235\0059\275\313\210\005\275\366\340i<*\301\313=\"\254\037=\375u\306\2748O\223\274\025\377\344<\305\203\267<\243\310\257\275\036D\233\274[\305\367\275\366\ta\275\332F\026\275C\273f\274.\310W\275\270\312\307\274Z!\253<\247\274\"\275Y\327\223\274\342\367\337\273\236\367\367<`\337\027=8Zc=-ZE=\324\007 <\030[\331\275\263\301\211\274o_\241=f\250\203<RI)\273%tZ<\276\023\213=\365\227\340\274\303\254\001=z\267c=\306W\206\273x)\351\272\352C\230=E<\006\275\337\027K=\326\203\270\274Z\357\211\274Rz\010=\020@\240<\000\202\217\274N\177\365<\201\271H\275\"\250P;\\\324R=K\344\340=~\327\236=\3536\316\275\346\210H=\224\330\267<\262\265\232\275\344_\021\273\325\311\227\275\244n\020\275\360\356U=\177\365\365<\204\371\265<\312\260N\275\266\302\317\274]\322\'=\246\025\032\274J\303\250\275\311s\026=\202\311\207\275\221\367\025\275\315\0269=\217V^:\236\032\336\273\243$X=6p*=\272w\257:\272\215\2529]\001\265;S\326%;\030\323b=\327\r\210=$\226O\275k\032m=\t\232\256\274\354\367\221\275\242\264M\273e\236%\274\300x&;a,*<\313\030<<\361^\005\276\363k\247\273\247\304\214<\025Ww\275\340\226\306<\2048\014=\031S\214=\374 \270;\205.4\275\375P\033\275\022K\031\274b-\206\275\r\020\353<\212\3750\274\215\354\025<2\243\355\274\021q\350\272\274{\305\275\250\213\273\274\342H\312\274I,j\275!\322\330<\266\347\361\274K\317u\275\276\346\364;\247\227\302<$\246\236=\201\227T=\031b\002<\30534=\277\010\014=\003/(\275\356/7\274=\032\242<\206\360\271\274\255\340X\273\373BV<\306*\027<_\353\\=\243\312A<\035\351\001\275R\243\024=\222\330\277\273\357XJ=\233\270\246\275\376\372m=\364\253\230=\234\342\017<\177?\331\274\327\r\355\274\025\272\257<\013U\312\275_\010\377\274nU\243<w(\253;\333\365\'\275\035T\264=\003,\222\275\030(\020=\232W\375<\302\266\020\274A\217\315<\360\020\230\275\375!W<\013.\350\274\r\025\002=\257\362y<\3216\222<)\221\005<\216\374\306< \347\273:#`\231\275\323\207B=\025\000J;\326n-\275e\351\350\275Je\251\275\256\214\241=\227\303\264\274YJS=>\262\022\275d\227\032\275\3144u=\256\231a<\321\375\007\271#\317\260=,\265q\275\315\335\316\275\200\000\206;\265\332\227\274&\035\r<\005ij=}an\275\314#*\275\202.\315\274kP\225=\3412\"=/\033\205<\004\371A\275d77\275\271c\306\274\371\030\337<\2227\002<7\353+\275Z\341\372;Pn\026\274`TF\275\233\2560=\360\036\200<\367\'5\274m\253\241\275\241B\236=C\024!\274\263\321v;\365\373@\2753Q:\275\30543<O\301\361\274\216O,\274 2\020<\362T\367<\327\373\216;Z{\370\271\263x\306\274r\251\231<\tt\254\274\273\240\005\275\302\331\360<\270\200Z=_\250\345;Wx/<\003v\017<\207\3721<o\255n\274\274F-<YA\250\273w|\226=\276gm\274\372\221\371\273 ~\227\275\360\232\267\272v\366~<\335\231\231=q\'\000<\004\211\256<\312y\003=\353\025\2158\253\037\211\275\n\202Z=\337\277\031=B\321q\274\361\357\201\275\271B\210<m\341\301\273e3\202\275\253=x<\205FJ=\245\365+\274\271\247 \272\305\311n\275\211>\224\275\262y\374\275\272\247\306\275\225C\243<-\333-\275\331x\246<\237>\224=?\274\202\274\376-a=\277v\345\274\0174>\275:&\232=\020\345>=\3400\214<\254L\351<Sq\003\275ct\310;\217)\341<\210\254b=L4\327<\212\032w=\n\004q\275\n\021\257=\237\352\030<\206\0048\273t\361\327\274\362\310\334=\271\343\037=V\245\302\274\256\320\000\275\271\353\360<l\364u\275\004&;\273s\370\367:\264\177G\275\334/(\275\244\303\303\274?\022\n\275M\333\317<\013\327\303;\314\271\335<\337w\314\274`\260\304\275\322\360\341\274.\177k=\326\027\026\2757$\275<Y\'\257\274q\323\037\275\350/\007=\226\234\222=\223\010\251<%s\267=\034\332\200=n\013\026\274S\315\206\274\374\"\356\274\264e\334<\242\027G\275\211\263]\275\303\331g\274(\241\227\275\330\257\216\275\2453\203<\210TL\275\350\034\027\273f\346\327\274\035\247\207=)\026\022\274f\274\024\273\2405#=\035\247J\273\204\326\367\274\336\232\335\274\020\220\236\275nWY=\336\251)\275L\'\036=\350\023}<\347\020\202\275\ts\324<\251\242\254\275\224\311\r;\2607\022=\234q/\275\213\n\303\275\346\247\302\274`\233\354\274e\2224<\214a\326<\201Sa=\2563\315\275\017O\212\2758\021,\274v\0015<\354X\260<\350\211\000:\246\336j=\332\275\344<\216\213\003\275\311q#=i\2255=9r\327\273{\202\372<\361\375\204;\200\203\026=\\\215\026\275\"\344\020\275]N\020=;\251\371<q\246\277<\023\017\217<U\347\334<&Y\020=J\016\373\274\275\336.\275\356\325d9OG\205=MR\316\274\346o\202\275R\033{\274G%\350\275\222\354\352\274U;\212\275\200\235$\273\245\177;<\270\020\212=<\"\031=\304!O\275\373\016.\273\027Z\230\274\237\243\242=\276\313\237=f\241\003=Rn\252\274\007\352\255\274Q\n\236\274J\2260\273*}\003;t\257\207<\223iH8\036\235\217\274^\352\264;Q\320p\275\376\367\004\275\322\352\260\275\234\215\016\275Z\023\372<\3131\016<\325(\347;\n^\023=\204\212\244=\000\031\217<\244\2123\275\235$P\275s\321\302\273L\025\022=\370b\222\273b4\205;@C\t\275L_I\275\240\207\246\275\337\\?=\320[q\275\307\252\337\273\007(+\275\315[,=\246\'\226=S<\034\275[}3\272g-I\271P\026\004\275\007\266\007=/Gg\273\254\350\311<\347r\214=Z:\366<\304\365H=6F\330<?\263\020;\n<\035=^\256<\275\322\262\252\274M\334\365\274,\346\010=\026\036\034\275\277\315\003=\000<\031=\351\177\301<C,\207=\256\355:\275\002\253\216\275\345BB\275\\\377\263;\205\255X=\337\372\200\274\013\361\376<K\035\242\275\247\275\034=\215\335\231\274\325\332_\275\320D\262<k\360\212<GB\245\275<\376\032\274\374V\246\275RB+\275\022\330=\275\334\017#\274N\325+\273q\000P\274i\352\253=C\373\013<\2433I\2733$\340\273Ub\274\275\207\006\236\274*u<\274\3368\222\274P\'N=m\3108\275\222\310\3108\014)\322\274iWG=\264\036\363\274\024\307\210\275/\nq=u\371\'=]\213\035\275\264\310\341<\217\234r=\313\302\356\274\310\355\304:\231\350\303;X\254\236;\300\362\300\275Te\235\274\030t\010\275>\372\255=g#\017\275e\005\267\275F\322\272\274(k\031\275\030.w\274m\366\007=\346\032\267\274&\375\236=\327C\260\274\365\004\321\274\322I\024<)/\316<\371\261\301<.\330\025=/\375\234\275A\177\365<\337d}=\017G\000\275\300\205I<\322.\316\273\246\203`=\373\373.=\010\341{=b\000\207=`\224\244\274f-f\275\020\007g=\034\335\007\275\236\222\303:\240\304W=5\205\026\275\266\332L\274\246\0143\275\363\376\352\274!\300\263\275]N\343<\213\271\374\267\300sF<\216\334\320\273/\r\031\275\374&%\275\303\302$<Q.\245<\225T\203<\313oI\274\321Z\270=,\000g\274}\374\276;[h@\275\030\003\277=>@V\275\330\242\260=\t\006H\274\215I4;\'6\252<\254\023F\275 &\327;\020\n\235=\253=L\275L\001\232<-]\217;\007\007\"=\331\031\304\274{\036M=\377\3674\2757\027\007\275-\372\320\274:\261x\274\250F\254<\344\345\231;&\210B<V\"-=(\201\325<\023\377\220\274\343\2025\275\313#m<\247\032O\275\017S\033\275\3422\207=\274\202\027\275\205e\220<\227\017\373<\016WU\274\337\207\376;5\2066\275?\377\252<\373\217\215\274\020\262\277\273\004\004R\275t\016\260<\247;\343\274\2504\214=p\022f\275\264\322s\275\271}\223\275\272\242q=\267r\205\275\2222\262<I\030\301<2\237\214=\023t\245\274iK\020=\257\245\247;h@\217\275\224s\306\274\014C\315<\265Z\363\274\035\013\217=\004\353\004=\372\255\257=\202\333d=\237\317\\=\274h\326\273?\225\301<O=\034=u$F\275m@\253<\255\327:\275\211\2324;AO\234\273\035M\263=\214\303\221\275\236\362X\274\r\340\266\275\270^\261\274\214\341\006=\355x\333=5\337\036<\n\256\300\274]\377\233;\376C\243=\275\227\211\275i\320\320<\315\371\262\274\343\341\246\275\2009\310<\310\361l\275\016\021.<`\376\227\275\002\341\352<\177r\355\274\2321?\273R\314\307\275\352 \002=ma\261;>\316\027=\267l\314\274\266\345.=T\007$\275\017b\223<\261\207\030<\307c<\274\236%>\275\247\315?\275\335\224\217=\002\301\210=\244+\034=\344\255\327;\243\323\036\275\371\005\214\274\214 \352;g\273l\2755\031\335\271\021\271X=W\010F=M\375\302\274\020uB;\016\263\032\275\004D\321<\323\r\321\274\232i\340<~m\n\275\310\225\031=\000%\267=_6\273<:T@\274\210w\024\275\227dV=\014!\307;\005R\276\273\314\027x=\3244\203\275\264+\333<\265\264J:/+\370<\206\200%\274\237\027!=r\007\260;\317\312\316<7\340\277\272\203M\336\275#\002\310;<6\267\274=>\'\275gW\023\275E\333\325<X\227\370\274=\200\026=$\302\246=4\216\203=]t\230\275D7\237=Q\031\242\275JC\000\275\023pi\273\364\374\205\273\210dy\275T_\241<2H\226=\006D\257\275\254\030\207=\206/\361=$\000\t=\241\202V\275\026\351+\275\375\372\331<\256\222\273\2752 2=s\317\317\274\252?><ob\207\274\227(#<\023\337p\275\226\336I<\205\356*=\252}I=\361\252\213=/)\301\275P\353Y\272\32535=\263zR=v\250\222\275\0375\220\275\206\243\250<\305\236\212\274\371\274\272\274(\373\205\275v9\361<d\002>=?Z\204<\003r\021<QBm\275\316t\211\275\304\035\n=%\t4\275\233\361\002\275\242\257\274\275\244M\001<\256\2030\275qX\232<\020\331\230\274y\017\256\274\0259\327\274\014\307\234;j\3342=/\005-\275\213=\205\275\014\t\251\275{\320\333<\255\265\302=O\305g;5\224\256<P5\r\275\036\001\221<&\227R\2759\275\205\275\035=\3049s\306\016;\303&:=o\227\364;\256\304\006\275\277\3352<Z\221T<\007m\235\274d\371H\275A\254\315\274g\306\242=}6\322\274\244B\020=\210\324\375\273F\307\211=\231I\005\273:\030.<\317f\352\274qzH\272MS\330=R\302\274;\264P\207=3C3\275\031\302\r\275$9\"\275\316\264\370\273S\017\344<\\\321\344<1\323\213<Y9><7\316\245\273-:\017\275\370Y\365\274\375i0=\216\252\n\274\003\244\321\275B\377\265;\360\264\226\274\212\347\245\275\210\0033\273\235\036(;\305\037\325<\001\016\014=\2337\343\274\351|\223\275>\3141\275\302\272#=\026;\001=\0337\367\274Mc{=Yp\t\275\223FJ<\310\006\264\274\315\237h\274&\265\243<\374(\241\273\314\377G\275C\030q\274\025\027\234<\375\373\362\274\3218r;\346\376:\274\321u\351\274\255\245f;\231\267\t=.\372\230\274u!\016\275&\355\305\275\334\022\202\275)[(=\236\2356\273\236\334\227\274\233\233\227\275ev\333\274y$\210=\014\353\363\274\033^\206<\215=\240\275&\203\226\275?z\344\274\026\370\327\273\355\030[\275\364\2016<z\250==\231\261\000=\003\337\304\275\033w\307=v\332/=i\313%\275\271:\370\274\013\265\260\271\352?\322;AS\337=\233j\344<\370\343H\275\371g~\274\352\323\231;\352X\224\275\005J\236\273{\355>\275}d\306<;>\274=$\262\'=t-\215\274\335\202\271\274R\311\260\275^e?\275~\031\212\2748P\323;\014\227\214\275o\032\t=\247n\355\273&?\220\275\317\270\260\275\365\331\361\272\270\333U\275\256\200\201=\217\374u\275)M\240=R\300x=E\323\236<\233\331\301=\216\030\347;\025\237e=\262\370\243\275\267\020\225<\372KR\275\036\267\216\274\324s[\274o6\344\274`\210\361<\226,\252\274\001\000\200\271_\212\245\273|\374l\275\010`\270<xh8<\241\326\274;\270U.\274\220$\007=\216\366\006:`\347\252\274\023-\007\275B\340\n=\'\023\t>3f\024<\200\\\204=f\330\206=\241o\021=\224!\211\274f\306G=p}\261\274\244\202d<\216\036\313<\212\247\220<\341\263G<\307\377d\274|#\263<\233\213\300\272\022\267(<\376\023\202\275\024\306!\275\002\232\030=\003\357/\2751e\303\273I\001\262\2719W\211\275S\362\213<\232f\233\273a\334\231=\26415=\r\376p\274\254\350\366\274\261\335\235\274e[\310<Z\327D\275Y\n\265\274\203fY=\327\000V\273\021\000\223\275\021|\3159\236\226Z;\200\014\204<\037\332\243\275u\240\026<\373\216\355\274\253\206*<\333\032\270=C\207\215\273\036uL\273\211\020\265<t\3227=\302\237\000\275\376jm=D\226\265\275\353\302[<\235\361q\2749@2\274\306\021p=\312\242\214<`Bd<\376\353\035<\016H\250<J\212\267<e^<<\353\335T\2756~\244<\035\na=\000nr=\242,\374<\327\343/=\215\330N=\364d.\275\232S\317\273\033as<d\016\377\274\271\345\313<\375w\235:\345x\331;|\331\363\272\364\214$\275\326R\020\275\314Ul\275\020d\013=\0233\000\274sH\001=\322\002\235;o\'-9\263!4\274\020\247\322\274\033C,\2742\330K<\236J\225=H\272c\274\366\364\177\275z\371\215=\326GO\275\034\244\006;\270pv<\031\261\266<?\223\032<g\301|\275\206a\363\274\375,\255<\242X3=\317\207\005\275\363\256\326\275\305\177\025\275k\237\245=,\332\232\273\\6\224\273$\230\264\274\350|\265;@\311M<%\257E\275\037\371\201\273Q~\265\274\202\266I\275\000O\317<\265\243\306:\333\300\007=\'M\274<\344\371\224<D\006\001\275\350\250\n=\201>\006\275\332\265\\=\247c\223<^uC=\315\t\332<WJi\275\364\272\351\274Y\261\031\275%\242\202=\262\262\001\275\224&}\275\253\357\232<\373\315M<\262\375\014=x\307G=\231I}< \3208=\352\267B<a\302\267\272\240\300\212\275\013\207\374\274_\024\241\272yes\275j\350y\273\275\017\271\274a7\244\275V\026\303\273\350\315\360;L\335\026=c\205\363<X9\031<\223\347\304\275\347_<=\202\331`=\2112\236<\035x\221\275\3218\326\274\353\260Y;\301`\315=i\276\220\274\242l\274\275N\330\367=\346\252~\273v\013\027\275\276S\265=!%\000\273\301\265\306=\264\tQ\275\007=t=\276\360\316\273E?\017=E\256\253;\334\261\232=\n\276==\323\304\206\275\244\361\317\2720\252k<F \314\274\230\220\241<d\202\211\275Q\346]\275y\244#=\023W3=\221\247\210\274\256<\236=\274\030o<P\324\204\275\376\0334=\312\202z<\032\262E\274@\370\025=\374\032 =\334\006\245<\263\025\r=_?\037=tWU=A\340\357\275\374\000\343\2742@\002=\257]\377</\367!\274\212\001\262;\236D3\275\017\230\310\275y\302\007=\001S%\275\271~\004=\323\276,\275|\037\200<P\341A;\264\270q<,b\321\2744\027\331:\025\375\265<\021\262\025=j\276\252\275\3100\263\2740\243\326\274\361t\253<\000\032\363\274\345:R\275g5\377<\201\277B\2753u\266<\037\356\362\274\263\234\032\274^\320R\275*\275v\274\243\234\362<\350\003\361<\030\002\304\274&V{=\204\310\234\275\350\272\2608\t\267#;.\271g=K\345\204\275\372l\203\275j\342\237\273\341\226O<h\274\000<V_\025\275\"\247g<\277\035\36580\330\014=\017O\301\273\020O\240\275B\177\264<I\205f;Im\024\275u0\335;<\273\257\274\2379\320\274\007\271\003\275\262d\r\275^;\323\273\337Ya\275\350\250\"<\302\357:=e\3215=\252\217\334=\304x\230\275\241\231\"\274\356\211~=\211\224_\275\255\276\033=\312\304\270\274j\320\017<_<\224=t=\233\274\3133N\2710\2520\2751\367\\=5\277\033\275]\023W<\363\313\342=\034\323\205;Qa0\275>P \274\273\347\264\273\"w\322\274\376\304\027\275\234\244c\274\2400p=\316{}\275\210=l\271\023\354V\275\277t\234;\022\227j\275iu\313\274k\243b\273\254\323\001\275@V\320<\245?\007\273RI\014<\245\365\306\274T\353$\273\013\212==\330\246\002=\217v\236;\'\311\222=\361\372\361\274\025\324\022\274\211\266\243<LT\256\274\nuq=\330\212\340\274\315\271\003</K\246\274V\201W<u\265\357\273\300r\037<h\343\225=!\300\215\275\217x\330\274\304\362\010\275\260\216\227=\351\215}<C\r\031=p\221\370<\240.\003=\351\\\341\273\267,\302\275x`I\274\372\225\352\274\035^K=!O\030=\004\204\341\274\265(\032=\232$>\275\362\362K\274G+\260<+\373\251\275\264}U\275OG\037\274\017(.<u\216\257=\302\317\342<q\3207<\274\346\3168\345\355\240;G\326\376\2749\007f\275\275\'`=W\0305=T\312\007=\251\222\177\273S\242\357\273\221\\\356<\023)Q\275\005\376\022\275Ft\205\275\035H\334<;S\003\274\335\036\032\274\347\374\031\274\270\225Q\275\230\004N\275\\W\231\274\250|\30396u\215\273\274j\216\275\004\357\320;\027\022\203\275p\304U==\356\265:\372\202)=0\311\311\274\227\'\004=\0144\343\274^\341\216=I\312\302<O\024D\275_$\230<\263\365\244\274\030\300@=2\003\365\275I\215\300\274 ]\334<\301\250\370\274a ==\037\025Z=\265\233\226\275\346\274%\274\274\363M\275XC\365;\265\230\337;\362JA<\361:\023\274\013G/=\371\250\007\275j\324=\274\332\3326\275M\276\300\274i=\210<\" \323=\244\242\276\274\264\000M=C\224\227=\377\300}=\362\370/=\355\020\274<\371\357\326\275\325\372&\275<\211\026=\202\345\215;|b\215\275u\337B=\033\304\272<\002$K\275+\373\t\274\215\"\210\275m\343B= \347\026=\360\244];,\007\206\275\0214\020=Oz\n\274F\370\232=3\213\035=\0018\232<\256*\200\272\222\341\256=\010\2106;\2233:\275\321\241\034\275\246SH=8\203\\\275\326U\032\275l:\005<\t\374\341\273\016x\r=J\312\274<\277\306\255\274\364\245\252\272@S\274=\206W\340\274\036#><\335?\277;\247\312\210\275j\323\243<\375\\_<B\322\016\275\230>X\275\203]&<\357m\374\274\372\356.=\226Yg\273\242GD<\256\006\214\275\031$x:J\312$\275Y\242\203=\314ip;\340\017\307<#\024e\274+:N=a\353\217<O\357\246\273\030#\233\274\3649D=\350_w<\315)f\274\0207\313;\320\247\260:\006\235\236\274\225\314r=yY\013\2758S\3509\2465\020<[Y\200\275\026$T=\'B\345\274\346\221\321;@\337\226<\271\261o\274j4\273<<\200,\275\260c\270\274n\250\361\274\177\2045\273\034\300\006=}\'\210\273\211Rq\275\337h3:{\341\217<\346\241\310<U\251\027=\216-\243\275\321\364\002=\262\255/\275m\2469=\262\t\225\274\026\300\027=H\203\222\273\315\"\210\274\376\016\245\274\247\220>=\242\352\227\274T!\000\276\356\203Z\275:J\272\275]\254\226<h\361w=\3330\000\276x\344\177<\272\243\233=\250\\\317\274\357+\350\274\0166x:J\370\215\274\030\276\203\274\001\365\272\272%R#<\255\311Y<\377#\206\273b<\244;\3069~\2756fJ\274\336\034$\274a\220j=\306\037?<<\355\335\273\033W\221<w\314\344=\247\304\243<\214\335\257\2757kh=\2674\276\275\265\257g\275\311\242[\275A 6\275\340\263\003=\024\2157\275\325-\r\275\317\301\027=\205\340\363<\262J\t=\377\366\301\275\2307\266=\323\3049\275\t\231\307\275:P\r\274\330\030\303\274\216\202`<s\341\216\275P\253\263=.\026\206<O\312\216\272G\207\307\275\311 \033=t\\\203<\227\351,\275\223&\237=\322O$=\227;\005\275\022\320F;gx\332<=#\305\275\276^\026\274\032\357\346<^\325@<\323\311\277\274\303\r\006\276:\202U<\034%\322\275\013\303\216\275\323D\243=\026\0267\275w\363\336=\253l\327\274>\366!\275\034; \274\021[o\275d\304\225<)H\221\275\366\216J\275\231v\303;9z\t=\014t\226\275\301o\345\274e\262d=\334U\333\274 \245\004<0\206\027\275\342\203\206\275\345DG\274\270\2455=\363\336\013\275Z(\"\274\267\257\351:\222;\240\274\306J\232\274\371\342\213\275\014\353\321\273\034\341\373\274\264\301\337;\252p>\275\r\306\357<31\200=\217u\342\274\037\013w<\370\'\317\274\341\322-=\203 \217\275-)\271<M\226X\272yJG=m\370\203\275\263\310\007\275\007\221\030\274L\351\035\275\321\246\314=l\\\r>\301\235B=*\270\002=S\3152\275\017\373\350;\021(\035\275T\331#\274\207\267\t=\343}\271\274\034\365\215<\241\316\222<\205LJ=R\367\301<\355\306\277\274\252\327\223\275\211\020\267;\226\323\224\273s>)\275z\342\210\274#\206\223=\007\234\272\275\354p\274=&u+<\230\031\342<\307\341<=\343\022\277\273[\342\010\275\272\\$\275Z\003S\273\222\025\225=\214\372k\274:\227\213\273uR\233\274\327\216j=]o\206\274\3769\213;4\244\021=0Y\360\274MK@\273\334\236n=_\277;<\362\246\032=KR\317\274\217In\275\236\364\\=$m\211\275\331|]<\315\365~=nZm;\245\017\032=\361[f\275\347\200\006=\206e\031<DV\322\274\354~R\274KI@<d&\035\275)(\257;\376\002!=\234pk=7!\022<U\256\264\274_F\317<\254\"\"\275\355\263\302\275}\026\001=\3509\330==f\217\275\242\202\270\274\377\304\245=\315\371\250\275\002\217\300\275\311\336\241;\006f\007\275\305\027\027=\275\334\325;\343$\001\273\360\330\256\274i\242$\275v{E;\334\265\252\275\014Q\024=k\325\351;\355\365*=\273\227\232\2737\001p\275\n\356l\274|\303x=u\250\';\327A\306\275\256y\013\275\340\177\203\274Y\377O\275\263\345\207\275c\263\351\273#\025\325\274\326Z_<\366\003\340\273\336X\313\274\227<\216\274\325y\233;\004\355\214<\034\322\035\275^\224\224=\000\327I=\"1\322\274+@\223\275\354z\272\274f\226\365:=\256\275\274j\017\203=f\202H<\231\354w=\031\300,=R\354!\275\224\306\267<d2\311\273\316\3204\274\322\246\326<x\230\271\274\305\243\025=\0371\036\274\016E\013\275\311\022\004=f\005\336\274&\303>\274>\300G=\235\224V<\020L\021\274\037dI\275/]\264<]\376,;\225L\201:d\034\273<f\261\"=\352B\204<\334\271\343<\260\317\203\274]\201\251\274\016nl; 7\303=D39=\225\244B=\375\373\340\273\005\335R<\342\020\020\274R3d=9\201\302<8]\306\274\3012i=\217\320]\275\n\202i;\354\242\350=2\177\216\275\340mW=\350\337h\274\t\320\227=x\244\002\274\301\223m=\316>P=\3747\225<\'\233\214\274d\364\212=\315\033m=1\360\265<,U\221< \234\243=\372\367@\275s\304#<\265\211\027\275\353*\364\275\212\271\243\275\327h\304=\351\350\000\275\214z\264\2753\264\252<\025k\323\273\302\275\204\2755\336Q<\332l\330<N]J<\365Ek=\2213\"\275hJ\247<\276.2\275\212O\003=t\263|=H6\252<\251\341L\275\223MJ\275\344\031*<3<\254\275\313\313\276;_\\\332;\327\216\022\275\224T\244\273\236\315\027=\007\230%\275\234W\330<c\271Q=\336\036S\275;Wn;:\032\325<\262=\201\275\212\007\254=h\'\325\274\013\303\'\275\336=\017\275\273\257\213<\235\257\227=\236\037\217\275\354D\020=\023Dx<\361\010\032\275\275Z=;zs\236\274\323\372\315=r\333\346\274\\\273\267=\200\022\320<\254\260\023\275\313\007\306;;\203\250\275\214\260\356=\302\224*<\373\375\363\273\304\234\346\274\316\000\302<I\263+\275-\253\010<\242\256s\274\027\251\316<\372\362\304<\201\241\276<./\253\274:\0048\275 \\\276\274\331\217\207=Yv!=\"9\020=\314\244/\275\025a\247<\220\243z\275\3121\256\274\346Z\257\275E\260\031\274\332\250\251<\231|\301\275\032\216s=\324\264\206=I\323\323\274\271\376\010\274E\177\260<\001\rJ=O!\320\275\355/4<\256\375\023=\227\261_<\255u\236\275\352\331\213\275\303@\311=\334R\017\275a\275\361\274=@\013=\1774\342<\010\013\025\275\ri\237<\206FH=\030\364\203<i\025F<\013\340A\275P\027\037=\242v\017\275\335\020\005=\235\357\241<,\'W\275\313\006\013\275\335e\026\273\010u\350\275\220jA\275{\327F\275L\2333=\257T\r=Bd\025\275\216\314\324\274\n\224g<u\270`\275\000\343\004\275\215\223\263\274\201\277\343<\204nk\274%\3751\275\274\3512\275L\306\325<\375\263\025<\000<\212<\365Mg:\240\255k\274\340\365\352\274vUM=\314*\026=\275i0\275P\252\214\275 \271\334<\3101O\273\233\241)\272\360\230\251\274\021\037j=v\273r\274\354\373\320<D\n\311\274\022\202\211\275e\027+\275\303\322\324\272\\Z\210<uk\023\275Wg&\275%b3\274J\274\013\274\351\344\363\273\250D\327\274\031<\275\274<\037\223\273P\374\377\274\250\226\275<\226\026\210\274\263\340b\275Ei\025\274\214b\030\275\006\034h<f\373\311<\320C\032\275\276\233A=F\357g=\363\250R\275</\355<\344\305\364\274\232B\"=\263\031\262<MBz=\267\177\261\273*\\\376:+\263\024<\227\224\363<\327^\232\274/\371\230\274\364\374\316:n\3318=4\233{\272x\275\"=9\033\"=\306\262\246<DQF\274m\325$\275\300nK=\213H\215\275\206\376\247\274Oes=\3306\246\274u@Y<2\273\343\274\231l\270\275@g\272;\020\337N;\353\311\325\273^8l\274\364\303\215=\232\2737\275\317u\236=\327~W==\322\014\275N\272h\274tW\021<tz\224<n\221\257\273\026\220\207\273\256/\007\276]\344\303;>\222\265\274\345&\313\274q\256\n\274h\322\266<\366\236\007=\243W\272\274h\365h=\226O\312=>\226/\2757\360\321<\033\222\000>\326\261\225=P\002\'\275\262\372\376\272\302\342/\274o\3502\273\037\357<\275\273E<\274\231A\004\275_Lm\275?\031\001\275\354\317Q\275\345F\202<\005\205\036<\232\2037<\221I\212\275\231\301\013\275\261\307\207=H\210\301\274\301\304\256\275-\313\004\274\373YG\275C\006&\275\370u\261=\332\221Y;V\376\036=\"#\n=b\222\200=\313*k=.\350d;C7\354;\243a\\=\355m =\373\024\216\274\33769<\327\304,=\315H\362\273R\261\310=\017\216\177<\266\215\031\274\327\005\301<\235\202\303\275\274\251\270=$\026\n=\022\315k=\252\3622\274A\351x=|]P\274\210\256\234=\370a\262:\300\200\023=\262\010\027\272j\204Q\274\206\330\371;x\024L\275\314\2772=~\302c;I\204\374\273\230\tw\2759\r\314=\237S\275<\001<\'<\200\314\\<\317n\233=\240\246\027\275bw^<W\\\036\274,\346\321\274>\024/\274\251i\317;\240\0043=K-)=\0074Z\274\206\004\020\275\330\356\037\275J\036\300=\252h9\275o\177$<\224\244~\275\317Ui<\205\214\356\274@\343\274=%\230\235;K\256\030\275\342M\323\272p&\216=\300\373\213\275*\270\216\275i\000t<\301|\214=\277\210\025\275^\215==\2469\306\274\215\027\004\275\257(\206<\273!\\=\334&1\275Dz\202\275[\345\333\274\360\320\017:k=@<\020QE\274\343<\373\274r9\177\274\244\321\n\275\250y\033\274\243\203\013\275\341\026\201\275p\266z\273mt7\2757w\022=\014\257\004=\312\277\036=\342\255\276\275\231\021\300\270,\2628=Y\277\003\275^-\033\274\251\335f\274\0064\014\275w\343\220<\334\251\375\2745>.=E\337\212\275\3127\320\274\372\315a=?\222\250=\335\243\010<\345\007<=\017\341\242=\370\003\377<\023\372\235=\317\002n\274\370M2\275\'J\202<\265\356\035\275\207w@\274|\"\253;BA\247\275N\377\"\275e\246\201<b\032a<\302\003\324\274\210\276\322<ft8\275<\000<\275\377\0376\275J\020_=\2741\020\273\200\276\370\273-\211A\274\202\004\332\2741p\220\273\353\246`<\227\362N=\226\034\216=\316\200-<\344\022\331<\237\222\370<\212\251\343<\250T\026<v\0058\274(\201\314\274\235\255\264\274\306\027M\275\226U\325\274\373 \225\275T!$<Q\034f<\363\010n=\307%\r=\t\306\257;P=j=\370C\313\275\t*F=\371m\034\274\010\253\340\274\'\326\n\275\014\360\306\275.\350\211\274`\256t\275\002\026\316\275\321\"\213\274\206\337\302\273d\312\004\273\361Ap\275\352\347\021\275d\\\227\273\264\375\277\274\031\375D=`\022\206<T\365\226<\305RT=aB&=\327R\224=\037+2=\003\364\237<\232H\030=\373\241\036<q\020\231<K+\244<4\376:<\367\262\313=E\236\211<\001n\200;\324\023\024=_*\304<\003\357\003<\010~F=\004\'\227\274\307\\\246<\252X\334\274m\260\304\275S\337\307=\240\232\204:\016\266\256<Q\010\307\274\025\250y=cu\006=Nu\252=\267}\360\274\363\006T\273/\271h=\354]J<\255`\024\274u[l=8h\263\275\237\266\017\275y\020\316<AA&=77\325\274sQ\367;\204\020\252\274\000H\005\274\214\245\266:\200\215\303\275J\033\310\274\232X\336\273G\364K;\343o\270=\233\005\313\273\347\373-=y\0247\275\353\010y\274\247<\267\271V_\261<6%\222\274zu\265\273D@\347<\2461h=4Y\"\273\205\211\033>]\003\354\274\207\004\024\275\301\232\311\274\340\225\377:R\270\277\273R\377\017\275=!\"=-u.=\002r==\355\223w\275{\371\325\274P\236S\275z5j=\203\366\244<R\357\037=l\331\r\275z\2574\275e\020\366\274\366\267\341<\nT-<\004\031\371\275\031z\352\274\302#\242=\023\244Y<UXU=\365o\357<$U\201\275\321\310\t\275CAk\275\312\023d=\256\035\005=\372\377V\275\006~\332\275.b\303\274\033T*=\260\326\212\275^\255\247\2757rZ\275\263\256\277\274+=!\275\225j\000=#\233\002\276\302F\017\275\037\352\014=\230\001\227=\250#\314\272I\277c=\307\025\";\213r\344\2747\303\224\275\250m2\275\016\\\245\275<\"\246\275fd\251\274h\270\017=\237\376\350<\037\360\256=\\s\313\274P\026\252=(\203c\2756s\207\274\213\232u=r\254\010\275\2524\303;r\360\037=\003\3150\274\013t&=\030+\254\273\034\337;=\020\3356<\000\323\227\275\223\"\332=^h\355<$\275\336\274\361h\373<\013\356\306\273OA\216\274RO\022\275c\242\331\274\363\204\216=\016E\217<\360\213\024\2758>D=\203\t\216=\322_]=\300\366\301<\000\r\002=\367\022\"=s\316\026\275Dx\364<\006Y\360\274M\271u\275\\\016\213\274\226?\372\274s\247t\275\315\025\347\274\365\026z\275\000@\246\275\275Vn\2757Q\210=&\211\320\273\220\356\230\275L\345\201\273Z\2324<L9f\275\261\0372\275\321\273\303<\000\004\367<\351a\247=e\366\273<\033\005y\273h\206S\275D\225==\224L&=dn,\275;{\376;\224\204\n=p/\033\275T\220\210=\277c\330\274 `\201=\rPE=\r\330p\272P\221\244\275.\242\352;uX\242<\317v\023=R\003_=\206\301X=\001\362+\275\007\322C\275\004\350\227\275\01691<\301!I=\301\265\241=\371e\033\275q\347\\:\330\001\333\273\265\'\001\274\241\234k\274\3575\302\273\304?\327\274\'c\261;B\247Y;\215^\271<\366Z\325\274\360\371\031\273(\215\253\274\251\274,\275m\312\305\274~Y\003\275[\\4=A\"\321;ox\246\275g\030\021\275.\215\233=0\356\277\275\336\010\";\365M\024\275\234\320\025=\351\005\017=\257]*\2742\316\220\275N\365f<c\030E=\260\023_=\331\210.\275\226\253\353=\371\316\\=\225\370\356\274\261\360\305\2759\257^\273\361m?\274\t\375A=<$\275\275w\347\327<\355=\002=)\374\n\274\246r\266\274\255\250\356\274\376\370\340=\275\245\010<\352\272\332<\342,\007=\325\246\260\275\026\n`;\237\364\322<\264\247\323\275\ra\006;\022\272P<+U\215;W0\212<\322\225\360<\313\036\340<\306\363\235\275\335(\\=\262>\322;\001I\021\275\323r\227<\202\241\t\273\252Z\3479\007\rD\275\275\007\240;*\277\300\274\274\356&\274.\205s\275\260`%=\357mP\274\257^P\275z\353\323\2731&}=~!\254\274\363\354\016<\336,z\273f\316:<\371\026\016=\271\006\264<\007HL\274\307\312\305<\361\2065\275\363\340\245\275&\313\004;\225\326\307<i~\231\273\022\244\035\273l\217A;\031p\322\275\252\024%\274\302>\"\274\000x\375<\2523_\275F\375x\275\344\253\235\2751-\215<\003w\323\274.\210+=\303u\232\274\341h\010\274\367A8=\365\273\031=\037;5;\304r\034=\271\337\236<\313\237\335\27451\206\274\003z8<6\010\000\276\326\336\232\273}~8\275\207\254[=\212\211\335\274\237>\205\275\332I\207<(2}<4mi\275\341K\006\275)\001\201=\222\002\212=p\2059=f\315\335;f\177e\2750\316\217<\373E\203\273\304m\301\273\025\206Y\275\\\346P=\353\313w=\203,6;tU?\275\302\367i\275\354\365u<&\330\312<\310\014f\274\251\373\216<\006w.<\0241\321<\354\271\254<\207\350\007=\372\346\214\274&\\$=\306\352\265\275\271\365\255=\343\214\"=s\260\312\275+\255\277\274\tF7=\247hh\274b+}\273\016\0143\274NDl=!\362\266\273\327Y\306=,m\217=\251\202\311<iZ\314\274\317\214\246<\326\357\274<>\265\314<\327\357\357\274-l\226\274\252_\244<Y,\005\276\236d\233<\227*\266\274\031\211\020\275\267Y\303=V\232\307;i\025\024\275m\034K\272\202\326m<\377\213F<\237\343\021=P\320]\275\016\026G\275X\376\346;}=+<\031TP\274k\320n=\n\241\317\274\320\372\267;8 \306=u^\275;vd\243<\340\344\271\274\'\203\204\274\264\027A:k\327\215=\374U0\275\205g\036\275GP\205\274\017\242O\274U\374_\275\021+\025<\265q\001\275\007\316\000\275\\a\317\272J\325\030=\007u\317<^([\275J6\301\274\277\n\035\275\233y\274\275*D%\274\025\037~\274\256\311a\271\315\033\232\275\342)P=\326\321\334;\325\007/\274\267-\016\275\363\272\227\274\216\231\035\274\2463\016\273\262\351\016\2755Ov\275\332\354\000\2753\253\331=\013\354\233\275\376FF=\212\312R\273\004;\000=\271b\205<\212-/\275\365\252\245\273\2241\002\275\252+\317<\356\247\343<\000\232:\274A\326\320\274d4}\273\251v\345<\235\004\000=;q/\275\261\356R<\2710#=\021\234J\274\233.\235<\270\250.=$Y\003\275\217\371\354;~Ik\273\343C\020\273\217=:\274\'\022\022\275\210\2303\274zy\224\274\222\302\200=\277\230S\275\"Kb;\222G\340<\322&\300\274\0344\331\274\246x\240\275\205\311\334<\"L\345<#\357\320<q\224\245\275d\370\216\275\376!4=\365\243\373:\025G\244\273\3308\224=;\307\371<\361\216+=/\334\306\274\261\032\r\273\230D\265<\230>\203<\225.\312\273}d\342\274f\351\303<\255\371\264\274\356\346\004<\327P\216<Lp3\275\'L\351<\003\001\231\275\3056E\275\255\212\006\274\2717\353<\342\265\031\275\207N\224\275)\313|\273\225\036\222\273\206\261\336\274\3432\310\273\211\330\247=\nLV;\374\333\016:)lN=\025\037\313<?@\270<\177q\330\274\344Jx\275c\'c<$A%=Y\263\177=I\353\242\275\024o9<\030,R\275\243\340\232\274}\363Z\274\014\363\333\274:c6<\022\034\017=\257\2769\275\371\200\017\274\177\220\033=\036w\r\274@\372O<\327.g;\000x\354\275m\231<\275S2\307=\030=\n=\2108A\2745\033\262<\307R\225\274d,8\275\321fn;\330\237<=\367\317.=\273\276\205=\223&k<\247\254\032\275\360\306t=\235\227\237=X3\210\273\206`.9^\264\366\274)\307\n\275\000I\214=\355\263\246\274\031;\261\274`s\203\275\211\rz\275\242\317\244=\247\t;\275Di\017\275u\257\007\2752\037\234<\335\277\326\275\020\211\3059oT\342\274\315\213\\<q\244\363<\002\206\307\274\313\234m;\327X\002=\221Y\243=\265..<\256\371\220=\257J\210;\216\343\302\274\rD.\275\354\037r=\340\030h\274\003\227\021\2744\312+\275\'um\275\317\214\336\273\206\331t\275\244,\n\275\262q\240;\030\314\330\274}\210\266\273\\\204\364\274\246\255\225\272\261i\000<\251\312\340<\333\316U\274\3536M<L\030{<d\212~\275\361\217V\275n\024\201<\341\374\331\273\214\205\307\275\354\367?\275 \335\'\273\3147\262\274\'\334\316\274f\347\222<ZE\004<\032\252\255\275XN\201\274\321\365\221\275\304\2202={\226t\274\253mE\275\203\373\217=\277I\334<u\0038=\312\306\016=\232_\240=\022Kl\271\026\330T<}X\275=\234$\033=\306\300,:\"u\314;?\031\307\274\026V\324<M\221\r\274ag\325\271a\325~<\303\024\212\275\217\035A\275\272\006\"<E\271\334<\2170\255<\322\203\036=!\3432<\3528\200<\313\'o\273\327\276Z\275\335\367\024\274\006\232\014=Ga\235\274N|\203<\235 {=\371\222\021;:`\263\274B\313^\275\010:\224\275\177\215\317<\224\005\341\273\276\212\261\273\336\246l<\030F#\274\004G$\274\314\354\210=m6)\275\254\314\213\274J8\207\275+\233\205<B\326\211\275\246\332r\275\026\016a=#b\021\275?\002\265<\316L\233\273\323\353\347\274\324\264T=\021\360G\275\020:0\274\035\222\275\274^w\201=LP\372\272\215\3328<\235\302[<\362ni=\347\362\\=[\216\210=\325@\"<5\231J\274\230\342-\275\317\210\311<\366O\202\274\206\200\345<G\345f=\250\310\212<\233\"[\274]\315\017=.\226\211=K2\313<U\010\275\274\371\207\366\274\241\024\311<\010\301t\275#RI\275\205\232\302<F\2624<&~`<b\342>=\322\310/=\367F\237\275G\277\205=\"S\013\275^\225\354\271\363Z~\274\331{\351\275\212\362\215\274\023Z\272<\206(p\274\231\206j\275\272\003e=\257m\013\274bs\237\274\301\261~\267\354\3020\27441\030\2756\346T\275\365y\022<@\314n=\313\260\024==zr\275T\024r\274\3025\255<\030\006\277\274\270\324[<}\353\265=b\237u=\257\365\320\273uK\230=\321\2444\275\227\237\000\276fIA\275\311\3146\275\0268\246=ZW\232<\376\370=\273\334\346\030\274_\320\000<\033\206I=\t\346\006\275\275h\031<CA\024\275\210\267\204=\273\207\322\274\226\233\216\274\344\022\372<r\'\332<o\247\020\275\220\230\252\272\257+o\274o\037\334\274\031\333\244\275\007a\017\275dA\245=Bv\031\2748A\027=2m\360=\331\202z<\027\341P\274\177\231C\2748\3735=\265\256-\274\234\263R=\345\300#<rf\335<r\315\205\275\001\315\214=c\235\r;_\255v=ll(=\241\020C<<\255\331<y$\227<O6f=\302\317H\275\375\267\321\274\2272\216\2740ZQ\271\210\313_\275\2543\247=\230\030\032=\036_\256=\211\356\027\274?N\023\275\303<\355<\036\0279=\363\200w<9\226\263=\354h\003<\272\333\260\274\260\363|\273z^%\275P*\217=e>v=\244\360\377;sh\006\274X\214^\274\'r\366<\304i*=-\253\241\275\264\202\233\274\325mC==3]\275Z\346\321;\013\264u\275r\342V\274\340\001!=\334\324\352\274\014\310\t<\024\216S\275\371\207\366\273\207\204\253<b\2074=\227\234\n;\363\007\254\274\261\257\207=\376[\371\274\373\031 =W\243\324\275\364\201*<\277\224\260<RH\366\274/\300\364\274\246B\345<?a\220\275\306\230\036:hO\334\272\215\215\211=\226\277\245\274K\346\000<Ez\350<N\025\342=\323\226u=\221\216\210=i\2534\274\014\333\277;\324\177T<\263\220{=\230\035\323<\302r-\2746\256\243\273\317\"\205=\254\321\277<r\034T\275\003\035\206<\t\346\346<3\220%<\327\211\367<<#\026>V\263\201\274;\022\\=rR\223\274\253\346\263\274N_\231<_C\223=!\325\316=<\231\240<\277bQ<p\304\201\274\037\035\342\274w\2472\275\n\210\302\274\245\023\201=\261\340[<\"\333a\274\023~\367\274\027\226\317<\007u =\025\321\000=\272\266j=8&\216=\3338\255<O\355m\275+\025\021=\020\341-\274;\361\204\275\'\200\233=\005Y\274=\366\314\235\274\030\353\320\274\264w\270<\001\335\254\274\205\203\355\274\206\242\021=_\341h\275\234\310\213\275\246\213\016\275\034\256\206\275C\tW=\255\330@\274`\205\345:7\343\006;\335q\271\273\315\356H=i\305\367\273\253\222\210=\274\344^<\332\363\363\275\3733\264<9\320\203=\231N\227=\325\2172=\343\335\t<\365\227\232\273N\215\267<\334_\205=\276\367\364;-z*=\321\025\257\275\005\275<=\033\325m\275\031(\305\274o\255\322=\324\004\014=\302\242\271\274\003\230\304\273M\362\367:v\305\217\274\305\341\237\274\317\230\275<\006B\340<\227KP=\210\t9\274\201\2275=\267\t^\275\030\246\323<3\225\247<\257\0315\275\010\034\255=G\\^=\232a\245\275\033\360y<\326P\331\274\254\205\234<?\3137=sn}<\264(\202<\223\224\336\274\254\303\016=\006\tV=\200m\021\275\321\202\267\274\340\337\034<\334`\021=\353zU=\326\340^:\024\362\215=\005A\341\273\020\016\215\275\254\373\264\275\204\252\300<0qe=\222\227\t\275;9\212\272\326\263\202<tYG=\216\\\315\274`\365\306;\336P\301<\2709C\275\365\311L=#J\304\274V4\325\274\300\033`\275\332\354\350\274L?\236<2\312w\275\025\371\320\275\246\240\031=\325\220\213\273\3447\214\275a\032\200=3\265\030\275\313{u=\370:\271\275.d,\275\364\336\275\274t\026\270=H\014\001\276\3024\331<\225\236\242\275\t\001~;zT\007<\325fR=\214W\223\273#}\'\275\3049\235\273\210B\214<\234mC<jl\250\274\357\372j<\250\004m<6\206\223\275y\"\261<\304\272\342;%d\361<\263\275\351\274u\333\323\275F\301\000=\340i\317\275\032\3614\274\t\276\007=v\003:= N\241\274!\360j\275\001>\013\275\310\232\313;\314\022y<pcQ\274\360\253\234<\205\266\376\274\006\310C<\277\334\233<\340\353\353\274\345v\257\274\321\351\274\274sc\241\275\213Rl=/fu=>\2002;\022\313M\275G\343\202\275\213\343r=\177T!=\022Ti\275^\220\026\275\327\256\211<\033\356\246\274>\362\024\275\205\n9\274\224a\002\275\367<\002=\346\r\005\275\356\334\351\274\"\275\331<\322\010\217=\275\307b\273\347\013B<\324\225%=\330\225\241\274\2151*=\200F\357\27497\224\275QJP\274p\255:=\002\246\315\274+l\"=mX\013\276\220\376<<\3239\323\274|J/=\3502\322<\346\375|=\021\277\202=\035\3156\274Q\276\213\275\365H\304\274\272T\023;=B.\275\224\317T<\252\207\365\274\316\346\200=\241\367\313\2744\023\274\274\234\026\346;|\374\"\275\302\323\312\274\033R\370<G\205\330\274MT\246=*+\365\274\n\014\177\274\360#[<R\244\007=4\0054\275\263\020\224\2753e\372<\313\312,<\000}\235\274\272\316\203\274\020\030\323\275\220\035\025\275\007\301\345\2742\374\212\2750,\027=+k\207\274\216\024I<\315-.\275\233p\245\275\333(\253<\341U\223<\007}A=\214\215\010<\"\204S=fb\013=j\321\017\275rH\240\274W\237\305\274\002\276/\275\236\035f\274\314\325\224\275\020\203\353\274\223x\006=\264b\236\273\327\230\235\274\202\300\014\276\311\236\t=#\257\247\2745\231L<\253\234t<\216^o\275\333\357\270\274\240\'&\275s\242\200\274\0212Y=YY^\275\216\304<=])=\275\241;\232<\362`\330;\321\001\321;A-q\275\235\300\311\273Ei)=K}\345<9W\005\276P\356\321\275\316\232O;\251:\244=Q\372<\274\205~\230=\375\267G<\025\024&= \260\230\274\302Y\206=\233\030\350=\367\214\263<\037\230\006\275\202\260(<\351\002\245<\034\317i\275\345\336\330\274\317\255\260<7\031\216\275\3671]=>V\022=\256\326\200<\036\236a=\332Z\257\274we\246<?\023Q\274|$\225=\001\217%=W\357c=,Q\244\275&9g\273\024\221\035:%\314O=\2131w<\240\006%\274r\305\234=\260\316\000>\261\351\332<x\236P=\210\265G<\2328\340;\212\237\006=\325\251\010\273\207\020\007=\346\374\r\275\225-\026=\010\n\215\274.\177\204=\347\205\246<p\340/=\243\252\343<\316Q\345\274\320/\206\274\245P\322\274\007\305\262\275\271+\237=\'\336j\274\313]\231=\261(2\275\346\231\201\272`\271\355\274m\003\211=\337\037\034=\271\201\013=\214\257\r<@\372\200=\224\3360=\363\266\304<Si\n=\036\301\227;\267j\005=\377{\000=\267\352d<q/\257<+\345N=\036\024\353\275\350 J<\252\031\212=Yf\215=eS\001\273\t)\311<~\022\276=c\264=<\204gP\275\363\030\337\274b\356\206\275k\311>\275xw\034=K`==L\364\002\2756\237\236\274Y\362\354\274\235\260\223\274\030A\256;B\205t;\302\266\250<=\330\312\275eu!=\013J\236;\273\257F<@o\312\274\221V\220<\304\371R;\254\344|;\316\315\313=\331\340\013\275<b\013\275prY=*\327*=\010W\033=\n!\215\275\232\211\027\274\213\017\006<\214*,=\356\302q\275\334\2500\275\256\226\221=0\240\232\275f\034\306<\273\302\247<\264\240\036<\276\327\331=\275\254D\273\030\372q=\347\235\354<\270\316\261\274PE\373<\225\373\203<\316\2062\275#\306\t\274\352\230\312=\335\2119\275\262b\002=\306\261E=\362\350\302<=\230\370<\271\301\022<\027L\276\275\035p\252\274K\343\372<B\210N\273/\365<=\372\tr<\340cC=\353\242\240=\2136v=#\331}\274j\256\274\274} \210< \3150\274G\036\330<\020\027\215<1\257\332\274:$\373\274\260\300\034\2742\324\250\273_\343g\274\022\324$\275T\024Y=\333\025`<\205k =g1\363;lY-=\374X\341\274\276\2012=\250\260i=V-\'\2748\271\256;\371\375\231<E\335\300;\317\215c=\'\365V=\251?\241\274pf\374<\344\027\210\273\264\225\244<\353\305\212\275\217\274\333=\330N\305=\203s\037=\227\031D=/\200\213\275\277}N\275\240\210%;\247\313f\274\030\240\235\274\202.\353\274ed\355\272\242\375\212=\017\3612\275\026\030\220\274\303\032\354\275\377I\327<\034\234\246\274\230}\233\275\350y*=\031\324\277<_Y0=L\373\225\273H\034m\275\023\275N\275u\201\032=\335\004\035=\271\373\237<\\\273t<\221\374\374\274(\342&=\375b\224<\223d\276<\270\215\277\274\340\221@;\321\275B=\014\263\337:\233m\311;\345R,\273CM\255\274\301\177K:\265\370\245\275}\031L\275k5\005<\3121\337\275l\250\300= eS=85\027\275=0\204=f\355\245=z\212\032=2\226%\275T\302\033=\032\354\n\273ER\241\274v\033g;\240\301f\274\"L$\275g\245\035\275t\335\234\275r\237 <@\357\310\275\353d$<Y\250\307<\227\311\366\274\330\316\223\274>g \275>\246\t\275UtL\275I\250h=\2672\023=\367\202\365<&\213Q\273Z\322\022\273\225~]\275\333\326\210<\217\204\225\275\206!E;\305l\'\275\231qv=\277\324W==\215A\274{\013\204=(&o\274\251\333p\275\230F\010\275\314sA\275\022\224V\274\370Q\314=\276\340\221\274\322q\025\275\221\344\306\274\252;k=\235 $<\362D\270\274I\210\273\2743\300L\275/\233\321=\002H3;\255[\"=\320\242\230<\023b\230\274\235@p=1\363\t\273\353]\274\273\314\312\363\274\272\327\221<8\264\267<eo\327\273\375\346\240<\224\270\t\275\2147\202\275\276\020[;\325\243\252<\210k\265\273\242\1772\275\333H\364<\365;\'=\\Le\275\"\001\303\274<+\277\274E-\260<\255\365|\275\273+N<\002:\355:\270\344\016\275\3171\234;\305U\223\273\254\301\027<\340\252\031\275\262|!\274\020j\001<\375d\033<\373Y8=%Ho;\010q\004\275Q\371\265\274\265\364\214=\224\257x\274:\224h\275\302R\300<\322(C\274\317\347\226\275\\\233\177<\227F\002\275=\261c=\014\203 ;\224\215\n\273%N\017=\270\312a\275j\240\026<\261X\274;\275\253N\275Lu\207<\003HZ=\034\355 =\312\345\264\274\304\002\006=G\022+=\257\007H<M\347\317<\"\222M=\332z&\274\204z\026<\362\\\215\274\204\251P;z\253\215\274\370yd\275b\247\226<\330CG\275\277c4\275\343@\220\275\307\354\245<\014h\355\274\007`\275\275\251?\207\272=\3270=\334\345==\372\225E=\356v\"=bI\335<\257\302\252;\005*\207\275\3057\313=\007\262\263=b\210\025=\273n\'<PP7=\320\215i=\377\244\234<\305\035\3159Jj\304<8\037p<\214\242\022\274\023\016\235<\270\216\017\273\363\374\321<!i#\274\260\'\243<\362\302\270\274h+\227\275\310\221\200\275\316\311\331\275\217\t\240;8\304\311\273v\202c=\275\330W\274\372\266e\275\244\200\375\274*=\272<\034\325^=o\203\360\274\004+\023\275\265{\032\274yO\234=D|>\275\177\002\244\275\014\322\302;F\0101<\351\354\352\274\257\302\367;r\350\224=^\273O=\360{c\273\303D\342<\030\n\037:\210P\021=!\372\214=\302*\355\274\365\343\356=/\315\252\274\276\0241\274k\305\307<_\026\203\274\317\306\r\275\327\227j\275d0\257=\231#U\274\254\300\325;\227\237\037<]\263\215=\017\t\225<\310\340)<\014\323\374<7\210\330<\004@\317<Nn\202\274\333\330\031\275\263\300\337\2741\010\224<\365\000\022\275\220\375\226\275\334rE\273\026b1;\235\275O<\355\276\016=\210\261*=\274\332S=p\014\204:\217&\236\275iR\220<\235X&=\232R\321\274\256\353\260\274fD\250\274\205\024\214\275\203\366\217\275\225\320\377\274s\211\314\274\273-\337\273\312\370\231<\254\245\204;Z\321\332<\314\177r\275\361-)=\272\372W\2752[t=\315b\264<\203\037\025\275\375\236\313\274\'\341\265\274B\336C<\375u=\274=\241\227=\033&\r=\002\245\024<cLZ=\255\371\020\275ph\330\275\230\321\231\275\231\301\004=\23063<\274\220E=CW\254\275G\325\343<\031w\364<k\324==\322$a\275\225\277\274\274\235\225\256;\265\375\004<#\236N=\252\026\026=\314\316\226<\366\013\213\275&\210(=\346&Y\275\256\324\227\274\" \335\274\212\354\215\272\201\347\377<\223<\265\274\354F\014=\260\210\241;,DZ<\246 \007\275\1770/<\2758\326\275\005\243M\275L5N;\357\215Q=\364W\203<<\343\257<\013\3447\275^.}<\346\010u\274#o\331;\341\202\010=a\231\004=\300\371\017=d\007J=\313\336W=\342y\267=\3430\025\274D\207\013;\322\247\202=\364h\231=\360\260\360\274\215\216\t<\317\225\222\275>\246\032\275\027\216\240=\224\311C;\001\243.\274G\3311\275\322m\206\274\373z <\245\251\365\275\007<\307\274U\325\345<\267\216\t\274.\3568\275[1V\275\177\205\t=\223E\264=\325\324\301<,\200\227\275_p\261\274\316\027\007=-\252.\275\230X\300\275z3\261\274\016\013o<\223\206\302<\260,\216<I\300\327<\033\242 \274;Ql<9\010\207<\320\017~\275\010\014\334\275\\U0\273\313^B\275\270\334\323<S\246\002=u|\242<\253\307\275<\010\360\005\275\226K\010=O\3522\275\026\361J\275\206%\255= \032\223=\347Q\225\272\344<\251\273\376\235\t;\2749%\274\342\031\226\275P\272\"\274ML\214<\363\217\003\275J\262\204\274\317\260\363\274\331\037A=\275\306\222=\374\331\246<\2720\016=2\253?= \363\341\274\361\265\261=\272\235w<\204\250\301<\007\333\020=~D\032\275\2641o=Du\205\272K\271\253\273\253\037\030=Yd\201<7\221\376\274\343\313t\272\217\021\247\274\016\305\302\274s\t>\274\211\217|\275\240I;=\333\366\210=\215\022\232<\353V\216<*\364L=\246\274F\275\n\377\212\2740@\264<uuN<\205\375\375\274p\323\257<9\232\335;\247$8\275\247\352N\275\253\006\237<S\037N\275\346\340\234\274<\177h\275O\244>\275U\"V=\373\265\307<z^\335\274\000\252-<P\340\310\274\t\377\254\273\323\004\014:\'\000\377<J\022\321\274WC\204=a\315\354\274U*\376\274\252d!\275\341\363\342\274+\204w=\330\3615=\251\230\t=\2026\252=\306\204\231\274\2074\355\274\232\002\270<4\360\272\274\rKU=\271\302\343\274\271\207\347:\245\351E=J\254F\274\267\361\256=\237a\203\275`\020Z<C\334\305<\353\316\205<xz\230\274\370@\004\275Zc\223=\203\271P\275\226A\275\273.\204\026=\235\271\\==V\223\275\334V\010=\270\310\300=<?\262\275\006\027\216\274\232\342\025\275c\226Z;\211%/\275c\224v\274\217--\275\347\3377=\320\262\207=\243j\251\275\330\355\276<s7!<<\271\033=\221@\313\27556\'=l\354\324\275%\010\274\275)\271\201=r\2267=\335c\373\274\210\332\327=\263\310\t=\021\370y=P\344i:\333f\344\274K\362\262:\375S\t=\263d\013=\010$`=\352\324\274<?\210\000<RL\364=\250\354\215\272\007\251\240=\346Y\246:\335U\020\274Bc\312;\2410:<CL\000>\323\257\030\274\221\020\301\274\211\000\266\274\363\251-=\365\372/=\3318@<eJ\242=\367\"\220\274\344\3428=\005\210\344;\230\340\360<\312\371)<e\363\212\275@\340I\274F\347q=\376\025\323\274\351\344\021\275r)\202=](\202\275\250\310\347\274Zi\223<\005o.\275\016&\222\274\313Nh<hW\224\275L\317\235\273|\275\303\274\300\304\245=\332\000\271\274\2532\030=\232&0=\330\246,\274\304\257\245=\320\314=\275\257\231\224\274\356\204\314;-OZ;G\247\372<\327\002\321<\257\254(\275[\334\323\275\343\203\002=|wg\274\276J\204\273\230S/;)\260\014\275\307\036\265\275\001\331\262<qs\202\274\333,)\275\207A\202\275\244\321~:#/Z\275\216\374[\275%n<\2737\2714=\256\201m=\236\226\002\273\362\034\223\274v)\263<\30562<>6\343<\306)\350<\372\346\276<\352]\332={\241\271\274\035\004Q\275\325\274\317<@\212\257;\355\323\253\2732\275\005\275=\376 \274d\0000=\3034o\275.]\350<ej\033\275\221\334#=Q\324`\275\360\001\315\274\344\356\211\273X\377\000=mc,=\243\035\263\273\355^\351<Rx\377<\001\0036<\343C7=\347\326\251=xfz<+\205\240\273^\273t\274\271\247o=\316\201\257\274\343\315\207\2754\016/=\3634m\275H\324\255<k\222\\<aad=\331\267\216=3\306(\275Zh\221=\320\006\004=t\341\366\274I\232\324\275]{\324\274<\2767\274\254\026\307\272\250J\n;\023\016\265;(\201\324\274_\217\005\273M\211\231\275\223\317|<bS\201\275\217\302\235\275\330\340s=<\355\004\274\315 \201=\0374\207=\230\226\025\275\274\241\3059\305uK\274\377\346Y=\273,\215;c\033\014\275>\021\210=\005\361\227<\344\004\356<\250\246\374<\363*\032=\2257i\275d)\300\274\366\004\216<7\001\231\274L\322\225\274A\231u=\312_\362;\314\301\003\275O\277\260=K}}=\0202\322:\201\246\313<2^M=\235K\213</\350\321=\010\004\327<Q\376X\274\373!{\274\207\2322\274\361m\227\274\031\254:=7\345\367\2740\002V\275`\260\326<\200KI\274\243[\330\275\333T\242\275{&\247\274\230\205\005=Bx\374<\366\260\335<n\261|\274\257\347\215=y\206\345=\245\315\236<n\351\262<\002\266\203< \317\335;\251&\354\274\026\304\233;m\343\205\274W\247\270\273\350\371\007=\221\335 =qH\213=\223m|\275?\034\231<\375I/\273LZ&=|X\327\274\210\247\325\274\"r)=\002#\036=n]s<s8\312\274\260\007\'=\317?\3567\235]k<\252\265^<k\227\345<P\372\206=\257\371e\273\215\377\227=k\353\220\273Q\340\345;\327\016\345<ZL\"<-\321\251< \261!\275\371_\233\274jY\035\275?\324==\321VE=C\366d;\354LZ<\276\277+\275_\276q=\317L-\274R|\\\274\322\262\330<\017d\254\275\277a\302=%z\250<\017\230\351\274\245\201\204=\203bB\274\326\365f=\353\323\313;\016\215\241=\360\362\335\274\356\372\246\274\277\361\270\273\346-\t=IO\344;Z\322\224<\031\032\262<\373\"\216\275\027Q\326=`?\005=\333K)\275@\263\025\275\331\311}=\330\271\201\274a\337~<~\261;<YQ]\275\342TV<>\217\210\275\222/3<\007\264\003\273\357\326\301=\252U\231\274 \374\215=;\233\253=\274\021j=\343Q\374\274mE\274\274FF\360=\336\314\006<\3028S<e\374\214\275,[\'\274\032\314==.\274\305\272\350\367\275<pO\031=\251\227\264<{vV;u\210\222=\247\257\006\272\251U<=\002\2317\275oy\025\275\212\023\"<\254\237;\275\365\301\260\275|\350\211\2757\321I:\302u\341\273\033l\'\275\206\252\247\275\227-\365\274\203<\220=[5\022\274A\002]<\301Jp\275\005\235\226<\342+|\274u]\364\274\343\000H;\3464\257=\230\0063=\327\274\367\274Z\242\312<v\n\241\273\360\321\221\275\205\315\014=_\347\312\274\314H\372\274\375\274\211\274\2117.<\250\023\377\274.;\017=5\245!\275d\222n\275,\3524<)(\273<\000\344\226<\277\351\220=3\277\003<\326\010:=e\273\363<1l,=7\037\r=t\014[;\317!\300\275\235\226B\275\310\205L=\277\345\217:\323\031\\\275\354\204\232=\324&G:\266\000T\275\264\205\274<u,u=\326\333]\275\205\201q\275\310\351X\2751\001\214=\251\231\241\274\265p\311:\202f\375\275:v\000\275)\250\357\274w#\026\275\374\347\306=\301\305\336<+\363\207\275\241\217e=\006{(<\034\211M\275y\000\310\274\262\205\323\273\235\271\016\274\236\263\252=\345Y\215=A\252\244<\353\345\005=Ab+=/\327\310<\2369\n>&\343H=8\372\213=\235+\361\2732\205\324\275\250\326\024=\241\274_=\307\272u<\206\306\361<\251\230\t\275IiY=6\237\273=\220\200W\275\006!\002=\343\371\373\275\326l\001\273I\023\261<O\203@=\342\205\326\273K{\3738\316\320*<\253\322<\274\333\366\205\274\305n\034=\337\367\301\275\211\243\314\275\231\315\277\275\223\334\377\273\270e\342\272\365\370\030\274\3543\237\274s\031\255\275\356\350\"\275oE\206\274Vd\345\274\205\221\313\274\037^$\275<\273\243\273\207xb==\312\016\275\222y\226\274\336%\\=\325\342*92\317T\275X\313&\2740\304\177\274s\"\221;\361\241{<\231\244\335<\316rG\272K\3114=\371+5\275\250\211\361<\377\202\022\275&mI<\225;\245\274\377%\202\275\224\312\204\275W\341e\275\321/o\275|:F=A\352j\274\357\020\264\273\255\274\224=\214{\360\274\327\240\002=\240\374\027=\253\226\315=\211\263\232=\354\360\360;\030\005\227=\014\263\327:\325a\254\275!\324Q=;iV\275\265#\211<\321\006H<\246\307\305\2745,\321<0 \350\274\"\332\036\275\356\341V\275D\2503;O\317;=.][=Hy\032<BJ\247=\200\007\213\274\202?`\275\022\202\222=\23189=\220>\210\275a\017 =b*\310<;+\360<\016>\022;T\322z\275\2245(\275\235vO\275\234\257\337\2748l\226\273L\327H\271\200\327l=\2645L=\214\227b=\032\374\337<o\014$\275\311\376$\275\nqF=\205\367\203<\200\203P\275\262\351s=\226\305\007\274\3776w<\335\342\233\273\355\232%=i\226\\\275\347\370\020={\377\032\274\221\343\247\273\245\001/\274\306\376\230=$\252\274\274g\326\250=\032?B\274\346[\026\273N\212O=\201\374\221;\000\276\222\275\343\tp=\310-\217\274\221\001\207<J\266P\275p\264\320\274\206\325\014=\271\270Z<\ti\021\274\206\341\243\274OZ\037=c6\016=\343\374\326<$<\232\275\336\277\t\275\205\007+;Kdz=\\a\027\273\251\206\220\272\234\034\270=\'\246-\275]Q\024\275\255\356<< \013\272\274Q\240\312\273\372\336\202=T~\202<^\202M\275\27440<\327W\371<t\225#\274\370\266\230\275,\034w\275V\300=\274\177\346\361\274x\211}=$B\363<I\023\024=\212\370\353<\271\2215\275\233;o=\017OB\275g\321\014\274\303i\260\274\263[\'\275\201ag=Q\227\217=#\236\344\274\312\020\233<\010\026\002\274R\311\177=\035\254\373\274\237\036\245;J\267o\275\270\022Y\275\010q\256=\366\024\240\274\203\"\350<s\267\343<\377\264\300\274\350{\255<\267O\210=\340\330\000\274\231\375\305;:[\252\275\202b\265\274\3248\227\2745\252n=>\r+=\211\312\322;\2679\036\275K\247P\275u\220\225\274\372+\n\274-z8\274\377\203\004\275\351\314F\274\223E\005\274]S\037<\'\002l\275\201\340\246<wN\207\274\254\314\260\274\366\276\353<\032g\021\274\214\304\r>\327)\\\272\347\216\250=\356\214o=\00307\274\001\244#<\n*\201<\333\241\220\275t\277\374<\370\027\031\274ai,\275A\r\207<p\257\006\275\022P\316\274\341\002\200;W\336e\275`\215;\275\276\005d\275\210.\230<4I\t\275\264\214\016=\312\327F\273l\210\320\274\346\347\212=M\301\014\274B-\204\274\267\321\233\273\037\362e=\205e\273\274\264\177\265\272\253\241\214=>O[=`\333-\275e\266\244\275\177\034~\275\204\315a\274\375\321\010\273\234\031c\274\203\233\035;r\320\033<\363$\251<\361\357\314\274i\323x<\006\0379<^W0=\027\217#==`<=\2068\247<K\340t\275\376\201\231=\264;\201=\363\354\014<\"\2070\272\305\202s;Kh\342<\317\t\250=\322\031$\274\243\'/=p\304\037=4\373\367;\212\262\314;\211\340\001=]\017\n\275hj\235\275\220o\244\275!\007|\275C\314*\275PuV=1q\205<z|.=\'\020\254=n:\001=\0240\335\273\t\027\305<\357\311\'\273\351\2529\275\262\340\026=.\330U\274\352M\356\274\254\207\r=\264k\377;R\372\r=\251[\275\274\221\224\220=e\226X\274[W\206\271m\303\007=\315\307\014\272\306\227O\275\3012\207=\t0\177;7\244?<<\016\233\274@f\270=\204\3354\275,\254\355<\214\330\223\274Wh\351\273x\265\016>0U\235=1y\335\275\236\257\365;\031\013,=c\352\307\273\214\363\313\275\027\212\364<|.\'\2746\252\206\274;\212\031\274g|\201\274[\222\201<\216o\022=\331\312\234<\211{\267\274\363\310\310\274k\333g\275U\247\265\274w\023+;M\335\'=\2011\245=.{Q\274\2625o\273=\t\003\274<\266g=\274\261%=\265\272`\275\367<\270\2754jx\275Pjp\275d\210I\274^\177\342;\305\'I\275\312\"\310;\237\353\310\274\252+\216<\345\262\022=\331\217P<\000\312o\275\344\030\035=\353\030\025\274a\233\256=\360\233\276=\024\356\332<\225\242\030=\245\333\344<\213\021\245=\003\325\244\274$r\006=\035\240\207\273\006\035\215\275\231\253\025\275\370NP\275m\332\356\274\032\371\020\275e\027N<\344\023\277\274\007\2540=%\234\335\274~4\024=\360\261\327\274T\233C\274~\020\216\273\017\r\222<\300\350\310\274\265\006l\275\013G\212\2759\322\037\275G\376v\275\n\343|\273\021w\016\275\007Y\337<.~\037\275E;\373\272q;Y\275-\020x=K\3311\275-\341\366<WD\t\275\\\305\311\273\244\035D=\301\256\354\274\214R/\275}\3521\275\362\242U\275\343B\222<\354\223\211\274\020\272\263\274k\037e=\3577]<\345\256\203\275\344\245C=\247\377\337\274\350R\022\273M\204\331<\206\357\261:\203[\033\274!\237\235\273\016qy\273\336\020^\275\017\225\337\273\204\232v\274E\320#;\360\310\363=\265\210\002=\374\345\n\275\357A\212<\377\225<\275\340w\037\275\000\232S=!Je<\270Z\330<=\0064=\325\031@={\226\200:n35<\323\300\317\275\262S\036=\216\014\202=r\004\335\2754\326\230\2749\337Q\275\344L<=\311\037\310\273d\304\244=\005\001\3329\006\240m\274#n\006=(\362\230<\265\301\\=\314\345\275\274Y\023\310<\272\n\357<\210\2553\275\353\375\022<Js\217=\204\3302\275\350\311\r\274\325\200I\275\331\020Y;a\036i\274\260\265#\274\337a\367;\177\3431\273\255A\037\2754dh\274\226wQ\275\341\341\221\273bM\240<1\222\341<\257\264\244<r\272S=\315\2268\274\313\021\362\274\002v\242<\321\327O\275w\230\301\270^tc\275L\277w\275\273R\300\275\337W)<\306#\033=\202!/=\265zH=\214\325\031\275\365b\356<\302q\037=\276\245\374\272\225\351j\275\267\377C;C\254Y=}\237\3308P\345\234<m\344\203\275W?\205\275\310j=\275a\230\r\274\024H\341<\204S\177\274\274%y<}\221,=\320\304U=nA\243<G\250\007\274{\307b\274,\215n=\024b\205<4T\216\275\203\317\010=\016-\252<`U*\275Std\275p@\237=\260\357\332;\350\364\214=\211e\374\274\200P\241\275\226\"_\2758o\272<3!#\275\300\303\037=\356Q\313\273\034/\217=\310\314\005<0\362\n=U\372m\273\006\341z\275\225pA=*\243\004\275\332#\365\274\352\2379\275\220%\204\274\250\334\347\2747\345\313\275\242K\034=T\204\205\274y\000\024\275=,:\274\333\356l\274\302\214\262=\233\242<=\365W?\274\240\245\005\274\304\306\t=L\325q\274L=U=W\2568\275\221k\031\274\301\274\214=\301L\036<\360\2740<*\345\310\274\355{\375<\360\341\355\271\315\360\261=\306bb=Fo\217\275\266\370\224=0 \263<\223\2040=\377\212\207\272\002e\255;\312\231E=\324\356]\274\\^\026\274BlB=\236V\003=\324>!\275G`.\274)\272\265<\357v\206;\273\314(;\337\265\022\275\244\034\222;\265LQ<3\335\301<,\001\374\273R\232\237\273\2345y=*\267\256\274\323\300\323\275\251u\267=\244\333\005>y\025\n>\264\210\305\275im\010=\003R\244<C\360w\275\242\244\201<\345\207\037\274\r\217`\274\354K\313\274_P\353\273\225\203|\275\341\374\001\274C\236\006\274\024\375I<Rua\274\242\021\212=\030g\234\275\307\343R\274\303OW=\010q\'\275\246%>=\314\262I\275\201\241-\275Hg8;P\276\203=\373I\021\275\326\222\027=K\013\222\274\253U\212\274\321i \274!t\200<\215E\204\274\2628\211=\035k\200\274Q\177+<\372,\017\275\'\031\212\275\344BV=\362\345V=\276\342\364\274\225\242\272\274v\204\354\274\321\346^=vM<\274\356\323\255<\241\226\203\275\330\233\305=B\223\302\273\240\237x<\367\354\001\275\351C9\275\010af:%P\005\275\270\200\340;.J\247:l\256\014=G\316\225\275\343c\031\274\330\032\232\275{%W\275\204\374\352<\262\177\261\274\264\336\221\275\024\263\220\275\320\320\367<\345\207H=lB\010=\n\025J\275\363\020\270<\255\200\203=\307n,=L\367h\275\266G\243<\305\032\230\272\364\030\213=\330\275\253<\240\004\351<\247\322\000< \360\350\2744\310\305\274L\264\347<\317\274\216<\216\242?\275\265\004\257<\355f\352\274\032\304w;[p.=\020_\322\275\322\364\216=\356\212Z=\372\251H;\3279\305\274\267\307\034<\350\007b\275?\233\243;\3159\2669\255\276\326\274\204\'\260\275\247&\272\2756\016p<\353\023\214\274\210\036\377=!\\\003\275\352\tr;$\3753=\263O\006=\376E&;\217\023\025;\2721\223<X;\225<$Lm<\357\240\352;I\220\006=\312\214\211\274o,\316<_\'\307:\316\276\034\274\333\367\277\273\224k2;E\373\233<\r\017$=\273\203\204\274\016\303A\275\377qC\275QIe<\3022t=*\361^;\356\033G;\023\375\002\274X\337\301<\0052t\274\255\305\366;\323\276\215<\243\017\025\275\331\277\013\275\372\'\223\274T<\233=\314\235F:\023*\"\275\254\371\236;f\320\270\275k~\277=J4u\274,\255\2109\323-.=\272d*\275|\372\272\275\205c\370\275\352\206.=\250\252\\\275\373S\253<_\267\241\274\351r\200\274[Y\217<Y\247+=\024\273\000\275\200\240\310\274q\034\\\273.7\220=F\r\363\2742\227\206=t]!=^\014K<Y\223 =\317+\204<U\335j=\373[\232\275_\2522=\204\300\355=\344\314R\275\022\341\037<Pii\273=\347\210=\273\274\213\275\3006z=x\035\006\275\267\023\017;a\320\r=\233\030<\275^\2518\275\305\355\305;\367\013\001<\236\340\315\274\0040\207\275\004*&\275\017\264\363<r\313\357\275\005\322\222<JV\243\274\272\025\022=\227\316\207\275\"\236\252\275\224\305\211\274\274\222\266<\357\350\3039\316P\352\274\352:\244<@5\027\275q\366\003\276\344\006\006\275\226\r\007<J\247r\275\222m\260\274\257\247Q=\271D\037\274k\0259\275\177\300\364\273|\374\"\274\270\235\330<\035\321\377;u\335\214\274\035\263\352<\014\245\256=\214\320\017<\330\350\311\274\260\007\021=\037\213\323\2732\253\215=\374\021\200\275\226\225\274<#\376n\274mw\037\274L\324}=\035\247\373<\300\235 \274?\261\032=\204\356\347\274\t\230%=,c\231<*4\252=\257%\202=\353\273\026=\212\032\275<\305\030 \275$\337\223=b+c<\327T\001=%\320i\275\367\205L=\232wl=\371nr\2748\226\000\2732\345\376\273\311\2215=\253\344z\275\372L\206\273\263\305B=\020#\'=Ax\003\275\342\263\223\274\201Hj=\273%\251\275_\340\345\273\353\177 \273\243zK=\214\323\262<R2:\273\261Y.\275\002\002\023=RH\251\275h\203\306\274]\261\005=\325\357\0209ie|;C\0314=\207WY\275\017mu=\230\231\t\275\366\310\206\274\247w\237\275\320\000\330<\376\370\356<]r&\275(\004\350=\234\346\177;MHA=\311>\224\274\204=Z\273\347\361J\275\021\260c=\356\343\265=\216\216\330<\275\316\255=\375y\220\275\356\210=\275W\354)\275z\312\026=\310a\374<C\034a\274\232SE\275\007\325\037=\265~j=\357\274\022=\350\232\252<\356\321\263;B\034\327;~\326\266=\243\032\336<l\267\227=2\345\320<jP\034\275\316\000l;\222Z\342<\270\323\336<\242\311\350:\313\264\250<L\212\"=T\275\266\274~\367:\274\000\307\337\275\030eM:y)\277\274J\217\017=\310l\006=1I\320\274L\345\345\274\250(\346<el\372;s\032j<\322\\Q\275\322\245\211\274\230\014\343\275\300!\263\273\266\306\202\275P\273\300\273\216\207\206\267\210\037/=VQ\251=\037\220\273<\035a|\275\324Y\326\274\346\300\374\274m\374\366<\207\343A=\221\304]<\323\205\325\274\312\377[\274\255:\250\274}\224\020\275\'H\247<4\232\332\273\304\220\321<\004\247\007=b3\\\275\\\r\'\275Sy\022=T]\356\2740\005\224\275\243\322\225\274\232\216\212<\\\007\221\275\206pM=\337\367\253<\275\022\270=\276\245\000\275\366\nO<$\2559;\026=\027=\346\320\317\274\212\264\240\275\245\347O\275\361\250\034\274\303\367\222\275\340\260~<\261\205\177\275\236)\037<\022\225\253\272\340\324|<\241\271\365:\207\231\220=\005\254\201=\016\362\n\274\302\276\276\2747\005\266\274\275\365j=\234G\n=\361\224\007=c\250t\274\322\032\236\273\006\023\"\274\376KM=\243\2225\275\334\265\234\273\024\234\320\274\374\371\274<wa\033=\370>\206;\037\337\t<\326\001@\275\020\314.=\375\336Y\273R;\027\275\231\253\351=V\340\311\275\342q\305\2745\024\027\275:V\363;\345a\312=j\214k=\306\r!\275D\254\225\274\225.\031\276u\222\353\275\221\352~=I\273\246<tU\372\274\326vh<&\032\007=\2111@\275DH\213<\346t1\273D\241\021<I\002\354<\272K\207;\313\230\2329\t\303\256<\035\374{\275\371\232\246<_\360\266\274\246\303\201\273\0216<\274|\373D\275\267\347\324\274\013BL<\032\317\003=T\202\256=;-W=\037_1\275*\307\340\274\373\361==#\350\221<^\336Q\275\010 \213\272\000\'\363\274\246\300\314<5W\237=\232\350d=\313%}\275\205\206L<:?A\275\252\334.\274\024z\'\273\317%\250\274\026`u=\230B\t\273\254br\274\301pM\275\005{\343\275C0\004\275\010\371\230\274\263\355\013\274e\221B\272w\257\317<I\352\001<\2454\026\275\244\033\275\274f\223_\274\332\336\201=\351\362<\275\206\037k\274\306b\256\274\305\354\025\275P\365\247=\226\264j;\344\253\026\275^d\224<\344\253\227<}8c\275\361i\242\274m\3362=\332I\364=rY\210=+0\302=\205\323\314\274\273Q\341\274\347\353\227<\211\001\\\275L\354y=\356\001c\275K,\001=i\252\212<\375\216\023=c\244Y\275\366=\013=\312\010\023\275\375\230i=\007\350y<\'\204D\271zc\336<\252\3469\275\357\254\\\275\223\247\245\275\211\201\347<g\005M\273\357\333\225=\331\226u=\342\254D\275\013\345\352\274v\355)\275\1776\254\274\220=\017\274\305c\301<7\320\221=\375h\304<\367lJ=)\304(=\336\225\227=\025\216\304<s@\357<\236\242\325\274\362\371\211\272\363\023\010<C\201X\274\255.\235=\257\035U\275\265\272\025\275d\235\310<A\356\212=Z\334\366\275\212hX=\3312S\274D\252\365\273\3726\226\275\265\231\232:./=<p:\227<\'\025\231<\222$\375:\027\301M<Q.\355;\364Z\230=\317L)\274\270T\214\275-\261\302=\277\243\341<[L\257=\223/\027=x\032\177\275;\304\341\273Z\177\014\275\335\221\262\275\306\215\235\275\016^\014\275/\273\212=\022\223_=>\330\346:Bwi<[Nj<\240\372\002=\324\216R=\347\356\312:t\227\223=0D\231<\241\236%=\024x#=v\207\345\272.\306\221\274\271V\301<\0043\270\274\270\357&<\'[\025<\345%\234\275\2046\375\274iCu<\252\374\020\275\370\275_\274\357\321\266\274\254\212\274\274\217\302\224\275e=\234\273\305\377\027=\227o=\2748\010\206\274%%R\275\203b*\2754\007\002\274\326\270\026\275(\000\017=\200a\026\274M\226\237=\307\024+\275[\032L\275);\315\2747\272\202\274\030\352\237=8^9=\2731\256=\375\024\020\274\206\256\201\274H\341\205<\311+\326\274\336\374\377<\331\246\244\272m$\217=\333\003\345<\351>\225\274emJ\275\362\306_\275\267p5\275\367\017\';\344\335\036<U\021\227=pc$=t\037\212\275\274L\270;\000\2714=\n\345J=\016\255q=!\212\314=\216D\216\274:>\235<\303V:=\231U7\275\313\211d\274\323_\332<_6(=$\354\033=\327\2266\275I\206\214\273\004\200a=\027v\242\275\217\026\205=^\225c\275\240\325[\275\2366L\275J\316\201\275\317\003\'\275\234\250\352\274\036G\025<mp+\273\334\232&\275\277&8\275\322\220d\274u\375\311<\301\020\262\273\330\245\250<\360\246O<!\204\361\274i\350\274\274\006\272\243;U\032h=\267]%=\320\343 =F\373o\274\351\273T=\030\221\245=\241Q\222\275\360<\276\275\345%\200\274\214\342\232\275\350\353R\274g\372}<\036u\001\2747\343\001>\"\251\025=\204Y\226\275\212u\310\274\366\225G\275|\262\331<\032g\020<\236\000R\275v\022.=\231\214\260<\371\315\256<Dr\320;\274,\266<\355Mw\275\351\223\204==h\343\274\223b\263=\036/\210<\t\300\220\274,\010c;#1\352\273\370\334\024\2754p3=)\021\227<5=V=p\024V<\216\205\246\275\255\332\263\274\231\363=\2739\276<\275\253\031\"\275\026\223\372:n\315\224\274}\334\032\275f[U\274Vo\357\274\310y\255;j\375q\275\206zg\275\031\235-<BN\001=\374k$\274\373\"9\274\301\3366=Q\342\213\275\312\270\331\274mQA<\337\361Z\274{JG\274\230\335\273<\275R1=\300\335\227;\320_V\275\235e\240\273\274!:=\023\342\263;\371\354\332\274 \243p;\242\355\033\275\303\200Q<\327Ay<\357\246D\275m(\264\272L\240\317\274\2236A<\340\035\206\274haL\274W\2078\274\237\320\335<,_\366\274_\315\002\275\326<\'<\"\320G:\374\337\000\275\r\233\017\274\254\220\243\274\014:0=\307\346\321\274\317x)\274\320\216\210=O\203q\275!\023f\275\272\177x\275\361wQ\275.\004u\274$m\247;\261\345\315\272\224\330\201\275q\336\315\274w\236\216=\325\221\n\274\005\204\210\273^\357q\275MZ\340\274/\010G\275>`\203<Fo\363<\365OY<\315\314\204\275[\350\257\275\372\271\316=Zr\343\273u\277\364\274\350z\365;b\354\344\274\013\017e\275\\<\027\275\010Q\273\274\275\302\340<\2703\252=\300\267a=\312-\354=?E;=Q\241(\275\261\234\347\274\031\273\'\275T\244\232\275)\356\031=%Q\001=1\373\274\274\205\230\310\273\331\324\317\274Za\251\274]\006D=T\n\026\2760\354\342\274c\324P\272E?\007<\\\016\232=\257q\325<\201_^\275\240nn;\334\030\257< \231\032=,\017\224\275\023\214\220\275\212\023>=LU9=\366\267\320<\032\017\372<\275\014\305<\"g\205\274\367N4\275\222\332)\275\221n\266\274\240YN<\207\222Z\274\2300x\274\226  <u\257\';\212H\032=e\2579=\371N\212<w\351\317<\262\035\324\274\230\263\273\273\'\213\215\274FZ@\274\010*N<?&\3239&\261\315\274P%\255\271~0\322\274D\245\245=8h@\275nd\225=\205O\235=H\330h<\2301\r<\317\330W=f\264\310=B\302\002\273\3722\323;+\232\033=\022\032\351\274\220\025\314;\202\261r\274\372\377\030=\377`\245<\271\240u=tT\311\275\013L\324<e\312\273\274\025\'\351<-4A\274C@\357\273&fj\271\325j\216\273\276\272F=\347\300\274\274\212\326\220=\317{e=\2267\t==\325\276=\242\272\225=\034!\244\273F(\010=\020\025O=\342cG\274]b\334<J%\025\27538\233\275/\315\001\274!\314\310;\224\2300\275<3#=\371K\221\273\255I-=v:M<d\211\252\275\021\340\016\275\t\003\002=\273+R\275\315!\312=\254\342#=\250g\206\274mJ\337;Z\231\303\272\217\204\322\274\364\251i\275\266)|\274\250)j=\024\264\025\275I\207\312\275gv\023=\371\324;\275\020M\377\273\356 \204\275]w[<\206\255\234=\263\rL<8\217\205\275\374\356\210\274\321\252>=)\366\214\274\336,\242\274C\257\003\274J<9=\3528\014\275\317z\3139\263xp=\230\310\212=\332m\206<_\224$;\000\366\365\274\005\237#\274\356h\231\273\230e\213;\373\034z\275!\321==\247\267\225\275Z\235\357\275\026\3512=\327=4\274}\340\"<\t\211\271\274\225\353\370=\240\267q\275uh\016<-\365\000=\016\361\013\274\304AJ\275Z8\010<-\354\355\275\327\210\032<\261\n\001\275%8\274\273)\217\342\274q\373Z=\345,\243;\226\001\016\275g\264\222\274\343\022I\275\250x\350<\177\233,=3\370\224\274\025\234\366;\311\203\204\2754~\210\275\370X\216=\023\231\r=\265?\221=D:\204:o@\237<L\303\271;\016\372\231=\232+\001\275\212\345\235\274z\254\267\274\205w\265\275\t\373\215\275\220#P=\200\341\375<g\364\356\274up!=\320\325\366\2742\006T\274\225\201-=\227-8\275\017\335\352<r\0003\274\346)\201\272\256B\341<u,8=\rE\213\274eW\022=\347\212\003\274\260\322L\274\373i\244\275\240\265z\275\277\2335=I\000\014\273x\230\t=\223L\306\275\037\t\203\275\336=\020>\317\3447\275n\306\214<\225\227\261\274\020\322\264\274\200\r\274\274\230e\037<\310[\304<\006\342\366;\002B\2509\346\210!\275\321\"#=\"\342\243\275\206s>\274\213\244\'\275 c\356<\017\004\204\2750\272\213<\371\337E\275\311d\325=\253\277R\275zR\366\273\360^`=\245L\220<q\260L\275\237\220\214<\241\340\201=\202\032\\\275TyH\275\266zA=\350`u\274\307d\020<\307d\037<3\302^;J\r~\274\342\357r=\311\342\335<\312W\003\275\241:&\274\363E\023\274\372D\306\275\344\323\034\275\006\345\272=W\200\223\275i}\337\275|l*\274\233\255\017\275fX4=\241O\315\273\356\213$\275\275\035\010=\315\243P\275K\020\333\275pU.\274\340@\014=%\033\031<kF[\275\217\330\013\275\237\237g=\233\027\326<\201\2455\275\003\370\342<K\203\002=\376\207\026\275\007\022\'\273E\307\245\275\352\000N\2752ig\275\035\305\003\273S\344d\275~\320\253\273\r\\\221\273\365\356\306<\325k\343<\r\365\306\273\363T\023=\027\335\353\273\332>\246\275x\215\030=xn\001\274\375/\036\275\261\010\360\274\211R\003=\240H\034\275b\254,;\236\022\001\2752,u=\2019\320\271\375\306\n;\3473\210\274\317\342\217:\344\356`=\307\2640=\022\024\'=\251\261\214<\272M\225=K2\344\274\347\2656\274K\240\205=\036Wm\274\036\022\315=\322\354W<\363\342\206<\374Fa=\354\0241=S\361\334\274p\3647\275=4\252\274K\0207\275\342O==\257\275\224\274\301`\214;2G]=_\037J\275\311\316\272;1KD\274tD\226;\354%v=\014\000\216<-,[\272G#\\;\365\324!\275\274\275\227\275\277D$\274?\335\214<\037<8\275\252+Q;G\263\210;\020\006\321<\341\367$<\274=`\274\212\2628=\021\267\321<\013A-\2755\231~\275D6\207=\240?\206\274\3113!\275\247\274:\275\034\266\244\274\r\244N;e\260\032\275\243\340\005=>\367\270\274\372\374\222<\300\350\226\274\2359\017\274\276\372\357<C2\327\274\302\232D=\220\342!=E8l=\244\261\342\274\370\032~\274\037\035J=\\\007\230=\273\333$=\207\353\326\274y\021\345\274\027I\205<_-\260\274*\020\n=\200\270\214=o\257u\274\204]a\275YP\205<^\037\270\273\310\217\"<BU&\275\363{\331\273\236=\216\275\353\276\014\2759\333\001\275\205l\216\2756\344h<K\312\221\274\202\020\025\274J\323e\275\223\003\220\2752\223\343\274t\016\271=\362\311r\275Y\210_\275z\303\347\274M\271X=\004\005%\275Nkb\274g\336\277\275[S\314\274\373\324\245\274\275Cq\275/f\202<^\037\374\274\264I\206\275\233d\234<\234+]\275I\033\306<xY\272=\320\2248\274bi\007\275o\032\000=\272\026\342\273\267\330\235<\030|\342=\221\024\006\273N|\227;\266\362\335<9\237\260;a\342\017=\2720Q\275\266H\325\274FS\330;\002N\207<\366\246[\2758\240\245;H\374\033:=\017\226=Q\265\376<\020\tX<\231\261\270<$\213\264\275\311\347\325<E\035\316\274\006&P\275\262\177\000=\2102^\275\n\327\317=\326\342O< \376^<p\035\205\273\241n\221\275Pq\332\273%\230}\275\326~\313<[\244_=[\325\233=\265\2406\275qf\026=.\226\262<m\036\204<Qr\261\274\264%b\275\334\024\207;3#\201\274\231\034,=\227.\301=\276\377\203\274al\342\274\332 \225\275\233RG=E\0009\275\310\3256=W\314\007=]\252#\273s\336\306<\217\255\204<\014\203\252=\344\036\000=\005\252`<\021^\020\275\341\353\240<\025\215\367\275:\307\233=\311\214\25797\207\335\275\252\226m<\340Al\273\002 \277<\367\3647\275E\320\255=\333\232\251<\365\033\005\274\313j\000\275J\200\262\2755\223\244\274\272X\354\273~\214\313\273\342L\024=<\210=<kgW\274\024\245\005\274;vS=\\\251\355\2751\350L\273 \277\034\275\316\367\030=\364\370\006\275\216\331K\274ZnK\275~\330\214=\003i:\274\n\377\007\275)=,=|e\244;\277F\032\275{\363\024=7\205\333\274j\272g<\005\374R\274\204\247\265\274(I\234\275\367h\343;\310f\320\274Vy\211\273E\303\223\274\001\231\232\275h\024M\275\020\203e\274\302\312\217\275\304\300\222=\243\334Q<c\241L=\n> =Q#!\273\337\005)\274\212\3419=\361\252\014=\247\311\352;\037)\022\274\013G\033\275J4\204\274\305\230B\275\007fj;\273\201\275;XO\340<\2611t\273\377\347\215\272\361d\307;\312\345$\275\302\335\002\274\347x\003\2741\354\320\274TWJ=\334\0171=\303A\355\2741\326\304;\215\243\235\274V\'!\275}4\360<\023y\330\2732<M<\313\256\324<\326\3245=\301\211Q;\010z\306<\240\0307=o^Z=\003##\274\2213\361<wvc\275\022s\216\275\251r\336;\230\245\375<\225\014B\273\222\331f;\010\203\016=#$m=\004>\355<\006\353\262\273\372\276\255\275\200\000\005=\2650\335\274\255!\221\274\307\306\203\275\233\221\001\2759\344\304\275i\036\325\274&@\206=V\223\250\275\251\002\275\274\336\330\207\275\341*\276<z\202\220<\253\367\246<Q\362 <\225C]=X\306)\274\'g\214\274\010@\272<\020\251r\275\325\273\313<%\273\031\274\342ZW<e\2068\274\245#J=\344L\232=[\337\010\275\321\032\233\275\325\327\250\274c%\237\275\370\003\256\2741k\302\275P\266\010\275\207=\327=\032\263>=e\265n\275S\375F<\270\017\004\275w\036\261\2749\353\230:{\374]=\334[5\275p\217\224<\245GI\2759\226\340\274\202\320\352\275=\"\031<w%\222=\210\0171=8\222\202=\211\253h\2758\311\026=\356\347\327<\326\362\225\275\226\215,=u\024\374;m\341:=\260Wc\2757\332\226\274\027!\260=?\314d\274y\300.\275{\213;<\3527\"=\031h\017\275\203M\226\274\365\177-\275w\342\312\273\352\3433<5\300S=*\022\320\274\230\0108\275\006\312\372\273\356!\242\275>\025\"\274s\261x=\001=]\275s\363\313;\240-\266\274\373P\"\275At\252\274_\215\341\274`\032\"=\337\270\250:\366\266\336<\343\223\017=\272\226\231\273\342y{\2755|6\275\314\021\t<\200\232\277<v\026\032\275\357\323s<\336b\201<\356Um=\2135\2469pPf<V\212%\275\345\010\006\275\371q\213=\205x\017\274\206i\367\274\210\263\370\274\344u\350;\027\241I\275IH\236<\356\246\310<\003\375\004\275KY\307\274\337\2007<\334\332\220\273\306X\\<\230!\234\275,\351\207\2746-\344\274\314\017}<\367\261\221\274\013\203j\275\227\250\233\272\362Y\016\275h\277>\273\0351\300<\230$\256;so\315=\300\235:=\224\301\340\275\332\3424;\325\272O\274\014\251\325\274}\240(;X\316F\275\037\253*=\347d\210<I\346Q=\035\351P\274|\335\006=\347Y\\=T\337z\275\3444?<\206\3113\275\324\237\026=\261\232Z\275f\202\n\276\267\266\201<-\023\365\274*\024Q<\036?\204<AS\000\273\t\225\357\274\310\035\243\274\246y\203=\275\216N;}.!;\244\004\301=[\212$\274\265\354\347\274l\371\'=Tl#\275\3100\033=\265\340\037=\034\001\314=/\334\232<\252i^\275V!\253\275!Ip=_\231];\216J\366\272\202\201v\275\233\366:\274\372\323E=\204\033_\275)%\235:LA\013\275\014\257K=+\244t=x\356\310<1\013?\274\024w\274<5\010\260<9\342o=\257=\013=\206\343P=]$\326\274\3135\202\274\342:\t\275\362K\223=\001\325\236=M\017\013\275C\266\251\272\337Qz=\031\233\031>4kz<\31686=\242q\364\274\326j$\274o\275Z:YZd=#\236\025\2729\271&\275kTq\275\301\014\302\274\262u8<\3765Y=\377|\213\274\225\233\033\274\367\360\215<\023\202\311=0u_<\342O\220<\220%\345<\216\365\304=\212\370\226\2744\254\r\275\356\342X<\357\202\225\274\224\036y=o\212\303\274fy\375<\274lP\274\222\255\201<\307|O\275\010\031\267\275IZ\030<\326; \274\315\274N<\276\261\030\274N\030\256\2743\331h;@W\237\274\244k\220\275y\035\"\2758\343\n\2750QG\274C\307\343<\310\203\273\274\021\263\235;tw\302\273\202\330\335\273\277f\306=\351\304\035\2751l\004=w\270k=\325j\006=\354\331\025==\3355\275\360\271n=\026\303\255=e`\234\273\316\361\026=B\314\272=J\331/\274\267\001\031\274\267\202\254\274\201\320\037\274\377\\\372\271\245w(=\304_\032\275\354\206\017\275\254\242\326\275\333\016\247<H\030\251;\014\363\r:n\320\223\274\317\2153\273\243\364\303\275\035^\202=\355!\232;\342\247m=\000\325\010=\347\343]=1\374\006\2752\251\356<\207\211\231\274X\001,\275\320\331f\274\347\346\001=\361W\240\274sa\277\274I\320\306;\256\0314\273\246\261\370\274\272\037\016<\323b%=\250\302\251<\\\306\206<\361dk\275\342\272\014\275\035v\342\274\341\327\n=\222}`\275\365\326\310<\373\331\024=\'\327\251:\025\363\314\275\363\362\014<E\353\373\274\340Z\035=\304\225{\273]\233\r<}t\000\2746\316>=\207iw\275\221&d\275nw\205<\016ZT\274\345s\333<\003;%=\202\227\262<\263\244J\275Xp0\275z?\004\274\264h\025<0\032\317<D\307\200\274L\307R=\247c\371\273\355\234&\275\0224\302\274\\[\365<\223\244E=#\341\265\275\277@<\274J\255\016=O\215\241=\2271)\275\276;\303\275\025\367\312<\262\240\266=\36093<\366Y\355<B\023\024\274pM\022=v>_\275\351d\216\275\350F6\275\235HS=\217\372\242=\345j\264\275/Z\364\274\210\004\032\275\242~\014;\315u:;\373\254\252<\000\032\206<\t2U\275\364\3530;\221\243\316\274i\367\203=\206Yb=\251{p<\353\217\243\273KP\221\273\267\325\322<\237\366&=1\376m=\014\266\025\273{\337F\275\270<\325<\270\013\322<\317\320!=\320\265Q\275\377\201\203<\211\307\260<\335\033W<\377\007\366=\004%\225<\262;\312\2732\234\227=\030\305\'\275V\230\005<;\004\032\2753r\202=P\250<<\030O\302\274\376>\332<m\'\374\273\271\337H=6\240\264\2758\315z;\320Y-=N\251\213=\351\252(\275\347\212s\275\252\377\210\275\341\316\245\275a\nC\275\326\254\260\274=3h\274\225DG\274\032\007\260<\017\214\216\274\232@\300\271\364\323l\274\211\216\371=\367\315H=\306\363*\275\215\003J;)\033\277<\202\023\310=;\333\220\275\247\223\227=\206\350\026\275\267\023\374<\223\031\312<\202\320\213<\017A\224=-\251\256=\331\027\266;\305\211m:\351\361\310<\032\205\364\274\357\374?=x\274\314;\216=\205=\274G\016\272\353\367\003=\210P\254=\222\2745\275\244\0045<1TX\2752\'H\274\370u\224;\371!\342\274\242_7<\'\273\254\275\000o\t\275jc\252=\270\204W\274E[o\274\026R?=Y\337M<B.r=\3102.\275\234\032x\275\325\255\273=KlH\275\tC\225\275X}%\274V\347\231\274T\217\211=\335\212\035=T\267\017\275Y\030\233\273\327\367`\275\031n\320=K\230%=\326/|=\232\207\213<K\350\316\274V\205\270\274\317[3<R\346\211\275\032\025-\275\272y0\275\313\020\230\275\325o\\\275Dk\016=z\005\217\274\225\333\247<\374\354{\274\025\372`\275:\205\305<\212\017\375<\275I*=j\217@\275V%\234\273>\364\323<pvz=P\205\"=\370Bh=\371\243\240=\'\356&:\r\300O\275\024x:=\203\351M<JY\216<I\027\241<jm\323\275\201\215>=\243R\032=\254\360\316\271\274\202&\275\262{t\273\370\200y=r#\224<^$\322<Y\036l\274n\357\024=\221\266\234<\333~|\274\377J:\274q\240~=\365\242f<n_B\274\214j\302;\005\236\344<\201N_<\027\344\177=\211\220!=\n\2431=\335\205\225;\3466\266<\025\343\036=\324\254\307\273\277\315x\275s\333e\275]]\233\275\013t\035=\177\233\237\274\252,P=\nH\\<1\236\023=\365\353\232\274`G\301\274\337\307\324=\267\207\363\274\372\032-\275D\000\335<Rs\201=\256[q\275\226NH\273\364e\246<Z$L=o\341\202\275\337\003\010\273\212\227\307<\227wY\275\320b\256\274K\276\310\275\263G\227=T\246L\275\250\\\000\275\206L\334<\374.\027\276\3141<<\"%\300\273\345\200\220\275x\303:=\244L\245\275\330`\001=\262\024\200\275\373J\216<>\007\334\273\344\217\316\274\375Z\227<\225(\273<\371\250B\274)\204@<\270\243\214\274q\366\265\274\226\372n=\221\010\016<\342\262I<\036F6=\212\rw\274Ik\376<Ol\311=~\216\370\274\250\270\033\274dz\323\272\324\242\354<\227$C<(\237\212\274\032\340q\2727\375\223\275~\376\034\274\311)\344\274V\231\224\275\265\'\014\275\034\\\227=\032RO\274\355\220\333\274\307\341\036\274\324U\300<\352\343\210;\256\363\271\274:\024\204\275<Q\212<\037vQ\275\016K\326<\233\371\017\274u\177\342\274Yhu<\r\232A<\215j8;t\217\351<\001\270I=\254\016\n\275\351\254_;\214\367>\275\251\016\211\274J\037\032=\213\342H=\224\251\226\275l\216\316<\342\000O<\211\326:\275\207\236\227;\032m==\360|\247\275\275\200\000\276\264\306\265\274\374\340U\274\337\022\023\275\231\257}\274Tng\274H\026\241\274=\017\263\274\036\023\t=\345x\304=zh\034<\317w\336<\251)\033=\315\t\262\274.W\370<\335\363\203<D\327)=\334\341N<z\2736=/\345j\275\321\360\323\275E\373\302<\371\237\344\274?\213\317\275r\300\302\274\374\275\256;\201X\323\273?\271t\275R\304\302<\2477\222\2756\rZ\275\0309\306<\214\244\272<\000\236\032\274\301\243\377<\323\201\312\275\3408}=?\250\247<\307\263M\275\343C\254\274\311\r\350<\345\361\"\275#\024[\274\322{\225<9p\351<!3\363;v4\350<\263\257\255\274hVl=q\231\"\275\245\356\242<\322\277\241<\273\036\210<+N\035\275\204\373\004\275%\177V\275\303\274W\275\221\216\260=\244i\305<\317@1=\300\371\036:\354t\276\272\"\342\236=_\006\252<y\3768=\304lH<\371H[<\037&\231<`\001U=\236S\016<\236\000\273\274]\274\374\274o\372\n\273\325\033\311\274~\252\213\275\261\tO=\363\247\266\275\265\366\314\274~\237N=\354*\376\272\315\241!=0X\032\273B\366y;\213&\273=\245\271R<q\250k\275\007\226\275\275`\270\342<\300\205\177\275\375GT\274\020\362.=4\031\020>\275\345\272=,\021K=g#6=g<\366<\'\360\355\274\261`\007<1\336\237=Yd\215\275\n\021\221=\324\305\251\274|\341@<\313\277\240\274FLW\274F\326&\274\217\362\036\275\225X\357<\306\001==\262 O\275\270\022\214\275\357yn\274\225\267\265=\245\355<=\215\347\252=\020\001X=c\206{<\367V\255\273\376_\335=\221\r\021\274\307\261\371\274\311\024)\275\314)(\274\260U=;\270B\327<j=\277\275\205\'\221=Y\210\372<\3431\207\274\315\233\331;\331\370\331<\024\317\361\273\203\212\305<\345\256\256\274\317L\376\274i\243M\275\241}\025=\350j\331<\003bo<\214\004\006<\305\203`<P\356\263;V\361J\274v\304\n\275\252\351$\274+\030\232=\035@7=\266I\264\274\013u\235<N\224j<\332\351\332;\033~\004=nP\316<\366}\254<\312\2217\273\017\361\031\275\306[\016\275\240\005\014=p\247\n\275\223\307\272=\371\214\\\274\306\356X\275\230\274@<{M\225\275\311\237w=\341\264a\275\261\2525\275o$j\2758\022q\275\226i\245\275\333\341\341<:k\277\275\207\n\2739-`\235\274ROM\273k\346/=~FB<M\\C=\252\035\375\275Y\224\005=\252\326\177\275*v,<\237S\265\274\365\307$=\025\230\332<\010\240\312<\270-\233=x\251\344<\361\341\207\274\340\312\312<j\310\232;\313\273\277;x\245;<\352@?\275rP\021\274\007\360\244\274b\017\347;\t\201\276<A\013s\272I_`\273\376t\240<\332\225\236=\362\211\301=\373\266\256\2758\n9\274\212\317\215\275\021i(=\326\306l=Z\211\323\273\032\364P<\312\002c\273\026\003\013=5#\366\272/\240\215;\200,\242\275\2101\332<\245\213M=5\301\243<\\\r\217\275\032\364\241\274\032\203\242\274\361\014\300\273\223\035\330:\246\r\214=E<v\274\315\223\005\274\3320\004\275\207*\021\274\035\323\330;\260{\010=\024i\030\274\000Y\331<+\352X=\310Ft=\272\245\321\274\202>h<t\315\225=\331\324\257<\022V\010\274\272\343@\275\312\006F=n\031\207\275\371\366\004\2750\310y<\263/.\275R\003\325;\337l\n\274[n\254;\031{\204\274s\037\265\274\030n)=|\224l\275\260\022Y\274\237z\033=\323\330\236\275(.\036=a^\211\275m\036\016\274b\201\341\274\205C\217;\302\273\252<\r\341H\2755\000?\275T\000\275<\237C\003=\235$\221\275\214WC\275\242\327!9^\232\001\275N-\226\275\243d~=V\024e=(d\207\275d\374\302\273\343(\222;b\217\344<\332\217D=\230@\314;`\350\344<\034\007\336\274[\221!\275\215]\234=\031\343\263=\203,5=\245AS\274\337\016\206\275\253-?\275\207\262\243\275\036\002;=\005\030\246=R`\243=M9\221\274\001\211=\275L\245X=\016\312&=s\025\177\274\261\223\007=\2422\216<\352\3764<\035\342\214\275o\273\231\275 1Q\275\325\325\201\274\246\014\013\275]\260\250<-)\211\274\367T\203=\234\000C=\244\363\311<\324\307\311\2746?\235\274\352\347\242=7\325$=\t^\205<\376\271;=\3651o=\356\273\037\275wM\325\274#\337\250\274\210\226\306\2736gm\275,.\253\275\"n\030=k\340^=\346\371D\273\\\027\026=\226Ia\275R\022!\273B\305\247\274!{`\275\205\255D=\244\2375\274Dh\232<N\250)\275k\032\n\272U\320!\275\'M\365\272\267\330\037\275\301\376\032\275#\206\001<\365\333T:=h\310\274\362\204\204\275\372V\237\273\376\006\361\274\326:{=9\353H\275XVE=\020l\033=*\205Q\275\350\226\035=^5n\275N,\024\275\374c\203\274\3556\030=E\"\034=\367\005\202\275\222$U\275\233\006&=\312eU=\001Y\203=\325\274\021\273\267\271$\275\013\214!<e><\275Q\030\023=L\027\303<\301Z\360\274\261\'\242\273\225a\373\273\363\225m<JLz\275\r\023\272\274\215 \240<\226\261)=\036L\234<\331\033><\3564W\2720\022s\274\316s\027<U\330\201;\221\204\362<\034\257\345\275b\006\205\275<6\305\274t\022\225\274\205\337\316\275nb\340;]\244\271<R\025t\273aP\305<;\347\234<\207\273\003=\013u\276=4M\230;\2407*\275?r\264=?\'3<\327\021\214\275\316\360L:\363\225\324\272\260\303\031=\365\314p<\2208b<\224\261.\275Pg\202=\310V\234<\254\366Z=\224p\344\273\357\354\334\27309\233=\362\340\020=\2150d=(K?=\034a\206<\201\t\331\274\216A\245\275\353\316y\275\373\353\220\2754?\023\276c\230\014=\361/\n=\321\276W\2752\330Y\275w\316\231<bB\230\275S\341\303\274J\3137<\343\016\217\273,l1=\271\357/=i\236\026\275\373$\265<\372|\000= M\003\275\250v\005<z\241\222<y\312\036=/Y\267\274\255\262v<-\262o\275y\321\014=\374\202\234\274\r\326\234=B\242:=\257\263\006=iP7\275\270f\223\274\000>e\275zMT<\273=\003\275\027\365\237=\034\3534=B\367\3509d\010a\275\265T\212\274\265Zu<x\202\217\275\317C\375;\305\247\322<\345F\242\2746\261\354\274\317\210n\274\227CJ\274B0e\275jU\005\275\230\210\332=\006\352\344\275\216\235\004=\312\024\'\273.\304\335;:\265\204=\221=\316<GlQ\275\331\001\307\274\226\355\346\274\374\337\223\274\302g\204\274p\246\0309r\271\377\274\277\035/\275\253\323\035=\3563\241;\032&\026</\035\347\274\324\256\311=\352ip=\304w\013=\356Ue=\331v.<\357\322\'=\371\023>\274\202\350\300<\324yk\275\321#%=\353\360\254<j\342\237\274\341@\244\275\267\004~=\005i\242=\265\033\200=\002$\340\274kCx=E\037\334\273\316u{<\"\202\277;\210o\372\275\024\242m<\337vu=6\344\002\275\343#\275<\036\r\213\274H\326k\275\371\372\233\272\023D\252<\241\222\'\274P2j\274\213\265\235<\351(\200\275o\245\217\273S\244\227\273\373v(\275\255@\230<w\036\366\273.\207\327<\200\341\242\274\025\273\035\275N\371\221<[\027\245=\262)\225\272\337z\252<\"\201U=`a\246<\032\230\'\275\\\261\254\274\216$\360<=\330\t=\236N\030<5\371\013\2758\223|\275l\363u=\210\341^\274\007\310\253<\2413B=_?\004=\275\376\022\275+\352-<\315v\036=\376\374\300\274\3500\022\275j\2334\275hd\306<S\036\305\274>A\276<;\373O\274y\346\035\275\034M\004<\371\230\252=\322t\350<6\317\034\274\254\215b=\rc\317<\364n\235;WN\024<l\324\016=\rA\222\272\205q\323\274G\253\213<\032\"\243<\r\024\245=t=d<2C\347;\252\234\035=xR\030<\367DS=\250#(<\375\230\313;\n\237\342\274s\254\004>\t\224k=\'\352\224\274\333}\246=G\t\016<\t+\240\274\370\250\211<\010\326]=:bk\273\323%\217=\342\342\233\275\250\n=\275M\313\344<\356\340\006\273\351\277\036=1\330Z<3\\\355;\332\244\320;f\"u=\021NU\273\\k\227\275\027\272]=\310\254\010<\243\364o=\245\340\000\275\226\036\331\274\374\221\356\274\350{\235=N\"\223\275\323\276U=\317U(= ,\250;\033\270\261\274=\231_<\203\377*=p\345\206\275`\267\354\274\026\nu=\343\357Z\275\224\371\225=2\372k=xy>\275\213\\\210=\0133`=\224Q*\275\330\211&=h\362\264\274\252m#\275\326\210\264\274\254))\274\\p4;k\213~\274d\353q\275\327j\033\275)\034\021\275C\336F\274^\346\325<o.\242<\252\277\225\275\n\016\202=@[d;\316\264$\274#\251\217\274\350\201\343;8\367\366\274\262V\010<\313\331n\275\240\263\335\271\316\211\036\275\307\340\240<U\200^=\025Zf<y\261\235<8I\234\275\rw\357<7:\367\274\300\\\265=\356\324k\275d\355\365<$\212Q<.\3442\273\207\262\302<J\202\202\275W\005\271\274@\234\377\273\021\000%=*\370\202\275\002\374\022\276\334\000\367<}\001o=W\010T\2751Z\017\275N\302Z=\nY\224\274O\203\244\275\250\260P=\365:\272=\266\235v=K\007\034\275\267\264\270\273\361\266d<\3715\341\273\026\260\331\274\270h\032\275:l\314;\327\336\212\275\321\215\305\275~\247\264;\365.&=\023\340\232=\373O\221\273b\361\200<\rE\216\274~`\253=]\2756=|3\316\273\0253\243\275[7@<\356\245D\274_d\261\274*eI\274\202\372\315<F\361v=\354\345\301<\301\317\024\275\335\304\212\275\2769\341\274Y\216\037<\027\2323\275\350\374i\274\374\332}\273\265\276d<\325^\337<\353r\306\274#\342[=\217\024\343\273@\371\010<\356k^\2749\204\031=kd\322=\307\250\345<n\214\364=\321\257\316;p\275\231=\020.\373\274\030\250O\2729\006\253<0\212\265\273)\234\367<J\374\002\276\327\177S<\342Nj\275\226\255\031\275W[\234\274[\376\306\274FOY\274T\211\035=\262\331\025=\224\024,\274\232\234\233\275\352\030;\274\212x\331=%W\330<\310\321\216\274qD\021\275\377\346\335<\026\312\307;:\255v=uc\310<\341Mj\274\222\200_\275\233\327\300\274\177\213\270<`&\021\275\265I\027<T\262\320\274\315\026\365=\200`\247=\216\337\320;d\357\037=d9\273;\014\330\266=\347Wi=+\321f<5\2157=\327.U=s\344\000=\353ul\274\314?\201<\t\3108=J\016\322\273T\364\210=\\\356\'<\031\2542=\203a*\2754\230\227\275\374S\210<?\252\007\274\370C\014\274\002pF\275X\362\263\274T\257\245\274\002I\267\274\276\274\023\275\205p\331\275E\3771=.\301\221<\362\265`<\021S\205\275\210\361J=(K\227<\350\3020=\356\214\311=u\332\007\275lI\2749\213W\365<:\371\266\274\333\230o<\022\217\001<\002>\313\274\265\302 =m\021\265\273\220q\325=\357\203\255\275\260\0069;7\362\016\275H\216\334\274\204\266s\274^\212\035=Lz\177=u}\037\275[\241\204\275F<\312\273[\223\305\275!\t\317=-\311$=WVx\275\3158\"\273\373\002\031=\320s\341<\317\233\023\275l\322\\=\365\001)\275\273\272\025\273n\200\221=\177W-<s\266+<\2536,<\001\3358=\345\036\301<m\0219:\326\'.\274\021\314K\274\202\031P=\334|J<,Os<\034\231,=5\302 =\'\265M\275\203\211i\275\021\333\"\275\013WA=A\234\214\275\t1\024=\212M\353</\373\350\274@\374\200\275\217\352\214<lT\350\275{\376\243\274)\005\030\276,\343x=\303s0\275\324\273C</\244\263\274\240y\201\274:/~=\344\304\006\275\372\222g=\240\366U\274p ~\273W\205\024=-z\363;HC\226\274T\026n<{N\\\274\036j\273=\307\317\t\274\201?M\275\356~\357\273\275=\r=j\347\013=\r\0137<Gx\005\274\364\345\225<#d\240\272\322\n^\274\243/\355\274O\357#\275d\221\250\275R\375\221\274jL\001=\2347=\274\254\353S\275$\362\230\274\315k\214\275\2347\203\273\311\353m=V~\374\274e\221K<\271\002+=\262f\264\274rWB=\021s\317</\365d=s)\370\274G\317\027\274k\353y\274E\336S<\007\345\234;pA^=T\026\023=\030\202O\275mca\275n\200\325<\335NL<\212\340\026\275\317\246`=\203\360\340\273\225P\005\275\221\223o\275D\355j\274\"\321$=t\231\255\274 -\243=\022\205?\274\241\225\010=K\375U\274\235\231\210\274a\"\257\274w\226^=5\026H\275\332G\216\275\366#\341\274i\322B\275<Qr=\325a\365\274\007\374\211=\310\312\343\275I\313\"\274\370\007s=\270Q\214\273\3006p<W\350\023=\277\004\027:\206$a;\334{\224\274\213w\227\274~\017)\275d\322\226<\306\r\235\273#D\036;\031\273\314\275\016\010\230<\305\240S\275\351\371\205\275P\306 <\347\002\222\275,V\302\274\343\026\213\274\306v\202\274\252s\031\275!\210\210\275qh\272\274\037\010\364\273\327\374o==\246\234\274n\354\005\275\233\203a\275|\301\222<\354fv\275Q5\313\274\374*\211\274\205\324\013\275\316\036\311\275\033\352x=3\303>\274\305:C=\343\323\366<?\006\306<W\rj=\2140\243=\000\013\307:\230\006\367<+Q\246\274DA\002=\216\346\006\275\334\365\301\274\370\2449=\375\261[\275\341\177\202<\323\202\n=\037\275e=W\346\237<\320\376\010\275\250uA<\300\356\254\275V?9=#\215\327\274\241\006\336\273V\037\223<u2s\274<\0137=c\3542\275\2765\322=\367.\033\275>N.=\315\277l={^\230\2722\030#=\313\215\025=Y\301\264=\342\275\207\2754\243B<C\207\206\275\306\3778\275\337\315\242\275\242un\275D\277\272\274sN\313<N[\324=\2512\236=\344H\336<H\"0\2753\027\305\274i\270M\274\005)\001\274\r\010p=\016l\240;\347\264\310\2736\207\233<r\331-<\207\265,<>\030Q<\206\023\305;C\311\253\272\007mF\275X\212\214\274\006*\'<Y\325\303<\373\235\321=\201\263\315;\324\361\005=7I.\275\337m\262\274p2y\274\341\035*\274\316\322)<\374g(\275T\305\366<\336&\314;\025\215\270<C\307<\274\345\233l=\203\007\324<\3352C\275\240\031\311\274\365[5\275\026\337\236\275\230\205\023\275\346\237<\275\364}\242=\240A\247<\301\030\345\274\007WU<5&*<k\027\007\273\200t=\274\312nD=\t#\314\274\002k6\274%\221\212;\320y\237<\306\211{\275\361^\261<,\262C;\341\367H\275\325\tE<7\305\007=\3515.<\035\364k=\337\206W=\014\325=\274\237c\372<\2514\217=\353\371\211<\214\2014=\225O\255\272\033\361\353\272\365w\365;[\031*\275\013A\t=\263\276R\271:\347\255<\203Z\376<{\"\214\275t#\242<\017\233\261\274\026Iw\274\013^6=\\\335%\275\275\252\302\274\3011:\275\243\311\014=&T?<\220\344P=~\321\277=[\317\271;\007\245\215=\016\366B\275\032\225\005=\356\355#=\255\312\233\275(U\216=\236\236F=u\263<\275\243\314\315\275\252e\346\273\322e\t=\276.\226\274\212\232\277\273\361\020-==\355?9\326\'$=\215\227\355\271T\257\017\274*\217$\275\226\034W\275\260\340\262<\t*1\273\304v\310=\030\205\250\275\200r\341\273\277\204\010\2751\214\037=g\366x;yz3<\302_\316\274=\034G\275\001\016\017<\263=!=,v.\274\300h\240=p\203\270\275\211+\311\274=\227\205<k\374\236\275o\267\230<^\235\337<\212\265\277<\r\251]\275\031\020\337\272\277YC=x\231\366<\017\207\\\272P\330\353;;x\331<m;\031=2\033D=.\200\366<\352\230\202=x\361\024\275\032RD=W\273f=A\001\206=p\261\341: o#\274\017\262\217\275V:\013\275\027Nx\275\304\303\010\275\357\300\030\275\003\201\017=H\210\177=\014\2606\275\340\203\223\274\205\2325\274\366\220\360\273\315\"\316=\212\227\034\274\214\274@\274\177R\224=\302\005,\275\367\rP\275\223\256\223<\373+\335;\\*\n=5\026\020\275\271\263\025<J9\323;\356U\005<\217\271Q\275\022ro;\026\260<\275w\264\334;\365\034\247\274\240\260\360\274%\240\t=\215\022V=\327o\345<\353\t\213\274\031\306\023\275\374u\003=\343\240?\275\374\374\334\273\026\262\000<\001\337\347<:\306S;\205!\230\274\373\371l<\245^\237;g\231\233\274\037\270\245=\022{\221\274\306\264\203<x\347\242=\222\t\225=\273/\r\273t\200\221<2!\244\274+\362\227\274\344\347e\275\326V\252=\034M\301\272G\353z\273?\201D<\315\332\370\273a\217\202\275\266~\251=\314T\372\273\301\244\252<3\355*<\302.\241\275\232j8\275\212a5<\203p\262:\243\277\351\274a\347\211\275u\226\256\274u\020\224=\305/\254\270\251\375,=\245\234\214\275\024\003!<H\244\316\275oe\006\275\330\277\\=wD\304\2740\010\005\275\246\213\201=R\031[\274\321\220\354\272`#C\2751F\256\274\000\215\023=\000BE\274\373\023\213=\036\025);\335\315\333\274\021fp;\262\254\244<oT\000=lZ\323\273`\371\000\275\034\201\003\275\004]~=\013\261f=\237\201+=\343\204,=]\2352\275v\3435=W\007\224<F}\r\274!\220\373\273=\344\373;\027\307<\275&\237q\275\342\367\240\275X\305;=\266\341d\275\321\372Y\274\372\306\215\275\221\237e;\371\251\226\274\204/\252\274o\207\030=\303\231\372\274\214\001\036\275+Kk=F\226P\275\311\n\"\275\232\326\267\275]\231\201;\371\357\373\2743\367P\271`I\210\275]^\226:\016d\025=\260\330\257<Y\312J\275\373$\r<\313.\006\276\252Gd<\377\"\261\273/\317\203=\225\t\222\274)\347|=\360\264\206\275\264\370\252\274\352\r\275<[DW=\004qv\275\244\200\356\274D46=\276\233\307\274\341+i\275\026\340*\275\325%\026=E\264\252\274g~\324\274L@g\275\364|\245\275\0315\204\275\"k\226=\214F\010=\335\203\225=1\320\035<uy\357\274+.4=\017D\205\275C\275\246\274O\352\256\274wr\234\275\321?5\275\'\206\240\275\326Q^\275S>I\274\\Z\'\275\232U\257=du\202=K\264 \274,\232\221\274\245Ep\274\247|P=\034z\370\274\203%\350;\237\200\324\274t\021\317=\206\245\340=p\026H=d\032\033\275\330\3713=M[\217<p\027\000\275\263\275<\273\233\261\324\275\346#N\2746\010\221<\\%\370\274<Y\241<\244H\206=[\317\037<\353mS\275\262ZD=d\374\033<,\365\'\274\353\375\r=\360\267C<c\263\272;\032\nU=\361\314\246\274\307\350\343<\2001o=\307\354\037=\275\370K\275(\345\262\2757\253 =B;\360<\2329\333\274\223qE=}\2240=f7\214\275\326\204\"\275\'\210\352\273\353\206\031=\315\310\304;!C\206;\332\003V<\211\\\303\2737\321\004=_\317C=\216bs\275~\'\222=\347\245\242\275I\306v=/By\274\362Z\260=a\211\020;GT\'<X\257\270\275e\205\206\272N\340\261<\033sY=Xz\227=o\004\204\275D\306\311\274p\211\036=\303\220\311<\022\177\037=\346\222[;;c\226<\235\206\327;\246\003:=\230\351\307\275fqM\274\262\256\347<\242\334\274=v\265\333<\330B\013=3\343\2568v\024\211=\224\335\013\275Cp$=\306p\214=\200\250\211\275\007\004\211=G\301y\274\004\221\344\275\344|\013=\216\345X\2752\253@\274yl1=7O<\275\240r\340\274\236+\350<\326c\222==\352>=:\2261\275Bx\234=\303\263\325<\244\003b\273\016$u\275d\212\037=\222\243\243=\240\270\204\275\026\360?\273=FV\271\340\257+\275\025u\265\273\220\326\226\275\376\275\220;\250\027\253<\036\312\206\275\276\r\304;\316\241\333<\271<\221=\230\324\263;>Rk\275n\323{\275A\371\001\275\344\355_<\247\374\236=\030\245\351=H\363\245=\304N\326:\345~\354\273N\2437\275\260\372I\275\327B\016\274\204\341\263<\366\243\202\275\262\303\356<\336\212\215=\210\206\236\274_~Y9\004\035\261\274ql\232<\307\330-<\357j\275\273\362\256\020<\323j\263\2723+\035=\014J\025=\323I\316\273\237\024\r;\272#\213=t\307\021\275F`y=\236@)<\2679\017\274MZ\004\275s\273\206<\252\035c\275@?\361<\277\372@\2743\304\013<b\321\351\273\316\306\302\274\271\021\277<\2531Z=5\270S\275<\264\242=\366+.=\345\353\213=v\320\356<\203\2145=8;\215\273\243\254\024:@\021)\273w\n\271\273\337\336U<\212Fi\274\335\243\302=\304\357\374=DM\376=\360\210\242<R\204\220<\340\372\007\275\356\370\350<\316B\212\273\327\242\264;\330\245+=\341\022\211\274\251\177\200=\216D\373;\016\241\000=\356\252\n=h\006\343=\307\310]\275\3334\016=_\323=\270J\303\374<~\220\236<H\3441\274\372\352\361\274E\312\250\275l\0075\274f\225\026>]\351x=\234?r\275\310@\254\275\213\301\304\274~)\000=O\375\361\274\247\317\341=Z\177\377\274J\\\347\274c\351\244\275\033\340u\274JR+\275>\220H=\320ZL\274\\\n\324=\266\3407=\373<x=t\272\005=\207\244\237=Rjs=,}\256:\0006-<\331\335\256<\037\302\373\274\034\311\002\275\340Oq\275M\025V\275\202\006\335<\233Z\234\274\374p\340\275\216u\014=8\267\014\275L\313\010=U\030\364\272[\354<\275j\010\263\271\323\365\036<\226\324\205;m3b=\355)\r<\346\263\t\275\036\023R=\2063\034\275;(k\273\344\245C\275\2765%\275\302w\201=\003,^<\230;[=X\312\212\275\276:\213\275\257\243D=M\013N=\266\262\002=\016\275\220<kp`\275X\264\262\274\271\204\350\274\317Y\264\274+_\336=\240\322\261<\317\211\311=\325\364\237=\231\374Y\275\220\343V\274q\253k\274\002`$=Ui\215\2755\344\345<\'\324\346\273?~#\275d\253\022\275?<\203<\203\277\246=sM\265;S/\360\274GJa=\252\306\365\273b\273\253\274\000be\275\221\224h\2748\246\351\274\315\367\014\275M\010\220\274\0163E=\3302\210\272d\366p\275\351\312r\275\303|\264=/\021\201\274\301)H\275\023\003\371\274\320\353E<\257+\213<^c<;y\366\215=\207\327\210=2)\201\275A\026n\274*L\226<\200\254\362\274\235\360M=\364m4<\370\224\"\275\315\301\021\275\002T\345\272\033@\3449Pt\374\274\203\311\034<\310\2710\275\343d\276<y$\371\274\351\353\355<\256B\355;\226k \275\353\270\224\275\025\247K=4\243<\275\002\271\315=\000J\201;\0054\257=\031\035\035\275\256\\\222\274\201\332/<gE =s\346\214=\256\333\355< ?.\274L\336)<\214I\302\271\207\345t=\257\013\215<p\337m\275\353?l\275\313\332\322\274\022\201\341\273\376M\010\275~\373\006=\306\241\350<\211\037\370\274\005\004\207=h\364N\275\337p\304<,\027\227<D$\031\270s}2\273\360\335Y;\022\202\023=\241=\332\270\016\364x=C.E\275\3535\377\274T\254i<@&\246;\377\210\323\275\234v><\017\351\204=F\301-\274\200\357\226<6\356\036=\341\230\236\270\340\032c=\263\014v=R\360\233=\354&7\275\273\345\235\2749y\250;\332\220\274\273\016\272E<C\213\002>\213\221\222\274\376\350\322\274\r]\233:\370\257\037=\000x\225;te\325=\303\221U<J\345\242\274\341T\216<\000[\261<k\301!=\371;\032\275O\366\321<%V\256=g+q\275}QX;\n\334A<E|d=\311Q\246=\236\035#=&\214\236\273\037F\373\274\341\314A\274\227\366\276</o\263\273,\347\242\274\375\372*=\026z;\274\350\235\206\274\324\307\250<D:?\275\267\343L\275\335\224\021=XL\214=\tq\357;\177\021\177=VO#\275\255Q\200\274\2068\300\275\346\014\236\275\202D,=\237T\350\274\345\205\245\274\371!\214=Y\373\213\275\255&(=\366$\300;xcC\275\366\352\027\2734\014\362<\304\247\222\275J\373\273=J\005=\275ip\333=\326\251\263<8_\271:Y\310.:6\336\243<\356,\224\274\227\025\250\275}\370\240<\202\356\323=\271\217\021\2746\360\225;\036_%<T\270&\275d\3153\274]o7\275QIf\274>l\377\274\200\304C=\240\263\227=h\245\243\274\036;H=1\223\254=D\312C\273p\355P\274+\031\023\275\031\273\230\274\337;o\274\353\232\024\275\210\340_=N&\030<H\236\026=zG\367\274\350k\000\275\362\227!;\005,\362\274\3630\004=ef\001=\344\014d=\266l\213=\034\t\212\274\334\373\224;\242\027\352\273.lh<v\327\225\274J\036\322<\202\242w\274\343a \275\331\314n\274h\256Z\275?\234\022=\320;\216\274\244\016F\274:\240\244=\217\025\355<\227#\216\273\215\213F\275\245\242$\275W\3432=\206\3130=\177)\230\274\2371\234\275\234\023q\275U\224\250=\224rF<\300\345\353\274\221\205W<\023;\345<\343=8==#\263=\007\237\307<\321\030\267\274z=\301<\253F\277\274\005u\221;\276\276\322;\205E`<\202^\r\274\314$\001\275T_\366\274\'\021\274<\274U\223\274\221\351R\275B\370:=\014\275\243<oS\354<\204\350\376<\357\301\204\275\35512\275\216\300\207\275\201\205\032\275\324I\001\275\226\374\036=\275\264P=E\310l<\257\245\263<A\3335\275DRz\275\353\354\215\274\2045\224\273q\223\030\275\013\213\205<}\333\267=\026|\224\275\036\206~=\375G\207\274\374@\242\273\202v6<\356n\035\275?\352\367<\254\241\360\274\365\177e<\257\331\016\274y1\226=r]\\\275u\325P=\007\271`\274\375\236\215=\2079U\274\264o\351<3\272\354\274gY\223\274b\374\210\272)\\e\274\355\332\321;\262\024C\275\376Bt\275>9J<\371%S\275\037\351\027\275HY\203=\303\344\031<l\n\276\273(\006\366<d\007w;\255)\346\274k\255M=g.2\275\270\302\324\273\354\016\340\274K\017d=\3056\203\273N\"\345;\"\1775\275\025\302J\275@\357\2209\350\227k\274\3173P=\331\021C\275if\023\275\257\206H\275pm7\274r\224\342\274-\316q\275\327di\273=fs\275k:\001=\356\302\205=\301k\327\274\313_\223<\nh\377<\305\262\271\275&T\244<\370Yh=p\306\202\275\303\035\316:n\\\010\274\221\345w\275\334\340z\275<\351\220<\206tQ\275\032\037\216=\313\026O=/\017\220;\"H\016<\010\367\211\274[T:\275\256FG<\262\033\256\275{,t\275\352\213\220<\032$\035=a\000\256\274\207\201+<\315\034\223\274E\371\334;\033]\364;\301^q\275\257\354x=\265\313\231\274\257\262\332<3=|=\004\343\211=qJz\27292\006\275\354\230\362\274\314\264\006\275\336\334b\274\025b\026\275m#\003\274\027\235\204\275h\343\r\275N\242\344;\000;\240\2751\317(=\372\200\220\274\333N\322\273u\201,=^\223F<\372-\226\275\344\374\344<\343\273/=\014\224\\\272)\021\225\274\365\361&\275\033us\274\365r\031\274\377\246\350<\333\253><i\314\024=]6\376\274a\236\335\274\362\271\261\274h\225t=\004\336i\275\r\356\244=\372\312!;\243\265\351\274?C\332\275\344+\316=\221\267\026\272\367\006\023=\345jY\275|\361\002=\215\255\037<$\373\001=\352\020\204<}\222\303<\220\357{\274B\2223\275\022\312\326\273\220\000E</\313y\273\321C5\275\270\223\350<`\266E=\006\000U=>\262\235=H\355\264\274\032\275p<\227\256\006\274\351\353\275=C\227\331=\3321P\275\t\014\337<\310\010Z\274\002\2273;\320L\251;\332i\376;\344S\216\274\017D\337<\030\206\206\274\2700\236\274\343\360L=\262`\332<\264e\352<\374\026\256\274\3752\014\275\211\230\022\275\213`\017>\023\330\334\274\344\n\202=\032W\003\275L\376S=z\\,=z\276,\275>\264\325<l\355\370\273jC\0148>\317\375;S\221\205\275\330\301{\272\337Z\311<\257HA<Y\324+\275\327\272\237\275\245\007e<\355\301p\274\317\013\331\274\304\022\331\274\374\373\201\275V\"`\275D\'e=\302\361\323\273\322\365\024\275~\365\036\274gKL=%\227\241\275U\373\333<\345q:=\254\260\031=\256a\274\273\372\263\261=L\355\342\2732,\313\275lr\260<#\221%\275\3506\256=@\007\277\275\220\241\221\274\004\324\231\274a\352\026\274mPr=\302 c=\034N\003<\320\364V\274\331\261J=+CT=\304\236*\275\202\021\202;>\366B\275\016\242\332\274\0163P\2722\265\307=\035P\006;mF\006\275\300\207.=\351\276u\272B\344\212=[E\331\274\032_\332\274Cg\\==\343\360\2752\233\372;\253\314/=\275\030\307\274\336p\301\274\0140\010\275/\306\002<\203\234\217\274\017\217G<F\240\337;\361\"\354;B\023\231=p\306\2469\372\2067=\003]\247\273\326\226\203\275&<<<\266y\277\273\035T?\275d\035\034\275t\351F=\347\215*\275\366\244\352=ZH\247\273\026\203f=c\376G=<\n =\201\273?9\341\220\345=\207\312\357\274R\343x<\233\3232=\344\367g=?\033q<\224\232?=\\x\231<>\252\212\274\326q\310;@\336j=\t\207.\275M\'\211=\r\214\006\274\207C\272<\341{\324<\222l\222\275j\321|=@S\003\274\276\2732\275\374\024\033\274\265\002\005\275t\376\226=\352\315\223<\0379\306:g\207\277\273}\305\022=\356~\241\275\264\004\250=\260\213\203\274\003V\032=-o\214;\311\256\346\274S^x<v\001\342\274w\215\310;\203\372_\275\336?\025\274}\221\003=\026\2275=\340\210#=Q\332\025=\010\025\350;\224\345\214=x\007w=q\004]< \263F\274\376\331\256\274/1\005\275)<\'\274A\312\364;$`*=\262\\9<\273D\004\274\243\301\215\275\267\245\370\274<\247\002\274+\225;=f\351K=\271$\013=\224I\331\275\344#B<q-\035;0\202a=,e\367<\270\274\\=\235Z\221\275V\264I<\251\225\344<\344j)=\022m\346<l\'+\275\237\3401\275~f,\274\257\335\244\274\376?\376;%\034\177;FN%\275\355\277G=+\023\006\275;>\035=:o\001\274\223S\263\274X\315@\275\"i\217<R,e;\364B\246\274\r&\231<ui\201\275x\235\305\275\206mG\275\322\305\246\275\0073\234=\037\026V\274\247\311\000=*\022\365\275\371\322N<\343\350k\275\rK\343<\177\221q=\371\331O<\363E7<\301>\207\275\364#V<j\323v\274\317\203\177<\276L4\273\226&\224\271\235\007\242;\013\255\256=\311\305\235\275t\036\037\274\212\352_=\024\3056=wf\331\274(4\374\274\265\267\014\276N\021\t\275\375RC\274\226}\241<\260Q\350\274\032\263O=\203|}\275\336\300\037\275M\2234\275\310\373\260=O\002q\275-\232\\\275\037\343\343\272\340\245P;\237\221\211<Lo\365\274n\236(\274Z\323.=\211D\202=k\323Q=DL\332\274\272\2539<W\257E<\010\036\231\275\2363J\275M\2160=\352\205\333<\335C\337\273\t%\316:\240]\262\274\347<\235<\375&\256\275\201E\240\275\211_\214;%M\363\274q\200P\275\200%H=mQZ\275\3079r\274\256\254\312<1]\330<\tYk=\221=\360\274\264c\022=(\351\313=\217\310\306\274\320\204:\275\204\233\344\272>G\000\276\014\r6=!\337d;=\201\202\275\266\305\032\275bq\331\274;\204=\274c\234 \271>\336\363<\226g\365<\263\321K=\253\315\267;\225|\275=\0244\021\275\023\317\334=\371\000\r\274}\377\306=GOg<\017y~\2755\037\344\275\331\333\312<z\377\'\274\217u\037=Y\377\253\274\034t\024\275\252\202\261\274\235[\002<T\270d=Vd+=g\244\271\272\306Bn<d\024v=X5\023<E\274w=\342\224B\271R\032{:t\236\274\274\t\273\315\273\203\312\020<\232\254\003<\201\300(<\357E\307\274\302=\334<\240\357U=\030\204\205\275\236\267\213\274\355\021\222=s\313\323=~0\023\274\314M@\273d\271\266\274U\022\275\273\002m\221\275\342#\014\275\024\331[;yz\227<\212\202\245<\265\251\343\274@\264\352<P{\267<{\215H<\222\016\003=\033\254F\274M^\345<f\200\340<L\220y=x\221\323<+\270i=.\306\004\276\242\276\250\275\273}:<\304q\243\275w\213o\275>\324?\275\2144\005\275\325\314j<\232\221\024=NA+<\356\337\235= vJ\274\261\242\364;Q \315;\232\230\330\274w_D\274\272\033\216\275L\306[=S\035\357\273K \365\2747\346\266=\232\226\301\274)U9\275}U\365\273\372\2233\2743\2438\2754\022\'\275\320\264\244\275\302\301Q\275Z\301\213=3\337l\272a\363i=>N\242<\254\031\214\275\021\327\200\274\032)\302<N\3059\274\337\374\372\273\236\r\202\275\271c\034;N{\377\274I\305\252<\330\377\236\274\305\345\306\272\025}u=\354=\005\274\214\200F\273H\236\021\275(\0023=\313\260k<\355\373G=\013\331\010\275\277\024[=\266\370\311\273\026M\000\275\0164-\274?z-=\311\025\257\2738%\007\275\226?\224=\'{\331<Vo\206\275E\306\307<i\247A=Z\312/\274\2113%=\3447\262<\347AN<\354\320\226<\210\262_\275J\271\325\274\335\345\312\274\222\314\030=\225\336Z=\3613\204:i\311\022\275Z&\245<:\260\263\274Y\220:\273\016@Y\274\032\307$\271j\215\022\274\'\033\033\275\242\260\n<\322\225\273;\000^\244\274i\347\220<\316\370S\275\263\016\";\311/%\275\230\006t\273\234\245\035=\243\204\371=\205\302\255\2749\221\220= eP\275\000\370\271\274?\234\270<\345\230\320<obR<\324\342\032>\017\214\316\274\035\021m\274\316\364\214<\206A_\273s\307\310<\000}\n\275>3\345\275\340\022!<!\337\002<\024\255U\274\244y\010<\266\257\262<\360\372\033\274\t\276d\275\347\331\222\275\005\323o\272\343\236)=jek<@\014\030= \306.=\0021\n\275\306\035\231\274(\022\002\274Ke\352;\266_#<\"\202\301\275\275<\346\274\250e4\275\251Yb\2751\177n\274\303\340\026\275\007xx=\316\013)\275\365S\033=R\273a\275\312\264\021<O\324X\275\031~\320=\205_k9\001!\005\274\004r!=R\253F\274\024\315\201=\316\036K=b\253\360\274\272\364K\275\226\325\224\272n-\036;\376z\250=\334\231\277\2733\020\033=\323\210\002\275\337\362\346\274$\362b\275(:y<gm\254\273\254\205|\274o\002\200\275g\237\227\274SL\337<\023G\374\273\207HC=\327\327\211\275\264\311g\274\330\345\276\274n1B\274\210\350\250<\033\217\342\274$j\245;\366$\200<2\237\032=\223\266\364\274\256\005\336\274SW\215\274\216*\243<\004jQ\275`\270\027\275\007\327~\274\341\207T\273BN\200;\365d\273\275\373\375\317<cb\354<\223a\305\274*<\337\274\227\033\327<3\334\251\274\276B\336<\0132\220\275\207y+<\344\030w=\257\344\007;\214|\003<_\2228\274\252p<\274\350j\215\273CpQ=)T\357\274(\367\035\275\0324\231=\037\266+\274(\247L=?vd\275\312J\024\274\3340M\275>^\363\274z\252G=\221\025\222\275\002\201\203<\033\271\353\274`gW\275\022Q\021\275\3146d\275^\344\223<\031\334\\\274xOc\275\273e\252\275-G\374;@\275\221\275\"\004u=\027hB\273\272\231\324\274\367\213\225\275s\036\032<m\222)\275\212\321\014=\035\014\206=\317\241:\275\365$\245<\360\313/\273K`\224\274\353*R\275P\220\223<W\3444\274\361\326\365\274\024Ml;\023<\360<\355\322I\274V`\301\274\254\032\225<S\233\257\274\341;X\275\277L%9\010\2773\275:\352u=\366\030\000\275!\364k\275\200P0\275\247\205M\275O.\266<|,\r\274L\274\016=\230\032\201<\376_\014=O\220\035= d\310\273:\254]=\003PP\275[\037\361\273\310z\263\274r\3540\2757\\\022\275p\000r\275\370\350\000=\276\315*\275X\267\234\274D#\211\274\"\207\377\272X\"c\275^L\206<\327\316\006\274\226W\307;\363\323\277<)/)=}\020\215\273u\246\024=\002\213\256<\250\252P=\373\265\220\275\032\237T=O\367n=\370\223a\275\374^\014\276/\303\342<\256z@\273]\307\0338\244#}<u\'.\275\271}\201\2755\327.<r\031\214=K\025%<\177\255w\274\221:\253;\241\335\253<\032\213\204\274\232uj<\337\222\254=\205+d<\354\264k\275\223]\204<bb[\274\210\375)<?M\363\274\202\272&=h\333\026\274m{?\275\313\010):\242\216\t\274\031+b\2756Z&\275\2172D\275t\243\204<\3001\252\275: \274;Kj\214=\354\221\310\274\2343\213\275\013\201W\275\217i\332\275=r\333\274\212\3719=|s\014\275F\313\305<\220\3250\275\n\235\205\272J\021\236\271\252\014&\275jz\363\274\001R\362\273\236\203\343\274\346\013\317\274\365[)=\220\273z=-\004k\275\244v\261<\206\240\030<@\356\221\270\033m(=K\201X=\342gb8\357\266e<\256\214\214<\234\236O\274\234\326A\2754\210\211<\224$\302<\344aR\274\334\317n<\327ED=\026M\351\273\307\0078\273\375\201\231=,kh\275\374\305\275<\220x\216<\351\321h\275\221\202\014\274!\017#=h\302B;\262\001\232=\350\372\346\273X\277\252\274\342\354\204=\333\2364\273J:\376<\2478\236<JJ+\275D\001\210\275\223\363\316=\342\214\254<]|q\275\317\217j\275\004CB=\003E\241\275\356\022\276\275\215X\211\274wa\311\275\351\306Y<<\031\256<,\217\204<S\254\332\274\010\217\003<\311\337E<\324\204\325\274\241\267\265\272\036^\352\274D\274\277<\342I\350\274\215\266\014\274\243|5=\030\200.\275\006;==\226\276\263\274\213\2123\275\371\336\317\275\016<y=\t!\007:i\230>\274\272Yb=\236\t#<\371\204\355<@\010L=.10=d7\"\275\225\273\236\275\274\370\210\274q\013[;\230\0300<\033\302\330\274\313\207Q\275\354\372s<\345d\252\275\347 \326<\342q\341<!m\212;9\026\333;\224n\004\275\363\254\270<5\205\240=\263\022\245=\251\342\243<\3766\275\275\273\345\276\274;\270\231=\313y2\275\365}\277;\311\230T\275\035\202\340\274 1\376\274&\220\034=\335\211s=e:\221=<\253\272\275\213\351\255=\214\355\217<\222\272\314\275]\334\221\273m\206\346\274%s.=\272\\\212<\304\374\220=\256\306\341<p3\351\275t\315\221<\017N\027\275\301V6=\335\221\225<-b\030\274r\270\303<\377D\253<\254\226\313<\203\373{\274V\234\230=\352\257\177<I\242\201\274\200\242\200=|\002(=\007\t\223=\372g\240\275\262\224\253=4\366[=\262\010B<\254+\213\273\'\033\245\275&\363\024=:\036\256<\236\375&\275\212\364\270\273&\252\017=\024\206\003\276;\264\000\275zN\017\275\220\005\027\275\375\260\365<\213\261\021=\220\344\215<\351!\202<}\256~=\244\317U=\245Q\010\275\314o\207=n\014\273\273O\233b\275\010\266\224=\000%\n<Q\257q\275P^`=\300\266\261\275\376\365\265\275O\005|=\331\005\372<\316\346\325;\210\345\240\274\352?\350\274ox\207\275\000\022\364<\n\210\226<A\232\244\274\r\244S<\010c\364=\241\245\315<7\006?<G(/<\250\374\214\275\362\017\317\274\223~\036=\230\247\020\275B\225\210=w\232\271<~`\030\275\366\203\275\274\t\010\025<C\317\253\274\324\037t<\231\2432\275\264OC;\353\306&=\200\216\226\274\360^\252\274\374_\362\274\343\340\'\2753\253]=\312NO\275,\267\'=p5F\274\265#\271;jK\254\274\215-)=\" S<\023\324\024=[H\004=\232y\336<\234;\r=\n\350\t=\353\270\200\275\306\250o<3u\036\275\324\3148\275\320\0211\275B\300\213=\277\214\2307\3416-\275\214\301y=Wb\207;OT\'\274\336\245G\274\213\026\247;\371\221\347;!\2636\275\177g\006<\027\"\236=\356\013V={l<=\274\377\242=\301r\211\274\273\203\r\275\n\335$=K\016\317;\211\314\345:\233\235\371\274b\335\035=\225`\211\275\367\330\366<\237T\277<r\313\304\274\3250\214<\264\010\213\275Z\300\272\274Gb\335;\233\240\026=\223\263;=&\247G=\225-\346\273\"\227\030=\233(\271=\261\362\342\274\'\366A=F\312P\275\002D\310\274\271\'\230=\240+\351\274a\256d=\310\244\t<\331V\200\274\345c\321<h\033\302\275VI\033\275%V\n\275O\243\242<W-\372<\333\314\271\273\305\314\003<\006\317V\274\n\216\306<\345@,\275Z_\255=\027.\343\274\205g\032\275\322\260\225=5\214;\274\343\213\323\273\351\335f=\014\202\256\273\027\203\243\275\2405\027\275D\377\313<L\302\276\274\232m;=+\001\344\275X\243\352<\366\377\200\274\307_\261=\231-Q=F\357\004\276\305#\t\275\237\320\272\274d\r&\2748\367\323<\216?i=\354\372\272\275\302\332`\273z\257\364\274\275\242\225\275\353h\203=\264I8\275n\226\243;\242p\251\274\236\332\271=\314H\013\275\000\226C<\375\0338=\352!\327\273\332\342\027\275\274\317\357;\177H\225=\272\275\324\273\222\367\026\274\177\236\206\274\363C\034=j\302\215=\307H)<\360=\272<\3228\350<\237\256\000\275\3471\'<\320\014\200\275%\200\305\274\001\247\016\274;$$\275\313$\255\275\250\362z<-\273H=\007\027\234\273\224\204\000\275\351\024\305<L\021\276<\276\256\222<\327\266\245\274\240\210*=\263K\271<\271\013#\275m\352\214=\224\332\212\274q\2369\274\337M\364<\021\314\304=G\3378\274_\201f\2758\310G=\204/\247\275\336DO\272sQ\024\273J=\245\275\237\347\220\275D\255\220\275\316j~\274\213\332\302\275A\t3\275\305\207\204\275\375\004\215<\337\277\201=Zg3\275Ne\337;>\253D\274\'Q\203<0I\003<\235oT\275\t\021\337<[\321y=\027,<\274\220\222\010\275\\\375\013<\234\005\205<\271\361#<\370e\372\274#6\000\275\331\302\250<\034\342l\275\333\262F\274\245\211:\2753F\365=\365\213\215\275\003\236\336<\321\226\274<\202\374t<~\\B<\300L\002\2751\224\323<\241\256\370\274[\356\223\275c\202\005\2754\235\264<ia\013;\257\301\310\274\303\003Q=>U\263<~-\261\273\376\300\274\274\311WD\275}\343\267\274\r\320L\272\335q\202\275[\352\262\26783\256\274\377Ul\275/\215y=b\227K<\031^\265\275\342\256\035\275\023\332\333<\354\342\350<\240\226\377\275\376:e<\022\267h=\273\021\214=\033\265\023\275\261,\222<\331\366\347\274\321\037\365\274u\354@\274\232\020\025;1\300\316<q\376\347\274\265\364\002=wG\202\275\277\215R\275l\354V=\377Y@\275\267\rm\274\027H\262=F\300\303\274\261\302\214=E\035J=\220\360.<TA\202\275uIR<\323U\001<i\352\000\275q\3220\275\350W%\274\251)<=\033\262\233\273\004\rr=\313\350\361<<\0172<\315R\r=\323\202`<\266\241\225<\352\215\235=\036zn\275\n\030\260;\311\377d\275A\253\267\270\032\265F\274\260\327A\274\243/\251\274\273\201\\<j\261]<\305_\205\274\230\020\253=!\355O\275\337\024\316<\207\215n=\301F8\275\323b\"\275\253Og\275\220V\232\273\242U\n:l\350\227\275+\275)<A\317\204\274\345\373\332\274\303_V\275\223k\346\272Z\017\007\275R\351\263=\373 \016=\020\266\244=\262o,\274a>\277\274z\273\006=Wy\316\275)\361\036=\017\234R\274\363\327\241\274\250\225\017=\277\327\313<\2474\347<\204\352\252<\247\351\246\275[\024\313:\034n\217;\321>\355\274\\Ra\275\357\332\222\275U\307m\274\217\\[\275\264J\235=\347\206\n\275\010\312\026\274R\334\020=\242\2575=\3141\261=\225h\250\274\261\300o\275\216\237&\275k\251?\273\360H\375<\0021>=\010\277\357=\'\344\341\274]\036\246=}\237\004\2750\257\211\273\344hP=\246Z1\275\344\346\007\2752K\341\274-K\022\273X\274\333\275L \207\275\n\346\374\273\262.\036<\366\305\261\274\3677\216<G/.\2747f\233\274\314\336\217\275G\365\000\275m\315(=\213\027\200\273u\344*;\240\221\304;{\364&\275\317t\355;\367\263\'\274Y\224\276\272\267\306{\274,\254\262;C\261K\275\232i\020\275\213\\B\274\375\020\026\275#\206\013=/ ]\275U\352v\275\340q\231\274\316\3072\275\376gN\275p\364\214<\271\213\366\273C\023\226;\344\212\302=\201p\242\274\306V\370<\373\002\237\273\323qu;\275O\220\274t\':<h\325J=`\331\204<\232\311\252\275\344\263\263<\355}\303=X\266Y\274\250R\245;\222\316\234=K\224\274\274h\203\032<_\366\364<\273\235\275<\245<\253=[\275K\272\001\336$\275\377\3048<*V\265\274\351\232\375\274\2404\226=4eS=\221\300=\275\314\007\254\272M\227\315\274\215\204\266<\"\316\302:\263V\262;\327\234[\272\256?\002=\276\310,:N\r\\<X\270\337<\273.R<`f\342\274\252S-;\323\204\212=[\272\203\273z\325=<\212-\301<\344fi<\225-\250\275<\344\203=[\177M\275\275E#\275\330\n\321\275J\312\001<\262\\\237\275\371\364\345:\367&s=7ju;P\2614\275\310kF=/\265\002=\212\204\230=\301h\220<\014s\237\274\367\365K\273\244\022\025=M\001\'<\312$Z\274\317\351y\275\r\376R\275\214P\262\275\215B\303\274l\273F=\266\227\2519\022\274\264\274\220\202Y<\343\255\356<v\372\362<X\353\317<\333%\222\275w\3674\275cx\021\274\035\014\002=p\340@\266\266\231\340\274P)\016=f\235\220=l\200-\275\324,)\275\230\025\261=\3409(\275\257%&=\200e\025\273~~;<3R\223<\213\212\014=\262\377v\275fJ\205<\367\341\232<l\3439=\t\tm=\005\260\251\275G\000{\275v\344;\275\226=\017<\220O\020=\005\037\000\274\341\263\003\274SR\244\272e\207\207=QT\223\274\021M\263<\362\353\026\275\220\234\236<d\264\340\274AI\004\275\252\201,=i\3246<X-\003=7\005\014=\372\342\254\274\241\002\344\275\322\024\243\274{\224\"\275\263j4\275\317\374M\274\357\306\264\275\003u\201<\250U\245;T\246\223=4O9=\032\242\t\274V\224\223=\367B\003\275\276t\221;\024\256H\275\221h\263=\362x(=\002\022\305<\221\362z=M\022F\275_Gz\274#\263\007\274]q;:\013^\000>\240\322\244\273\274\007\212;\"\264-\275si\201\274M\025\200\275\337m\035\275\350(z\275>\177\007\275\332\302\023\275b\255=\275\0039R\275\225x\215=\347\241\361\275\374\374><\\b\276=\233\344\007\275\254\253\236\275O>\250\274\310~\007\275\021\376\333<04\335\275\374bK\275\016|\021=\3734\177=\004\033c\275\311\033\"\274\364\363\266\274\035\306\355\273\025\323I\275\n\241\260<\335\251\233\274\260\243\346<\236\307\006=\000E\360\275\221\014\306\274@\366\336<\371B\263\274V\340\212=\337m\270\274B<b=5fN\275\323\235.\275g\013#\275\301\312\030\275Ra\303\275\004\026d<\235_\025;&\204\306\275\231\375\261<o\035>=p\270\240=\253\250Y=\226a\227;\034\204/\275\246\245\373<\361g\025\274\231\t\033=\220\306|=\233RT\274\370n:=v-\004\274\265\024)\275\275\235\266\274\t$}\275\363\243\204\275\307}7=\235\242\t\275\266\213\030\275\251\302\245<=sB\275\232\335\324<>K\020=\330`S=\231\276\204=2V\226<v\343\330\274\003\347\332;\240YR=bJ\337\274\370#I\275\210t\221\274\213\0268:\241\345\036=u\316l\2759y\321<\213CY=J\204u<\277\224\277\274\342]n\274\3775<\275v\230\214\2747\031\355<\022\310N:\271\rJ;@\224\n=\372\017\277\274\034iC;i\267<<\013\244\335\274\374\225\033<y,8=\222h\325\274a\221\276\274\2158d\275N@8;\024!P<H\242\225=\266\265\220;8\364@<\343\351\002=\036s\207\275\344\211 <\247\246\272=2{\020=\256\365\377\274\332l\257=\333\344\244\272\352\3743\275\203B\274\274\324\371%=\274c\226=\230\302\022\275\371\007\201\275W\010\026\276\346ZZ<\313=%<\226\216\217<\343\303\330\274\264\316|=\020\261\203=\235\377\236=\314\322\037=x\235\250\273\023\232\275<\273\272\313\275\227\3729\273\235\236#\275\273\211\025=zU\004<\301r\221<\'&\232\2726\347.=\317\204\215\275\273=r;\253\277&<D\337c\273\202\230\227\273\376\256\206\275\026\236\341\275\202\304\261<{\235w<\3009\227\274\354\223X=\0269<\275[\241\212;kMz\273)\002\242\274rP_=o\t\264\273\220\366\323\273\312\r\037=\304\003\334\272\253\303\234<i\037X\2745\205\265;\267\213:\275\322\325M\273A\030\236\274\205\251\340<WP\341;\245d\007\275\007\006\242\274pkL<y\0221\275\177\355\216\275\230b\305\274\2074\006=\324\236G\275\200N};\210\217\240<O\205f\272\223m\227\275\357\031\245=\020\024\201\275\342\342>=,u\221\275C\371\275\274\302\222\250<S\023\354\274\207\331.\275h\321\347;+\256\215=\371Sg\275\365ns\2754\303\271\271\301\360&\272\306\272\200<g~\304<l\265\237<Y\263\036=\240\275\304\275\203)\273\274\263J\231<\222\240\033=\202dZ;\227:\300;\014\003\227=\200\330L=Z\033,<`\254\027\275\274\371\037\275\214\345\376\274\371\231\225\275\031\252\325<\330\245\275=\034\236\034=>\261\277\274;\250\227:\330\025\321<\317v=\272\202{\242\274\250\320<\275\370y\221\275\377\333\020\275\365\333\"=d\3277<4\t\232<\316\314\223\275\266\257\031\275\245\313\223\273l\314.\275W\005\003\275\315\264@:*\265?\275R\022*\275\356\372]\274\374Gh\273\022Xa<\021\306\215<\254(\345<\303\035}=l\032\242\275\203\2201<\023\242\003\275V\270\240\275\305DP\271\247t\331<\"\365Z<\317\330\245\275o\305\023:\321W$\275\341I\036<\'\334\307\275\3678\215<\\\233l\273=\256M\275\'\220\362<\355\226=\275\340\236\234\275\201\260\031=\363\036\225=\013\350\333\275\227)\335:\225w\272<)\257D<\273\177.=far;\370\242\234\275\006u\360\273\240\301@\275\r\363\016\275\2043B=\210\240\316\275\215\002\253=\322j\226\275\3134\340<a6*\275\273N\316\274\346$7=\323\242\257=~Q4<\356]\317\274\010\367/<\311\322s=\033\335\354;w|\016\274\007[\200\274\366\244\274=\346Q/=\027\214\260\275\333b5=\253\315T\275\352\005:\275\304\356\355\274b\375\003>\337\"C\275\305\310\002\273\265\212a=?\326\245\273\027\013\252=\377zx=\243\235\212\275r\274\003\275v\226]\274\245\274\253<8\315\362\273\302\300\305=dg<\2757aq\275H\222\003\275Yb_;A\010\361\274<\241I\275\325V*\275\200_5\273%\363G<\2652\332\275\334#Y=\2406\262\274Pd\277:-\372\312\272\320\302\200=\242\257n=\235\027q\274\302\034\337<\003\315\234\274\237g0<Jg\322\274K\327\033\274\247\375\235\274\301\246\352\273\256b\201:@\217\366\273\017\215\010=uh$=\331\036\331\275m\nr\275$\036\214<H\371\017\275a\234X=\333*W\274\376VW\275\276gv\275\246\033\021=y\347o\274)i$\275\005\340\346\274\266\344\211<\177\207\245=N&\233<h\302\233\274i\020\337\274\354\r\227\274\035[S=\356&\034\275\025 \215:\377\344\372<\321\307\007\275\353\250i=\366@/\275\270\365!<\3463P=\327>><\027(\212<\322y>\275\261k\233<\363;\034=\001mw\275-\334\300\275\252)U=\375\305\243\275\322\2404\273\325LN=\003\023\245=\224\203\235\275\266\253\325=\251-\207;|br=\315P\n=Lt\013=\'\350S=\230*\026<,)\000<\214\357\266\273\201\223\232\2753\227\345\274\263!\021\275;\226t=v\204\301<&1\275<\316`\337\273C\2670=\256H\220=\34503\275\'\364N\275\223\344$\274\234\2213\274\2063\257\273\230\303\252\274\327R[\274\254\327B\275NI\334\274\r\227\266\274\201;\370\274\315\274\323<\243\3437\275]\351i\275|\236T=\020O\205\275\334\215\215\274\276\027\233\2744w\217\274\370X9<r;\270<+\211\246\273\253&\234\275#\212\277=P\355\210=\032\2341=\305j\205=VWP\275G\242\256\2749C\200=\265\210\301=.\204K\275\202\240\220\274\201\264\004\275\240X\004\275\032\334\362<\276\206\020<\037.p\273\234\331\017=$\304F\275W\nn;J\013}\275\277B\225=x\247\310\273J\005Z;\340\252U=<\021F\275A\237\267\274\240\216~\275\303\353\021\2745\3476\275\367`2=h\003\254\2758\323\034\275\321\277\026=j\260\024\275\370\336D\275\003_\222=@\006\224;\270q\031\274\316\3456\274i\247\227;t\007\340;xN\r<\257\025\212<\306\257\n\276\271\304\013=> \037\275\354a\345=\023\202\234<\363\020[=\024\345X\274\317\314\312<l\246-\274\247\275\031\275\024+`<;x!\275\317\273\020\275\314\212\253<\346x\021\275!\366\357\274\374 \315;\306\356T\274\314d\212\274\372\352-=\0205\221=\274\312)=~-\347;uV(\275\300[\272\275\207\247\232\275:\232\241=V\263%\274\003\243\314\274\357\312\206\275\343\346\316\272`\302\331;\226\201\000\275m\237&=]7\"=f\261\277<\024\307\006\274E|:\274\266\216+\274\037\251\274;\263\235\207\274\354\247\233=q\354\247\274\204\371\241\275\330!O=\261\311\212\2742\271\317<(o\272\275\315\234\002;]\311V\274\014\022w=\007A\027\275\002N\201\275%\344\250\274\001.S:\230\232c8,>\270\275\262J\341\274\2575\200=9\260\266=\304\032 \273\210\214\363<r\200\261<\336\316\252;h\220\223\273\346U\223=T\210\256\273\247ic\274`\207:=\270\240\036=%\250$\275\343\233\324\275\356a\253\274LLK=\253o\277<a\2678\275\"E\206=Qh\177\273kk\324\274\270O;\275\305\211#=2\013\334\273$\207\252<\005J\r=\313\265r\274\372\313\310;\313?\327\273\t\320>=\266* \275uxC=\246\343m=\242}\030\2743\306\022=e\234B\275Wr\236\274X+\326<\331\272]\275\3234\031\275\311\367\250\274\316\207\005\275\217\036\354<\205\353\275<\255\333\253<\247\033\203\274\315\263\361\274\001\333\203\274\216\322r=U\333\262=\277\277T\274\014\263\265;p\335\"=\313\256\t\275\274\305X\275\251\233\327\274\022\035!\2744\205\'=\360\370\226\273\326]\035<\226\256O<-\366\004\274\227\304\205\274AG\001\275\351\371m\275\241C\256=\317z6\275\270\027\262\271pJ\n=\341*\027\273\332g\031\274c\230\310\274\317\3158=5S%\272\350h\021<\227\213b=o\343\222\274\247k\025\274\317\\>=\320\220\216=-\364\037\275\374w\204<\327P\004\275\2765\223=\016p\361;\377\225\020<i\220\202=\226\205\213=jb\275=\231\002\013=\2174\013=\346\352\207;\220qX<\031\027\304;\022\2738<T\036\005\274%\342\003=m\317\031=\237\023m\275\362\326\254\274\241\023(=\273\272f\275$6*;\236K\017\275E8I\275\023\003D\275\033\223\\=\317\'\027\275\346*\017<\224\362\234<\rx\222\274\210\237\236=\322^\232\275\016I\270=A\245V\274\335,\037=\354\020p\275\267\256\275\274\346\343\224\275\340<Q\275%03\275\337\340\323\274\33594;9\313\002\275\245\236x\2754\337I\275\337\017-\275h\254l\274|fX<D\351\206\275\360\247\\\274\271\324\346<A-8\274\003\351\364<K\243k\272L~%=v\215U\275\316u\271<\373\325\026\275\312\350>\275\312\017\366<\177\255\234=\353\023\246\274\260+\217=\252\246\212\275<\251v\275\210\337\017\275\351AY\274\355M\372\274#\332\344;\001\313\335<\030\212\034=b\301\202=\377\335\276<9\212G\275\020\274\212=\232\270\026<\306\306\204<\203\315\224<d5\240\273\370\305\224<\014,\333\273\361\373\274<\310\250j<US\231;7\226\226=U\366#\275\325\336\255<\324\002/=J(\265\274\204<\262\275i\306\236<\203\255!<\361\323X=K\251\333\273\252\025\212<\372Y\244\272>h\213=W\266\030\275\364\033\212=1\323\251=\032\325\231;\363\241\254</\265\021=\216\005\002=;n \275\203<g;\306\366\"=\334+\231<\361\005\032\275\010\022\230=\216\211\236=N\235\306<\3165m\275U\314\214<u/\260;\266\037+\275,4\233\274\317\007\365\274i\270\341<]\371\\<O=\336;\340@>:\232-#=T\212\034\275\313\334\033\274\236\376\253=fQw\275\2536\023\274\227\356B\275j\\\272\275?9\355\275l\202\t=\260\310g<\313\361*=\354\360\223\275\006y`\275\341\272\n\274\020\302\340\271\032\316\275;\265\256H=\023J\253\275F?3\275[\2156\275a\267\026;\376\244K<\225\361\200<\370\t\002\274]Gh<\375\020\001\275\257n\347\274a\026R=\367\253J\275\312T\250<\240\313\004=\252\307\024=\274*\246<\017\222+=k\007\027=\244\336\210<L\300\364\275\265\000w=r\273\226<\016\037\013<\024\313\367\274Z\246\032\274\"M\243=\313,\224=\375\374\224\274q\355==z\373~\274H}\271\274B~\003=\033\246;=\237\"\357\274\215\232\034\275\3369\206=\312\021\r\275\366\312\033\274-\221\257\273\223H\037\275\375\336\234<\016\320o=\212\020u=\311y]\274\367\377$\2752K+\274\370p\270<8:W\275x\215\352<\027uk;K\215\220=\274\266\005\275\323x,\274{fn\274\372\013\266;gg7=\025w\325\275i+\026\275\262\266o\272ik\253\272\221\302\247\275\273\212u<\236\003\205=\366[\337<E\310\002\275\023\373%<\317\223T=\277\340\332;D\211\254<\'\361d=C\237N\274\311g\231<\246\344\233=G\3677\275I\246$\274\350\255\261\273)\230\202<$\273W\275C\221\220<\025\335.\275Z\032w<\254\332\'\274\013#\201;&\007\343<db\314:>\203\256\274\272\344\250\274o\200\236\274\363\2228\274\255K\007<\346\326~=\327m9=\t\301Z=\375\312g<M\343\255\2741\3424\275\353W\003>\242\256\362\274J\035\027=\276\n\342\2745\351\370<\002x\277<\344\353\\\275QQ6\275S\374\230;\307\n\n\275\363Z!\274\224\203\227\275w2\311<R{\356\273h6\343<\006&T\275\230V\271\274,5\200=\271\241\014<n\346\314\274\256\234+=P\354\017<\323\373x=\265\232\353<\355\322o\274\373\371\235\275\203B\027\275\277\013`\274\347\020[\274\222W\210<h*\270\274a\247]\273\000\370\215\274\006\355\301<\323\251v<@\303\307;\336\025D\275(\363\241\274\030\202\255</\\J\275\307\353\277<C\276X\273a\347\201=\020s\222<is\007\275\377\223\000> \013W=\2313<\274}B8\273\233Q\030\273\216m#\275\302\224V\275t\3043\273\020\253\363\274\301_\225<\033\005\323\274w\363v\272}fa=s8I\275\267\312\354\274\032UW\275qf\'\274r=\216=j\304\t\275\t\313\334\274\367\340\267\274p\315\005\275\261\367o=9\202\222\274\307\032\344\274\362\365\237\275\021l\367\274\327\346\212\2752\000\367\274t\361a=\270\3237\275~\216\203<\361N\303\273\007\3439\275~X\031=\351\317\204\274RiY\275\323\262R;1_\001\274\227\023t<Y\306\365\275b\264\273\274\013\304$\274\034\377\013\274\325nv\274\023;\262<\351A\373\275\217H:;\356\226\"=\320@a<&\230\001>\002\034\240=\266K\336\274\221\360\n=\372\024\210=\335\344\367<#\240\204<\222\226>\2759\022\325<\2604\264\275,v\316<\013`;\275\353\226\035<\361\255\243<_\3266\275\035\003\340;[\213t\275\024y\370<\337\347\273\274\225\207O\275\345U\004<\2244o\275\366\303.=\345\222\211=@Y\250\274\227*\274:\024`\300<\301^w=A\327v\275\321\370a\274T\335\\=Y\231\212=\336l\316:\223u\352\274X\242\033\275\314x]<@\016\212\2753\204 \275\025\010\366\272\360\332\001\275\372\212\253\275k\212\007\2757\355\254<\305\016:=\307\225\231<_\277\333;M]^=AMF\275\262s\352\2745\001\315;5\354\021=\364\010\003<\227\2775=\037\317\376\273l\321\n<\002\3338\275A\224!\274\361e\204=g\006\307=\2729\033\275\277\016\225:\001\034\212\275\024\217\025\275t6\205\274T\024[<\224\000^=\231\237N=g\035\212\275\225\005\223<\325\005\001\275W\313\271<t\\\221\271\014\347\227\275\367\237\333<\324W\005=\177\032Y<@h\014=\206\n~\275\372\257\313<K\367P=\226\313Y=zM}<\301\272\302\275\273x\025<\001\216\007\275z\251\234=\3468\013<\367\200\266\274\375\344\005=\031\246\212<\364/c=\275\002\240\275u\276G<\264Y\334\274\335\256\010=:\346\203\275\3020\335\273C\020\t\274@\000\325\274\241)\023<K\224\024\275\202W\244\273t^\240=\2319\220\275\360\3767\274\271\330\003\275S\250\372\275zI\321\274\205\201\244=8\327v\275\201\367m\273\307z\275=\001`\341;\273\241\331<\245_1\275Y\3432\275\002\336\003\275\265\345\267<Y\201-\275\323\303\037<\n\323\034\274\271l\002=o\021<\274\241\231|<Q\360\265\274}>\224;C\364\210\275}\224o<(\316\027\275\000t\335<kt!\275\345Hz\2729\253B\274\003\301\322;E\025\212=\333\273\373<\240\023\205=x\313\263<\322\246\337<@\351\350\275\312\302Y=K?;\274\365\002W=\354\325\355\273ZFC=\227\215\227\275\035_d=*\274k=\3338E=\007\256\345<\006De\275\237\000i=\317)F\275\372\321\265<\021\223\202\275\020\320\335<\224\361D\275b\322)\275\247\016\243<#\251d\275#\235!=\361y\216\273\254\326\310\2732\276#<\211$\275;\031\266y\275\336|\235\274\227\241.\275\274\240\303\274\236\231\t;\263\365\261\274\n\244\327<\375\036z=\357\n\022\2754\025\023\275b\271\255\273\025\215\200=\302\030v\2757\205\231<\000G\262\274\261\247\212\273\316\023#=\0028\322\275\270t\375\274\324\373\322\275\324N\330<w!e=\0043H\274\233\354\200\275\026\354\236\273\264\310\356\274\302\304\017\274[\307q\274`\021\215\275Og\306;_%=<\306\037\014\275\374\373$\275\306\'C=8AQ\274\373V+\275@\215A=\256\342\200==zB9\3760\245=@\343\206\275o\332[\275\030\350\027=Vse\275)\266\235\275\314\207Q\275\030\017\221\275\020\342\252\274\270\036\276;\220/\027<8{\216\2741\270o\275\205!\201<\357C\223=\034\327Z\275\274:\034\274\033t+\275+\331,=5*\035\274\006\223<=\321\'\257;\275#s\275\232b[=\004Y\267<378\275\341\020\345\273w\033\206\275k\331m\275\252\276>;\367h\017\275\210Z\257\272\177\003\231=}e\207\2747nj\275a\\I\275Dgf=.\313\221\2751t\342<\324\334\372\274G\232\325<\014\310V<\264\233^\275\375[\033=\203u\272=5\267+\275\035\350\214\2750\364\346\274\364\270\032\276\272\235]:\222>K=\361\3653\275>\353\320\272\022\223\251\273v\005\024\275\213y?<\244Z#\2740\2012=\350\365\372\274\327\245\277\275\311\246\206\2725\267\010<\340\255\224\275\311\207\204\275\227\255^<\027\346+\273\2065\215=\300W\016=\273K\343=\330F.\275\265\242\264\273\222\314\231<4aT;}a\037=]K\211\2748\225\330\272\235\n<=\2163[\275\3734q<\3149\300;2\037\250<-\324\214=Ys\207:\235\005\222<\263z\276=\243\t8\275\016\322\301\274\311\355*\274\303\344\224\274a\275\014\275\357P0=\021R\017\275&_\002\275\200\356a\274\312\013\306\275\034\223m\274\206\216L\275\"\305\231\275\017\2753\274\313\\m=\241/W\274\307<\027\275\027\352d\275\02258\275?@[=ai+\273j)8\275\376\210`<EC\024<\005\200\036=\016\326\206=8\306\037\274\366qb\275\004\327\027\274\364\353\365\275)\354\026=\230\010\224\275u\356\235;\361\r\003<\346\263J<\314v\'<Rq+\274V\274%=\265<\013<\007k\270\275\231\177H\275p\r\317\274\240\375?=k\307\006<\250<\206=\311yo:\251\377\233<\324\243<\275\342\232}<N!`\273qpl\275.\263Y=\312j\273\274 \225\306\2749\014_\272\373\233\036\275$\302\210\274\327;\261\275\244\345\346\2747mI\275_{v\274<-\232<y\366\212=\254\213\022\274\013m\332=\314&\305\274\r\202\r\273\006\362C<&<k\273\310cy=m9y\274\251Zn\275N\332\343\274\256\246\016=U\363\205\275\335\035\330\274\272\005\204\275\273\002H<\234\331\t\275\213\207\215\274\"\267\030\2754\273\211\274\221\233\016\275B?\252\274P\2632\274\201M\003\275\025P2\274\333\3211\273\306\326\007=]\276H\275@\352\243\273A\256\243<h\345\002\274\376\370\000=\322\277Q\275\371\270\314\273\305\261\325\274.mT;s6\311\274\031[\367\273K\306\272<\245\021\205=\234\n\210\274\270\204\220<\334C\275\274\014\363\037=\027\351)<\ni\037=\017>D\275\304\226\233\274\301t\314\273w\006F\274\245I8=~\3536\275\344w\301\274\263\013_=j\"\235:w\215\312\274\330\220\373<\017.\240\274\363\3043<a\272\007\276<\036v\274\207\313v\275\370I\034=\331\002\017=2\001\250=\345F0>1h\227=\237\010\361;=\256\233\275\030N\224<\312V\020\275\nK\177<\330\354y\275\010e\252\2755\207\000\275\372\242!=\013p\326<\'\215\333\274\230\311*\275_ \235:\010\247\020=\316%\002<Wd\237=\017wU=\361\267\222=\307\270k\274\301v\207\275GY\253\274\026\344\204\275\033s\342;\223\270\033\275\315\005p\273O\246K\272p\253/\275Z\000\201=\003\244%\275\226\316\010\274n>\234\274rl\231\275W\275*=&r\031\275\031\037-\274\275\2008\275\305B\302<\025\335\227\273\022a \275@o\253\274\341\356\344\273nP\377\273\020U\201\275\230\025\301\271\233;\002\275[\347v<_c\246=\364\376\246=o\035#=\022x\256\2756*j\275|Yu\274\246\330\242<\346m\315\274b\263\317<\035\346\346=\302f\363\275i\305\332\270\372\307\272\274\017\023\210=et\243;\313\204\033\272\032\304)\275\234\325h\275\310p\360\273\037\0135<\026\323\215<\210\017,=\201H0\274f\030O;7\322=\274\0055\335\274\030\311Z=\261U\262\273\311aE<\013\204\304=\275\212\027\276\264\366\216\275\007\317l<xB\347<\374\246\376\270\306\352{\275GA\357<C\211O\275\010\231\234\274F\234\351;O\235G\274a\342\346\273\206\250\025\275fmY<s^\026\275&\233\335\274\0338C=%Z\205\275\317\320b\275\346.<=L\255\005<U\342\024<\304t\252;\271\257\313<G\315\002=\347\215j<\275\272\332<\320\272\000\275\345\267\323<U\302m=\244\261V<Y\305\226<\017h\327<\010\022-\274\220\302\315\274\206\250\242\275\0251\217<\243\373\327\274\241m\312\273\316.\246=+\\\t=\250\004\031=*\241\347\275J$\023=\304>\"\273\006\255\n\275\353/\341\273-\350\333\274\3118\021<z\366Y;\366l\n=\377\201\007\275\252x\222\275\006\3637<\232\261\005=\017\275)\274V\345\027\275\350\002\257=s_\036\274\236\364K;\264\030\306\273G\032\033\274\t\325\341<\207\376\002=\257;B=(\354\353\274\315A6\275\277\3732\275H\323\020\273\216\260F=\366\270\231\274\256\\R=Go\257<?7\004=\323\316G=y\350\261\274\315\227\000<\006E\";\240\023\225\272@70\275\307:=\275\374\365\377<\210\374\204<\323\r\222<yGu=D\322\211\274\251\022\263\274N%\204==\212\212=\331N\300\274\370\000`\275Q^\224=\307O\376<\256\222\305\274t0 \275\307\211\264\273D\322+\275\271\377\365\274y|~=w-Q=\002,[;m\013\263\2730\250\212\275^\000\354\274\227\323\264<\233\005\200\275\260I\020=\274\337*=/X\007\274\302*\263=\346\257f=\024\275,;\271h\303\274\243\343\225\274\360Q\326\273Mq\234<\347\213\363\273\317{\037\274=\342\253\274\237@\310\2750\223\217;R\234\022\274+\332+:\024w\204\275\006\217\031=\3328\343:\023\032M\273\276\214\014=\370S\"\275\243A#\274.\257\002\274\246$\347;{\263\333\274\353\372\340\273\305\261\275<s\343 \2750\341\332\274\227\215\326;\275\025\0149\035\202\306\274\300\020F\275\325R\303\275^Q%;\335 t=.J<\275\371\2104\275\303\0149=Fh\\<\200E\214;\310\202\201\274\005\003i\274\367\236\315\274\222\306\211;\273%\026\274\271\333\262\274\365HZ\275\240x{<\254\230\276<\006\314O\275A\324\362<N\n\377\274+\244\370<\377\201w=\275z\r=X\003\013=r\373\277\273\300\357\241\271\353,T\275\373\314\242<\233k\211\273\r\340Y={\245`<5\021J\273hW\305<\315l\014\274\344+\345\2742\222\2769|\241:<\270tb\274!\2513\275\366=\360:5\323\211=\356\333\270<<\2652=\337\231\273=\033I)=\233\023\341<\314\375\252=B\203\032;\037\005W\275L\031\337;\001\0272\275\274\267K\274b}\307\274d0\236\274f\020N<\\\264\371\273`M\220\275\374\007C\274\020\030\260=:\032\234\275\232\340\004=\245\270$\275o\262\312<\336\263\246=\201\003h<Gf\035\275\031\021\321\274\257h\213=>I`\275\332\275\355\2751\315S\275J\346\202=\034\230L\275r@\261\274^\023R=O\320\021=x+\002=\222V\224=$\323R\275\217~\274\275>)\007=g\n\014\276\024\264\024<\227rx=\034\323\315=\337\307\273<\351*C=\342\355\367<\237\302\304\273\325\354B=8\223\250\274X\r)\2740\374\016\275r\024\255\274\346(:\275\231\360\216<F\342I=g\213==\222\320\t\275e-\273\275\330\260\251=\000o\234\274g\205\252<\352\370\307<\271\003\025\275@\251\253<\250\315\240<]g\224\275\0163Y:\356\\i\275-\036\036\275\006\371\204\274S\250\263\273\274\366\341:\364\010I=\375m\226\274S\247P=f}\302<O4\233\274-\027\260=\303\350\005=\236L\352=\007c\245\274\"F\330<,\"\205\274VL\225\2736\225\315\274\021\034\215=7\010\005\274\220@\"\275\207\242\230<J\312\315\2755\314p=\217S\253=m\311g=\017\340\347=\037\234\010<o~\003\2756y \275\265Z\000=9\006+\275\\\312\352\274\261Lf=\"V =P\3145=\262\034w=\222\265\336<.(;=\326\230\263\274\306<+<\250\231\352\275s\334\207\274\276\332\016;\220:n\275\214\372\\=\204]I=T\272\327<c\276F=2T\211<\225\337\302<\260d9=\022w\356<\223\001\021=\327\216\017=\245\324\037\2752\320\201\275\342\n\377;\225\036o\275\020\335\367<\277\225J=\202\354\235\274\226\tr\275&\305\r=\251\340R<:T\227\275\274\211\256;15\034\275KZ8= \347\261;\034\275\005=\302\235^=\274,\325<q\ta<L(\205=\246\223\212=GH\270\274\332\354\341<\353\323\032=7\232\020\275\377l\277<\305\2342\275\340\267\305\275\301S\300\273\360iB\273vt\340\2747\352\205\275JE\003\275\235[o\274\2013\246\271\203\300\200=\233\236\276<k \361;\226\341i<S\260\017\274\001\201\3059\017\246\374\2738\301\003=\313i\031\275\254\213\n\275\361\226\255<\263\n@\275\266\300\330\274t\223\240\274/<\017<\0318a\274\312\320Y\274hU\324<\340\n\021\271\202\267(\275\315\324\312\274Z\344\255\274h\260 =P\317\237\275\007\277\340\275,\266\177\274IdF<\213\263 \275#\004t;\266\002x\274|k\272\275\335\'\203;ChY\271\207\t\"\275ZS\374<;\202\361\274s\364\232\274\206\377\363<\314\360\344\274^^M<;\022\312:\264\233b\275H(\031\275a\036\010=\3265\003\275`\367\032\275\"\221\311<n\351\002\275b\316\276<\236g\316;\331\032\275\274\356\214(\275uY\022=8s4<4!t=\006y\360\274\330\213\203\273\207!\333<\371/\210\275\352\n\330\275k9\326\2741Yl\275vJ\014\275)\002V\275\317\rP<\000\333\3309\231x\316\274\265`%=Co\242\274\027\367/\274QHW<\374J\215;\302f\247<T\231\036\275\341\274\275\273\317P\000\270\202\203A\275\036\330b<\303\036&\275,/\357\274g\010\232=7T\240\274\236\271\306\273M\2665\275c\000\022\275\017A\206=\213\265\264<jn#\275\310x\332\274\346~\222=\213,\036=\374\244G=\034|\371<\220\330\032\275T9\211\273\216\2600\274h\322\360\275\027\354\234\275\277\356\'\275*\002\330<%\337Y\275U\375\205<\241\331\224\2752\351\034=\264#.=\311\223d=\275\331\270=\234\240>=\204\310T<E\312\330\274\242%j=\276y\004<\200\335T\274\007\377\013\274-\257{\275\351.\020\274\346\251A\275\377\032%=\351\205\010=%\026\213\275\202\267Z\273Ir\274\275\024p\236=\333\377~\275M\341\325\275\256\253\273\274\275/\374<\345\255\036\275\036N\271=o\024\220<D\025\374<\006\004L;,\321|\275\303Z\354\275\2729\241<\371\271\235\274\021\022\312=Qm\362\274\373\022\241\274\356\037^\275\342#\353;g,\016<FVv\275\371\344\322\275\310oU\274\352!\022\2742\023Y\274&\033\335:\367\333+\275}$d\275g\232\316\275~g\235;78m\272b`\240\273\253B\373=\025\332|\274\345N\271=n\230r\275\3451\302<\036+z<\r{\000\275\262\325\004=V\213\r\275k\236\216<\341\300?=\236\272\334<\365\267\003\275\241\320\004\275i\332C<I\332<\274\310u\343\274\327s\321\272\266\000\244<k\275\241<\000$\021=\000P\302=7\211\t=l\231\363\272k\204\343=\254\324}\275\235\035\240\275zz\233=S\375\034=\343\246\256<:j.\274\244+>\275\362I\246<{\352\005\275 Z\004\272#{\336<\273r#\275\302\374\340<\313xj\274\210\374u<\030\214x\274V*\314\274\223\036G=\024\226\201\275\306\236d\275\234#a<\343\255J\275J\232\036;\\\213\247=\t\305\023=\036\021S:=L\n>\275\220a\275\"\272x\275\340\274\016\275\'s\330\273\025\010\222\275\3604\023=t.\014=\027#\215<\242\202\002\274\024\257D=\262\024\341<q\244\260\275\230Qm<G\206\350<G\366T;3\332V\275\326\330z\275h\256\355<3Xs\275\367\3325\275\200\356K\273H<\261<q\211\207=\333\"1=LLC=\036\007F\275\340\2224\275Z\236\326\2749\233\207\274T/\326<%\350\275;?{\261;\346Lw\273F,\376<\324CS\275\271\275\313<\276\220\213\274\303\307\003\273\275\000\364\274\026\216\201<]\022?\273\341G\233\274\353\031\273\274\303\244r\274\177\277>=Uk\311\2751\262z=#R6\275\021\022\376<Q\266\023\275\r\321\200=\356\002(=\036\2367=\357B\206\275NR\305\274\250F*\274\021Q&\275\315\037\226=j\212;=\301\036,=\302\335\030\275:\026\364\275\241\235\210=|\3536=\377\303\320\273>\303\367\274\212\"\302\273\342\3600;2I\343<I{\244<\"\213J;\020O\255;\025\017\024=\'$(;si\260<\021l|=o\273\345\273\305R0\275\232m\342<hg\266\275p=\215\275\214\241#<\342\036\274\274P}\352:\276\276\177\273\263\256\206\274\343\300|\275:\365\230\273)\2302\275\252\037\n\275\371\367\261\274\255\313l\275\350\246\372\274\'@\211\275\306\205\252\275\316\023R=\0056:;\3309\002\275f\225\262\272\301\027\371\274\316\270\203\275~\373\314<\264DL=\023\300\335=PN_=\261p,:1\325\334\274\003\345X=\320\300|=RXq=\026\353H\275\31642<\n\006/\275\032\347\206\275s;\251\275\014)\301;\247\3103\274\205\014\023=\344\315\272\275Y!\004<\305\221_=\356\234\006\275v\234J\274X\215U\275\026\350p=\200\337\350=j+\202\274(\300\225\273\236#7\274\210\021K=\255\3755=:\374\231\274\364\034\363<Z4\301<>\233\206\2754a\004<t\032X=5}\016=sK\036=\34372\274\205\354\366\274\205\010\035\275$Q8<\346\332_<\025%\202\275\257\261\232\273UW\250\274\336\266\332\274\372\266B=\303\267,<\325\177\204<\n\312\360\274\302W\016:\020[A;\n\247Q<\337\3053\275\366P\222;\203\007\216\275\267e\332<\225k><\341\2058\275\311@\234=\346\274\337<\317\037\376;\263l;\274\253\353\271\274Rl\307=\235\324\242\272@\220\332;o\227\252<U\302B=\306P\260<\037^`<\304\2721\275\2656S\273\207\275\270<\036o\244<\370\302A\275\207\337\001=\320>\322\275\301\351\005<:1h\275Z9H\274\305o\r=\305GW\275\\-\210=\267\'W;\235\266\315\274(%R=\002\364\301;wo\271=\327\370\025\275\333\033\346<O\001\246\272\220\375\206<\2416\362\274\024,(=PX\236\274u\032q<\361z;\275\257*\253:\001q\227=\307\006\231<\356^i=\330\227}\2752\366\371;\345\212\027\274$f\272\274\257\201\245\274rT\205\2748\214\016\275\322!\222=\017\007#\273\023\213K\274\234\231K\275\271#\036\275\312# \274d\335\206\274\343\217\201=\200\004(=\332\315\211<\340\204\013<K\233A\275\224\304\2229\214\264\353\274\034\345\233:\036\271R=\322\221\204\274-\242\252<\257Mx<\016{5=%\364\355<\31773=w\237\312=\212\242\346\275\352\037(<\212\207a=\371d\255<\033b\300\274\255\027\021\274\006:\351<jDc\2759\310\272\274\032\272^\274\233\372-=5tD\275XX\254\274\327\257\333=\001\306\231;Aj)\275\010\021\034<\252\320\256<\335\024b=\243\263G=\302\\\327=\301\377n\275\213\230\000<O~\330<q\234j\275\244\322\220\274\331\310\321\2750\255^\275Z\237n\275\365\021\225\275\373[\305\274\203\245J;v\334f;\351\033\236=\204\3343\274P\246`\274\036\334\315<J\027\341<\352%\"=\2748\016=q\271L\275\215\252\222\275\014g\362\273\026\034\\=xP\205=#\234s<\3758<\275\027ry\274l\360\r;\035n4<\226\205\t\275\017\023\"=\306\371,\275\216?\001\275\345\250\310\270\334\002:<\344O\022\275S\303\250\274\001\2332\275pRq<&\231\340\274\016N\023\275E@\242\275\251\201\214=\250>f\275\354\264\001=}\000m<\314\2765=Y\313q\275l\004%\2749\004\251<\340|\246\275\0230\001\275\215\002\227=HF\274=\\l\303;\027\341\367\274\204[O=\256\314n=8\326\002<O\334\356;y\343\004=\320/\005=\037{%\274\270\354\024=\255\360\331;\254\226J=J\363\310:\014\222b=j\223\311<!\324\255<G&*\275\036\244$\274\340\327\257\274\027\221^=/\367\200\275vw(;v)G=\024\306+\275\256Z\222\274t\303\352\273h\353a\273\332\322\221=J\215\242<%\024\211\275\325\016y\274\206\030D=)\253\224<\271,\273\274$\366\271<R2\340=Y\363\364\272\336\236\013\274\326\266@=Z\330_\273\215w\347\273\025\217l<\304!\025=i\277\245<\234\313\036=\206;o\275\310p\272;\304\\r:\000J\215\274RU\010=\333\200~\275M\375\314\274\034\277i\274\230\251|<\334\261\305=`\016\241<\215\241q=\312\216%\275pV0=\034\340\251\273\037\262\222<\202\236_=\030\t\226\275\377\034Y=JIq<6\350\226\275\236\257\227\273\236\022\033;)\254\215\274F\032\256<\343%\225;P\350@\273\263P\260;37\316<\003\252\030=b\250\002\275y\212S=/\004\253=\304\203\304=\200\264\216\274\226l\203<\343\263X=\034O\233\274\242\226\230\275Q\333\322\2728I\240\274\361&\017=;j\354<0\231P\273\325Z\204\275v\235e<\372\211G\273i\225\224<\336\301\230\274\350\247\020\275\275\377\337;^s\351\273\364>\026\274cb\253\275\356\314\303\274#4Y<\2100\206\275\214*\227=\033\341/\273\207\223C<\347\330|=\2259\202\273\025\3667=\214_R\2754\tB\274k\221{=\376\222;\275\355\302,=\3576\246<\220\211\365<\324S\345\2736\320 \275{\227j=;e\246\275\341<\340\275\271S\301<\353\177\244\274v\251\263\275\263+\352\273\0013\315\274<\262\225;S\306a=\263\003\266;\316\025\034=<\345\320<9\022\201\275\212i\000\274\232`\003\274x\372\273;\370\025K<\206\203\210=\t\347\355<\216\263\327\275|\265\225\274P\330)\275N\363\312<\"p\236<\2677\\;\244s<=/<\034<\353n\033<\212\363\310=;\245W\275f\347\262<l\247\246\274\362\377&\275\343k\"<\013\020g\274\274\275\216=a\335\232\273\034\243Q=\340\343/\274\246\210\257\274\177\024\000\275\361\2043\275\021\372i\274\327\177V\274,\376t=\021\315==\032<<<\236\017\030\275`\005\365\272\323}\240\275\212\206C\275\362\000i=\273\253\242=NN\233\275\2111\224;\016\264\331\275bT\234=\366Nc\275\034\370}<\010\372\370\2749\341\362\274\254\330\022\275\0149\345<o\020\256\275`\364\021\274/\333x\275 \253M<}r\241\273\246\206N\274)\213\020\275\372D\211<\020\351\336\274\014\206\021=\220/\006=h\316\203\273W7\214\275\360\231\347\274\246\305\216<5\3023\275\312\306\013\274&\350\270\274{\266\262=\227\2231\275\216@7=\025\354\326\273>vG=\361\337\256\274\t\343\207=`\274\217=\257\266\035=\267\232I=\030\341\033<\3152\246=\361\346N\275\374\n\347\274\337D\233\275[\001\333\274\334K&;C\244\273\273\236x\035=\352\202\302;Pt\301\274\0318\231\274\200\223\301\274+\276\001\274\337c\262<\274\037\241<\311\234*<\273\226h=\017J\"=\2364\346=\370\335h=i\224p\275)\002\254=?\361d<\264\032\353<\005J^=\323\251\007\273On\006<G1\370<=\236\242\274X\303Q\275\317\234\026=4\205#\275\307\003\355\274\t\035\031;\305\372\323\274\267sP=\220\366h\273\222\275\034\274\001`\265=\221|\251\2740\177\210<0\t9=\340\025\t\273\266\020\200=\330\221\226=\210\t\362\275Lv\231\274\256\224\377\2748z\\<\222\303y\275=\246o\275\326\3205\274-x\357\273\356\362\273<\306\351\t=\013\235\356=\237X,=\340Bb\275 \326\212=\202\030\362\274\301\016\n>n\005A\274]\360\241<\264\310\246;\\8]< Z\266<\266\215y\274\177\250\007\275\202\323\365\272{\355B\274\025K\003={\226\237\273\276\347\032=\207\230\270\274|\216\233\275\274\257\262\275\241R\221=\211WV<\3307=\275%-\317<\256\256\005=t,\225\275\204Zk\275\275\204!\275\322\022\232=\023\332T=\220rL<\257\317Q=\020\313\013=>p\255\274\363y.=\002\312\253\274\007\243\005=\316\230<\275\021=\202\274\344%\246\275\031EC\275\255E\344<\202\374\354<\263c)=\312|\222<\344\275\265=\266A3=5X-=P\337\352<\315S\247\275`\267\243\274\002\326v\274C\014\331\274Dqh\274\250d\211\275m\241\355\273@\233?:1\343\246<\304\243G=/\\\205\274\343\270D\273a\211\211<7k\023\275\346\242v=#\226H=\322\3249=\t\273:\275\220G\352=\"\3375<U\247\023;\244\'\246\275\347\321?=\205~\026\274y\231.\273\317\033\377<\035U\343\274\200\331\370<*\270\203\275\324;`\275]g$\275\214*p<\257\354\267\275\250\266\236=\260\026\001=j\304\202:^\204\207\275o2a\275\240\270@=\265\377\204\274\261\000\003<\000|\325\274\023\262\003\275 \231X=\306f]\275\177[b\275Yj>\275\303De\275\253\215\210\2740!s<6f\315\274$j\t=\312\251\325<\251\214\225=\361\366M=\270]4=*\313\002\273|~\360<U\326\266=+J\225\274W\244\026\275N\211r\270\244\004\352\274\200\360\204=C\257\275<\2034\231\273\246\256\220=\005i\363\274\242\234G=K\013?=a/\352\274\331\006\\\275\377\261\347<t[d<B\351*<\002\340\000\276S\351\252\274\350\202:<W\227\212;M\270w=c\004\201\275\013\366\316\274\360=\355<\177\014\210=FE\t=\003\332\217<\342PL<\305o\003=\325\242E=\223Ej\275xG~\274\"Q\346\273\245\373^=~\322\207\274\231\327\036\275\236\360\314<(\007\203=\006h/\275\274\225\233\274<\322\300<\314\376\365\274\364\020\311\274p\243\311\274\337\310G\275\273\304\314<P\241\311<e\036\327<\\\236t\275\262\007\225=\270t\r=\006{\326<\230\226m\275\321\177\335<\316-\237<\003=\242<\271F\275\275\353\225\003\275\300\3279\2736m\036<\364\205A\275\226\271\316\273M!\034\275M\037\346\274\252yO<\222l\244=\"e\277\275\303\223\026\275\337\214\276=\364l\310\273\323\331\026\275C\016N<a\302-<>\t+=\217\302\005\275\265\223J\275\327\312\r<\376\263\232\275\023\2367=\236B9=\252\310\347<\257\233P\275i\217\311<\\\333\"\2747\225\316<\343\306\326\274\236\004\277\274\353\324o\274\037\262\241\275#\007\016\275\345\262\360\274\301\365\207<\342\220A\275_\342\320:\013\225\247<\240\227\036\275\222\242\272\273\002\306\217=\221g\030<\237\221\236<ag\330\275bmZ=\324\372X<\207\277\222=Il\260<\332\260\341<\352\240\205\275\255\353\253\274\222\024g=\307\244\335;\002\313\206\274x\265\216=\0068V=\n\037\221<\363\334\005=\230Sr=}#\371\274\354[\266<\252\245)\275_\356\010<\"!\274<\330\021\211<\343\222\316;\222~\246\273\026\000\017\275\306\002W<O5\334\274ab*\274\335\231\223<\227\373\244\274i\341\254\274;\002\032\274$\233\341:<cd=\221\253_\275\033\026\325\272oeI\275\275\025r\275\265\017N\2753gE<\370[\322\271\024\350\022\274\235\321\232\275\300Q\231;\010FX=8\260\234\275\207\235\215=\306,\311\274\203<\361\273\327a6\275\351\036\310\275\212\230\240\275\321\2652\275\000\3141=\010sA\275-\020\227\275\340\302\214\275\377.l<\265\036_\274\234> ;2)X\275\276J\t=[\242\031;\240d\230=\005q2\275\237\026\211<\352\317\204\27526x\275[7\313\271\212\312\323<=\234\366\274\037\037\320<?-0=\227&T\275\004?C\275\333aQ\275=\332o\274\321\346u\274A\360\002\276\261-\354=\232\337\236\275\341\334\327:\2354\371\274\037\314\227;\031C\375\274\020(\277\273\310\330\215\275\307c\221\274\230\373\n\272!\"p\275\242\310.=\373r\r=K\273\355\273\305JR<+\254\201\274x\337X\274\036\017\340\275\342\341\375;J78<\230\017\242\275\220*\002\271\n\3260=\222!\027\275\222\372\n<\327y\275=F\243m\273\277\330\031\275\362\031\007\275\334f\271=\314\335x\275\266\031\034\275\344j\001=\321\224F\275U0\010\275\231\2330\274\014\310\'=\005\003\222\275\303\007i\275 2%<\310\002\262<=\271i\274\233\324\343\2742[w<\"\027\206<\261#;<\230\240\200=\362\351\236\275\234\265\367\274\366?\211\275\341\022\312<\301\244Y=\203\004\222=\337\\\223;(G\360\274\020\317\247<\201\352\227=\223\335\207;\246\210\004=\025M<=X\244\3039\254\246@\274E\024d=\341i\026\274s\002Q\275\247\236\207=\246k\n\274\252\2610\275\202\231[=\241\237\022\273\377~E=\370\332\343<t_\234<\351*?<\304\'\325\274\235\177\275:\220\267A=\230U\371\274<\347\301=n-2=\322*\273<\216\222\021;X\362f\275\005\333\037;\213\t.\275n4\333\2740\000\222=N\033\237=R\350\035<\232L{\275\226\224\264=\227\360\246\275\005C\222\275\367\331Y\275X+\223\274I\216\314\274\326\303\024=\335l;\275\t\342i=\213\327\347<\345\346\317=Mi\245;\031\262\353\274\206\237\201\275j\356\206<\225\212\206\275\363)|\273\001\273M\274\213\204\r=\276\003\300\274\003\362\203\274\207l`=M\251\267=\022=l\274\017\250\200\275\362\340\006\275Q\324\036=\355\002^\274g\356\215=\351\317]=\177\252\274\275\3319\242=\".+\275!\022\210<)h~<\0104\325\274\3014\311\274U\266l\274@\227f\275}\343\242=%\265\262\273e9n\2755\177\324:\023\245u\275\266\205\255\275\376\242o\275\nH\023<z\031==\002\035\327\274\351Z\021\275I\307\233\275;\236\224\275J\371\337;R$\261\274\325\236\262\274\352\021\t=\353\0252\274e\036X<\206x\265;\200\336:\274o\3472\275wn^\275#|F\275\305C]\275:s\002\276\366\023<;\021\200S\274\265=A=\036\250\362\274\272<d\273\310\251y=\300\322%=\263\261a=\352j4\275`\203-\274\3537\020<\375\030\r\273l\262:=\216\026\026\274I\014^\273\204\201\335\273=\035|;\233fv<\361\274\245=\016\256s\274P\t\207\275\200\324\032\275\215\\\351<\205\037\037\274\002O\272;\372`\322\2742\327\250;\217\302e<\305\211x<P_\302=\264FC\275\257\323 =N\271\230=\0363Y=\177\327\275\272y\025U;\271*\203\274nd}\274If\257\274\315lS=\243?\340\274\344j\367<PV\217\274\366f\013<\221f\3679>@\223<\305\316:;s\203\201<\326Qf\274m\316H;l\017\222<\332\034\344\275\304>F\275{\372`\273\026\257\333\274\236\370t\275\371\271}\274\215\343y<\347I\355<vU?\274G\310\301\275R\307\227\273\372\013\240\2750(\025\275Ie!\275;h\373\273\206JX\275\0060%\274\266\213\213\274\311#q\275\250J\236\270\210\342>=N\333\335\274\317\n\200=\247)\257=Ip\213\274\375&\250=r\266\021\275\361\203\016<\224\234:\275\n\305\010\275\334\306\211\273lX\213\275\305=(<\034\036\000\275\021\376\277<\241\233\201\275R\340\010\275\326\357W=\030\203X\274L^\2729v\264\203=ly\017<\323(\032\275UM\271<\210\r\275\274\354<\246\275\365\376\'\275\274\013*=\023\2544:\000\037\323\273\221\371\202<\316\3331\272(2\200;Z\352\031=\\\257)\275\3469O=\242\205\016\2749\027\n\275\003O\302\275\277\325\331\274\3158\345\274GqK<8\244&=5\331\254=R\340\001\275&\244X=8\250C\274-\200V=<\372\377\274\r\254\264\273m\263\001<\317\266\033=oI\266\273\345.\016=P=\256<%\335)\275j\255!\275\r\032N\273\335\035\r:\3678\200\275O\304\021=\276\022.\275WoA=Z\3060=\272s\017\275{aO= \336\304<x\272\236=\364\276\311\274\315\330\r=\341\246\220\273\235\313\275\274\206HU\275\025k\265\274\212\306S=\332f\246\272\007\263%<\250\352[\275\234\352\232=\262\3159<|\373[\2757\320\213\275\312\004\322<`\376\215<G\227\232\274\021\2132=\225%\363<<\352\031<\210R\207\275C\214\211=~\303\024\275%E6\275xnt\273\2346\373\274|\202\227=2\n\312\274\374H\242\274\354\334\305\274s\030/\274<,\036\274J\010I=I\037\202\275\302\002S\272\234\035\331\275O\t\257\275\036\262i<\r\r\006\275\240\376\243;\357\331C=\355\300\273=\217H1=\036L\267\273b\352w\275\037z=\273b\307\340\274X\354\334<\036\303\277=\367\277\007=\262\277h\275\365\224\027\275\343\245\336<\261\035\327;\260\201\006\273\323\301\271\275\002\333q\274\2222\t\275\037\007\220\275@\273\376\273\361\276\244;\271\031\010=\204H\252\275\007\214%\275\256j\205=nY\004\275\2333`=\376\366\232\275\353\366\226\275I\277\254=yTa\275\264\214\362<\3010\307<&\355j\274I4\227\273\3228\250=]\327_<\025\355)\275Bg\267\272]\311t\273\036\215\025=H\374\253\275\326\375\326<\250U\';7\243!\275\351\255\275;gZB\274\370\376\355;x\005h\274\274DQ\275\224MA=\354\031G\275\206\342\215=|\036\265;?N\231\274\313\321\204;\215\201\024=\r\274\243\275\010\223\355;3 \020\275Q\343\000;+\211r=\241\3524\275\331DD=\310\001\013\275\371\346==\002\2767\275\026\223w\273S\0059<\n\017\215\275\247\035.\275\311\236\021=\006\253\377\274\224\337\346:\033\350y\275\301\363\367<\251\026z\275ji\225\273\203w\235=\341Y\033\275\364.E=M\274\024=\311\370@\2754%\206=r\325\n<.c\200<w\227\004\275^]b<8\037\032;d\021\031=\230\373\020\275\3579-<?u\257<O1\227\275\262\302\030\275\347>}\274\213\234D\275h\017\373<$\273\275\274\222\025\375\274 \267`\274\343\342\261<|\244\300=\254*\313\274\220\213\010=uO\252=#\244\003\274\246:\201=\213&\313\274\323\344\t\275\322\252\221\273\302\\\030<\357\206\206\274\255\227\363<\014n\277\273\342\330c=jR\r=S\233\n;\322\225\014\273\232\317-=\214\006\344=\363\032\\\274Q\376\231<\354\331\356;\331\212C=v!\177\274\267\247\205\274\227K\037=\301\366\346<\306c\243=:\234\345\271\342\027D=\276\203\354<F\225\000=\226_)\275\325\372\036=\023\t\204\274\231}\244\273\302\273x\275\271\270y\275\211\303[=\264\206v\275}.C<\330\243\266<\304O\017\274\211\310\225<v\377\203\274\016l%\274?\235\213<\317\325;\275\257\245\341\274\317\031\201;-S\005=V\t\021=\376e\006=\367v\321=\235\336@\275\241\306\324<\242\036\236=\255\010\330\273.x\027:$\240\214\275}\321e<\024\230\203=\340\234[<\217@\205=\237\337!=\'\346\217\275hR\245\273\357\246\321\274\n\267\203\275\215\335\204\275\302a\206\275\026\005\343\274\320\216`=\037K\306\274\3262\272;/p\211\275\373 \013\275{n\310\275\033\203\234=\034\216l\275:\206\005\275\230$\223\275/\322J=\213\037\227\274\304\243\022\275#+.\275\304\272q=g|\307<\330L.\273\264V\205=x\314\314;\310h\247\274>\240\303\274\371\302\363\274\254\r\257\275r\241\307\274\356QS=\227\017L\275t\"\014=B\262\025\274\266\213\016\275M\\,\275\336\205\272;\021\327\034=\361`z=8\020\003<\013\224\233<B\204,= \266i\275\377K2;~\276\007=]\030\273\274W\rs\273\305\271\007=\265\257\203\274\325\371\304\273\003\025\033<\206QL\275\025\227{\275\372\340\217\274s\261\227\273\022\274\257;\006j\332\275\347{?\2738\370\275=b\0013=z\0245\275U\223\'=\351\033\324<\237\352\037\275\325\231\220<4\013\302<\324\316\347\274\260\036\202\274Px\330\274\026G,=\004\272\230\273\332oX=\205p\025<\367\373\023\274p\364\302\270GD.\275\373\212\305\274\364\237\010\275\003\3609=9\265\213\274\"\033\002\2759\016v=V\272\345\274\266f\226\273)M\007\275\324\253\350=\342\310\230<\215\322\017\275\026\366\376:\323\321\\\275\242@\036;@\211\024<G\366\233=\275\362\332;x\221(\275\316\263\276\274\3556\237;\334\241\356:\214\214\017=\234:\216\274\321\346\320:\014\331\335\272\000\253\206\275\335\341*=@(\031=\351\361`\274\203G\234<\370Q\214\2753^\017>s\336U\275\272\364\324\274\255SF\275\351Q\226\275\371D\211\275\025\352o\275\374P)\275\036\226\362<\2750\257=U\361\245<\240\366$<5dJ\274\372\212\371<\201r+=\216U\014\275\261\341\336<\017M\370<G\021.=\304b\243\273w\337\305;W\"\001=\004\234\320\274\325\264\220\275&wV\274F\r\177=\214\366\222<\207\217\"\275\306\360\037\274=#\013\274\021\254\200=E\310\340\274\366j\370;\024\025m=\365\256\010<9\367\014<m\270\236=(b\r=\304U\220=\267n\231\274\315\216|<\267\301\264\275\032\236,\275\241@E;E^\314<\324<\347=ya\302<\275pe\275\260v\033\275\373p\310=w\255{\275\245R\313<Z\346\274\274\332\224\217<4\261\001=\201\0175;0\317\242\273\373\013\202;)\3229=\270\261\035\274\232\037\367\274\261Cz\274E\206\376< qy\267u\'\250\274X#/\275\010\236\327=4/\272\275\217O0;N\334\240\273;Z>\2751\243\023;\247\267\233\272\247\200S\275}\331\003=E\016\272<\226|.=\301\332\301<\216\233\217<-\250\006=\371?S\274a\334v;DE\227=;Q\252\274b\345\373\274\202\260\232\273\266Or<\260\347\236=\365\316\352\274Q\253i\273\211\224_\275\274\232$\275d\016\276\274\354\371\263\274$\326\361<\232\241\321\274\377\214n\275!_\200<\007$\350<tp\227\273\265%\025\275\203ff\274[\370x=8\013\207<\304<\372\274\204}g\275\356\305l<*\267\357;\352G\"\273\227\021\216<\276\333\021>\313\326\372\2731\237\363\274)Y\233\274>\254\271<{\256w\275X\234\001<\224\031\014<\356\233j\2756J!\275!;*\275?\345\274\275\236\030\255\274F\"\253<\377c\246=\215\276\233\273V\200\250<S\n\201=\337P.\275\344w\377<Y\206j=\024G\350<\231\215V=\2626m\274\314y\023=eDo\275\032\366\255<\206\035+\275\364[\203\275\026\222C\275N\013\332\273\254YS;d\037\016>\202\263\366\274\312_d=\034\022\263\273st\245\274\0257\374\273_\267\027<\246\2032=\362\341\300\274\263\'\n=$\021\000\275\302,\220=\276K*=y.M=m\177\232\273\207h\216\275C\240\325\274\354v\277<z\346\215=\274m\262=g\003\031=\214\306\363\274x\260N\275\007\216/<\354\313\256<\252\326\207=\007v!\275\314\273\357\274}\225\264\275\335\364l\275$$\211\274\324Y(<\000;6\274\202[\031=s\030`\274\350:N<\201~\262\274\273\215\222\275\215\362X=E\037\036=\016\226\321<\003\232\027\275\t\305\213\274\016[\n\275-\243\250=X?\231\275\260\2523\275\365\337}\274\314\327\345<\2266W\275\202Zr\274\335H[\271\001M5=5}h\273\365\326\305\272ziZ<\341)P=\023\034(\275\033BT\274\\`.\275\257\n%\275.:L\272\351\2675;\034=O\275j\240}=E\025\031<|\267~\275\272\221\330<\r\271m<x\216\365<e\225h=ds\006=A\275\256\274\3374\206\272\rKU\275\374|\242<I\233>=\271\273<\275<A\320<\247\377R={\307\035\275$\311-\275\027}s\274\261\374\242=$\237d=\t\373t<\2154\027<\002\306\372=\\\347\026<\\\014\342\274n|\206<\227\201\233\274\362\022\210\275\244\223\272=\365\271\337=\303C$\275\322t\200<\r\005(;\227E\303\271*\256\222\275\332j\335=\024\271\365\275j_\3319\332@\335\274z\274\225\273\331\0347=$k!=[\335J\275\n\345\223\275\334\272\202\275Z\365\346\274\352\373<\275M\313\253\275\226\305\220\273\300}\214\274\213\342\200\275\305\232\227\274\217\274]:-\006\253\275\205\000\010=\355\025\350\274\324\225\313:\233\203\232<\234\256\r=\214b\005<?\243w\275\320\257\305\273\231\276h\273\200\351L\275o\t\r\275k\370\025;|\235Q=\215\036\005\275@I\241=\300\373G<\230I(\275W\347.<\032B\221=\300K\274;\002\215\t\275\223\342.\275\r{\025\275>B0=\031\003#=0\262\277\273\233P.=\276MF:\310\347\257<\206\006\304\273\211n8<\2775\t\274\361\330\t\275\307\360F;@1\234;\236\016*=\215\267\215\275\256\301\024=\214\307\271;\324\244\305<\253\021\255\2735/\224=?( \275\376\270\227\275\026g\266<\320\370\316\275\221\332D\272\201\204\223\275\020\242l\274\2141\034\275~\305\030=9\361\002\273\305!U\275E\203\206<\253P\025\275\346\2021\275\002G\203\274\352\220\252\274\216\236\274\274\336\200\256\275\240\211\363<\263\r\344=\250\261\310<\327\366\260;\301\260V\273\324n;=\216iG\275\222\363\036=\365\337\347\274*?T\274\212\312<\274\257\226)=\232V\231=2\256Q\275)jd\275I\016s=\316\234\207<\213\362\272\274+\222\033\274\341\310B=}\033g=o\345\264<\353\263$\275\323\021\245\272X\376m<E\031\345=C>\234<}r\207\275\3525\202;\232\030\232\274/\242H<\303~2\275>mQ=\242\357\253<*c4=\347\233h\275^=\312;\236\035\305\273F\257\013\275\345\355\025<\031\324\265\275ywn=$\211\274\273o\253j\273\007W=\273\217g\235<UU\365;\276\023J<\013$\254=n\002\326<\333\352\225\275\300\237\347\274\224\003-=\301\351\215\274\002\000\232\272\273\031\206\275u<\204=\347SO=\366\357\250\274!\336\233\273\002\010\235;\2128\322<F\234\002\274\215\231i\275\265O\300\275\336\274\017\274%\240\247\273\355\244\317<=#\236=1\031\361\273\246\360\304<\210\210\033\273\367\036\301\274\3123\276\274wB#=\326i\234=\316V.\274\205\034\216\275u1[<a(W\275pN\017=7D\007=\246\366\247\274\n-\354<> \217\274\371\305\201\274\332e\206<\253\345\221=\3206\211=\322\006\370=\303U\024\275:;\244<\334\272\230=\3229%=\236 \034=\"\026\203=\345`\240\275x\026e=\255\027!\275\030\245P\274!\267\330\275\022\253\352<m\221\017<W\254\020=^\334E<pX\244\274h\035\007=\034\263\267<\t\204\226\273\346v\033=\247}\251\274fo\310\275\274~O<\274\214_\274t\270\342\274d\327\300<\327hE\275\274\307N\274\230\273\216\275OV \275\333-!\275\225;b=\322\376\363;\356\333\245\274\373\314j\275\304T\307<Y\321\227\275\002\036U\275\007\332\212\275\2163%\275\306\342\375<\252\274t\273\247]\037=:\366\323<\230\3212=DF\3719\261x\003\275S\006\312\273\002!\302<Z\"\232\275\305H\005<\272\312\254\275\005\340\372<9\244x<\371W(=6)\t\274\324\310\331;l\036\363;M`\037\274:H\226\274\224\031q\275\356\302\341<\014\204h\275\010}\254\275p\007\222\275\326\272\264\274\265\360S\274)\335.\275\2565G=\245F\230\275\322\363\375<(\337\226={\371x\275@b\n\275\342\335V<\377\204\236<#\264L\274\356\213+<\033\000\225\275t\216\217\274\363\321\316;J]c\275N\257G\275j\235`\273\236\314M\275\233\244\323<J\337\243\273y%\243\275\034\261e\275G\253\372\273o\004\344;\256\372\021\274\374,\002=0[e=@H\r\275\256\324\234\274\005\006\362\274\r\2322=\251\212\032<\310\255\273\275:\327R=\345\036I=Or_\274!\355L\275\n\003\001=\353\303\304<\017Pa=P\244\325\274x\202\245\274\000e\262=_t\360\274\304d\232\275]\336J=\030%\236\274\002\332\251=f\210\034\275\300\212\034=\025\334\216\274\366\001^<\373F\000=\353\355(\275\273\003\021=\354\254\300\274\322dt\275Z\265z<y_M=\001h\000\275\302\033\010\275\276\360\314<Y\367$\275\033\202\352\274\r\201*=\256\314]\274\314\337\215=&\251h\275\013\310\347<-\2621\275\370%\205\274\344\241\032=\357q\003\275\363E\274\274\263\356:=\354\357\266<1\200I\275\010yt\275R6h\275\322\341\211\274\214\030\304<`\3544=\234\037\017\275\240?\014\275\273\303]=k\360\356=\005\371u\275\326\210\t\273\030(1\273\006\213\036\275%`\274\274\0131\236\275\\\373#=\212\203\344\274\326e\330\274`9b<\221\246;<\207\270\353\274\222\351\275:\203\367[\275\271\210\022=\322O\363<\'\275p\274\277\360l\274\037s1;\'\305\332;\3549\220\275\313\236G<\371\026\246=\376\340\"\275\270\266\225\275\020~)<%=\271\275\302\342\357\274\273\247\033<\324\310S=9\206\210\275\020!\235=v\345\264\275^c\026=!x\223;\224aV\274\272\271a\273T~x\275\267\201\333<\317\215\276\274\355n\314<`\227@=\311\217)\274vL\264=\203\177(\274#\245\024\275x\306\273<\214\303\205<\273xI=\356\315\374\274\0320\307\274h\001G= \023\030\275\215I\001\275\304>|<|\313X\274\032\223\244<i,\206\274\034w\236\274\331\033k;\272\321\350\274\351\202\307\274\212\223\215\274\247c!;,\232m=\240\242\321<q&*=\273,\014\274\021b&=\264\200A;\305\371\212=\312S\354=\244\352,<q\332\340=,V\374\272\247 \355\274\271\017\221\274\355\003\213\275\3539t\275\361\211\200<aZ\230<\206\227\347\274*9p\275\030\246#=\326\343?=\233(\211=\003;\307\273\331\261,=\365\026\216<\376\253\237:\253\371-;\271,P=\257b\263;E5\247=\3236\005\274u\030n\275]\232\201<\204\010\201\2732`n<+\n\005\275\373L\355\274\252\016e\275\321\215\230\274\255\264\352=\274\344\310\275\226\272W<\2368\370;\235\237\036=\375\342\241<\026\334P<\002M\335\274\204\035-=\243\361X=\362%\306<\3635\205\275&\316\245;|\366\315\274\277+\356<\033\306 <\267\246_\275\n\254\337<\345N\336<\204\356\215<|z\334\273\301\260\341\274\273j\343<:\263 \274\262\250\210=G\227\273\274V\256\026=\335\211\307\273\371\0015\274\305\342j=\177q7\275\251-t\273\266\213\306<\272\312\031<\363\370c<6\026\030=\361Sz=$X\273\273\325]\034\275\244\366t\274\201\242\312<T\016\260=\242\252\201=\224m1=\317\001\236\274+\216\247\275\263\200T=f\016j<I\334G<47l\273\221\321\210\275d\306\277\273Y\271\021<@S\342\274\242t\t;y\320\033\275W\022=\274-\3233=e`\276<\036\006\204\275G6\302\274\001\303\226<\336\024\035=\216\021\240<&\243\030=\303\034\r=\017S\315;\212\023\034=\376E\371\274\027\257\252=\002\r\\\275\323G\307<\023\035\245=\347\212\246\275\203f\023\275 \225+=^\361\177\274#{\262<\214\336%\275z*\371;\2434\006;\300\270\210<q!\232\274\220\302\r=\344\214/=\025\225\003=V\313S\275\035H\220=\205\353s\274zx\220=u\327V=\336\274\273\274\254M\021=\320\000o\275\315\234\227=r\333\037\274O\232P\274\310\272\020=\035<U\275\200P\324\274Ep^=\033%\014\275\206h\262\274C\243\371\274\207\257!\275s\003(=Y\320\005\275\023\335\001\276\3449\213<\223\313\213\274\275R_=\375n\245=\222/\277;9Q\214\274\207\t\260<\240\003U\274\233,}\274`r\275\275Lr\216=X\220G=\025\006\033\274+#A=$\232\227\274a>\337\274\367\315\260;\312\253\345=\242\322\243<\314\r\034<\333sL=\263\233\275\273\316\263\037=\322.D<\223!7\275\370\372C\273`\340,<E\251\242=\342O\205<\021*\207<\013\371*\275u\031f<\367\030\312;\307;v<*FA\274K\376s\275\233,\034=u\221==yd\334<\240\270\334<3uD\275\251\314*\275\020\'H\275\017>\351=\352I\341\275%\262+>\233<%\275\300\034\'=\340v$<\363\360\353\274jO,=D\r\305\274\271U\312\275\203\240#\275a,\301\270\222\236\220\275\301\251\207;a\264Z\274\302\0079\275?\357\241=67H\275IS\325\274~\265\243\273\\\370\210\272\320\352\223\273\021 0;i$\204\274Oi\225\275\370^1<a2K=\221\250h=\340R\223\274\223\361\"=\273>\246\275\346\003[\274$\2578<\0057\201\274\327\017\256\274\331h\241<\233Z\275\274s\243\002\275\263\033\270\274\233m\333\274\210:\266<\370f\256=\264\356\301=.\330\007\274f\023\242\273\374u\273\274\000\3165=c\222 =\230\035n\273\300\266\357\275i\323b=\215\003\254\273\210\3626<T\004h<0\263\322<N\023\200<\360\263\264\273T\021\211\273RH\310=[_3\275\222\2458\275\r\201\342<\240\357\235</\252Q\275\257X\233;\230\232\236=\255\021\204=I\303)<\222\315\265\274\367\217\024=.\034\002=\322t\220<\007\336\013<\227\017=\275\311\347\354<D\312\035\273\013\303\201=>6\231\273~\2411\275\205\034\356\2745\240D\275\261\352\035\275V|x\274\326f\026=\270\346-=]\301\212\275z\022\037\275s\242\206\275\244;\204<\215>1<\nzi\274\372K`=\017S\035=a\013$<\323Xh\273\315\035\223<7\367\214=-\213\260<%1\003\275x\323\265=o\t\300\273H\341!=\322\322\265<\003\025.\275\330P+\274\032r\252\2742\246\217;+/.\2757\022N\272}\307\226\275[\306,\275\033\233)\275\367\332\325<\330(F\272\204f_=\3726\345<8v\r<G\201K\274\\X\350\274\345\025?<l\220f=\212|]<|\353\036<q\013\361\271(m\236;\326\364l;\033@\231\274\004\346\320;.\301\240=\037\027\333\274\246\217(\274R\023\251\275\351X\262=\212F\250\274\360{$\275X \326<_\322b\275[\237=\275\212\031\035\274\252\357\376<\0070\256\275\227\201\025\275\267\360|\275[\014$\2757\031\305;\272\266\007\275\350b\205=\017\244\250<\224\264\022=u\304\021>\200p^\274\257\003\304\274[\226\031=[\267/\274*\311\255\273\262\256\300=$\177\025=\257V\270\273U\321\224\274M\307D<\021\037g=\343\005\300\271\264\313N<^\200\216\274B\346D<\363\000\307\274\221\337_<8\2112=V\247\314=\'\324o\273y3\330\275\211\336?\2755\365\344<W8\345;\342w\311\274\275\314\363<f@\225\275\025\344\204=\335v\244<\322Y\005<\006q \275yti<\0367\267\274\031n \274=\022\325\272._\332;\215\033\206<lF\324\274n\303\036\274\355\220\032=z4C\274\375\241\177=6\333\222\275\205?\025\275`\003j=g\215f\273Kr\242=\233\007\006\275kh\203<\222\317\035=r\3538=r\310b\2757\265\210;%\223\262\274\243\023\334\274\r\\)=\2006G<\005\255v;\205\202\245=o`\251<\324\013\314\275<\275\242=}^\t<\0231\223\2730\302o\274l\265\023=\333s\023\275\237\252i=\010\321\025=\223#-=W\217\031\275\231AZ\274+\313\303<\256\224\256\275\021\007\247=\221Z\363\274\253v\201\274\374\264\247\275\317\362\030<\350\247\014;D\355\'=\360\322\374\274\323\2424=m\016_\275\177\276\217\273\374\335\354<4\030\000>\007w\257\275p\0238\274d\241&=\000n\300=AF\216<\356\333\202\274/\220\177\275<1\203\274\335\031W\274q\365\311<Qc\035\275[\367\352<Sq\256=\243\301D=\352\213\313\274\023\337,\272~\253#=I\361\r\275\002 \036\2753\2233=\027~\002\274\\M\017\274D5O9\370vg\272\374\203-\275\010\320\264<9:\320;\357D{\275\373L\244\274\261Q;\275?\333U\275\303\334\262\274\344\360\335\275\311\305\360;\206q\026<\264\"Z=\307\206\253<^\215\270;P\306)=Q\215\254=\201\3731=\2138\352\274{F\235\272\265\030g\275ky\037\274v\264A\275Fo}<7?u=\235\374P\275\025I\021<\223\341\231=s\360\342<Q-\342<\001\010.\2743\005\036=\233\"1=\222\223B\276B\363\231<\336\3554<\366@K=\226\257F\275\205\256\357<J1~=\r\262\271<k\222\223=\002\031\016\275@\325\351\272\360\253\367<@\347\240\275\216\302\314\273\243;\217\274i`\241<i\313\213=\201rF=h\257\010=cJ\371\274\331!\275\275\207k\317\275\301\035!<!\3508<U\t]\275\355\220\271<\n\343X\275K\325,=/\330\271\274k\233\364\275\023\321\356<k%\031\275:\221\326\274\036\017\033=33e<\037\253\227<\177H0=;xg\275O3\243<]_\262\274\322l\022=\224\342\371\274\252^\376:MHZ\273\232\265\204\275\240g\311\272\270]\246<\3362\032\275\260+d=\377;\025<\317\3745\274T\262\017\275\\\246/=WL9<\300?W\275\231X\'\275\2340~<\324\213B=\370\377\300\274+\371\244=\346\344\023<\212v\336<[\222\n9\335\271\"\275\\R\236\275x\302<\275\010\310\033\275\270.K\275\371T\210<{\356\252\275\1777\214<\375+\347<\0361&=\350\340q\274\325\315]\275\326\235\001==k\031\275\222\300\215<\230z\337\274\370\021g\275\301\260\236\274\263\305\321:i\377\217=\351C\230<\325\245\255<\354\024X=0\237R=\026\342T<\337Z\212=<S\n<\250\265<<h\327\204\275\347\324\321\274\206\355]=\257\361!=\013X\027\274\310kJ=G(/\274DC\177\274\315\275\016=X\341N\275@L\216\274\254\320~=\350\301\201\273:\005\007:&\340\240=2\005\324\274E\332\365\274\036\230\006=,\336\350\273\237\241)=\371\246\264\275\217*P\275\321h\\=L\333-\275,\tw\274F3%=i\3321\275\016\264\217\273\312\374\027=\275y\3138\225n=<<\230\232=\031\304\216\2757\274^\274\354\022y\275\213\353\217;&\376G=#\256U=\207\242\314\274\206\313\351<\007\223(=x\224)\275\324\200m<3Q\030;\010Cu\275\366\274\277=\357\245\273=\034}\275<_X\216\274\330\014\317<rI\276<\374\246D\275\005k\337\274bQ\030\275b\265\230<~\270[\2755\r\200\274n\371\301=\273\214\334\274\021pQ\275d\310\215\275\262\233D\275\312\374b=\222\317\302<\274\335d\275m*\207\275p8\374<\315o:\274\232W4=\323\376<=-!\351:\261\333D\275\316OB;|x\305<\373\005\276\275\003\224c\275za/\2749\026\255\274j\313\264<\276\243\231\274|\277z\274\177k\316<F.Y\274{\314\201=;\245\377<\031IK:\376\266\361<\360[f<\220\200\031\274\247B\216\275~^\303\274\365\277-;_\375U;\372\331 \274\034 \023\274\2545\t\275)^\361\273jd\313\2748s\037\274\223R\027\275\273\303\231\275\006\362\027\275\374\013S\275\r+\022=\363\344\373<;\231\216\275\226m \271\273\0045<d\347\224=\214[\270\274\225=\2368k>\321\275\212\240w\275\371]\307\274\336\023\302\274$\023\225\275\317\245\322\275j\000D<\274f\321<\315\347\275\274\244,}\273\342U\20798\370*\275\273\201\224\275z\020D\275\031O\360\274\230=\t<\217\235\201\275\206{\016<A\346\257\273\030I\377\274UsP\275\333]\213\275\177\272?\274\351\2526=Q\255\032\274\326;\235=)q8\273\3009/=Th\324<iB\205<\311w\261;A\362A\274>nj\275\351-\322<ZR\246<\311aB<\030\031\216=D\2320\275\221\023\212\275\"{G\275\262\020\006=`@\237\275\230\360\373\271\302L#\274\371`\261=5\374H=\321U\031=j\\\236=\343\344\265\274\336 \261\275/\001\363<$\377\016<%j[<\350T~=\235\010\251<\235\036\353<j\226\200=n\320\303<\017\333p\273\314\037\004\275\332H9;A\t7\274\211\312*\275\355X\255\274\177u\242\274\373\231\314\2747\026 =\'\262\346<\344\323P\274\367dN\275m\021\220=\270\352\t\275\374\023\314\274\002:\252\274\263\327>=KJ\300;g\250C;\326H\031<#\244\352\274\320y\203\274[\rY<\251@\202=K\256\364\273\3073\211=]DN\275\005\265N=e\013\312<V\255\017=\0019\263<\003\314\216<\377\263\260\275s\203\207<\335|\340<>\020\361\274\021A\221\275\023-E\275g\330\317\273B1\224<U\275\314=\307\350;\275\275\020h;\202\314\t<\264\001\035\275\243\r\3749O\216\024=\244\317@\273\336\303\033\275\230Z\002\274@\237V=mZ\206<U\306g=\037\242`=\344\032]\275\017\021\202\275G)S\271)0`=~9&\274F\034\262=F}#;\006*\014<AM\211\275e\243\231\274\314L\"=\350r\223\274&\374\371<\316\210\033\275\0340g=\005\"\266<\374\217M\275\227!\0349\006\331\250\275\022\302\256<$\177\223=R\204\231<\370\307\211=\361\203\227<\026\004%<\310r\252\275z\306\371\273+\224T\275\220I\027\274E\357W=>\271\224<\251\227\350:+\252\331=\276\017Y\274\244z\'\275\301\262\222\274l\333\014\275\346\221\302=\304\216D<!p\t=\205\255\010>\276\203\376\274\260\025\350\274\224\343\037:-\345\207<To\017=\365\272\023=s+y\275\024k}\275\220pc=?\357\371< a7<\344%\227<\226\337>=\035S\242\275\013\017\240\275\252\214$\275&O\022\275x\233\001\275O\017j\274\205\244\232\273\026,\243;S\027(\275\r>\037\275\225\367)\274\253F-=\307\371\205<z3\213=Rk\336<H\332B=)\230\t\275\2210\357<\257Y\205<^e-\275\005\250\013=e\020\367;8\272\357\273\200\034\335\2746O\366;C\274\322\275\350#\221=\037|\213=D\227\002=\251\000\035\275\271<z=(er\275\224\324\206\275md!=B\263\231\275\327\347\307\274\364\366H<\n\025\277<\332\251\250<G4\214<@\255\207=\367\370\301\275\261\222A\274\206U\334\274\\\302\270\274\346\235\006\275\244\324\300;\345\267\300=I\262\271;d\306\034\275eS+9\274\310\212:\346\211?\275\242\\\025\274\005)\345=\246$9=\214<\252=t\305&=_\002\234=\347\217\203<\034s}\273\245ma\274y$\202\275\311\224u\273\30474\274p8V\275\010Oq\275\017?a\274\201\261q\274L\374\002\275@~\210</\367q;\310\322d\275U\345\327=\034M\245:W\231U=\357\361\241\275\3140v\275\357\007,\275/0\325\273\013L\275\275[.\243<~\217\177\274\324\270Q=VJ~:D\221\"\275;\032\216=-\327\"=\3313\r<wH\014=f\223\376<#@K=\271\212p\275\032x\037= \177\240;\260;\033=}oq<\314\317\005=\217\320\254\274\232;T\275[c\322<y.+<\313J\225;\013x\006\275E\021\210\275\314\003\367<\305\371\376<\017\246\364<\020\360\205\273\203\023\207\275\252\007\273\275\246\210\257;#\306\207:Xn\033\275\347\204\215\274\350\030+\275B\001\305=\247\004\334<T}l\2755\2615\273ne\207=\331\253\311=\341\222\020\275c\343\251\274#?R\274*\245J=s\264\245\274\253\221\365<a\336X\275\0230,\274sJW\275IVV\274\000$N\275Df\303\274\276\014\341\274\307\341X;\247+\331\2748\270\017<!\213(=80\366\274\365Mj=\361$\323\273\342\261W\272\306\327\021<\214\220\017<\377b\370<~\364\231=\026\224g\275\203\014\330<5H\206\274%0\032\275A5\272\273\231Q\010=\251\0274\2756\274\030\272dI\307\274\177\335/\2751\\\225=x\375Y\275\257\213G<\277\322A\274o0\r<\013\266\n\275!\255m;Z\226\362<\'q\253;\211\2229=\256\333o\274\207\354\274\274e\334d<\341\263\340\275\033\304\373\274Sc%=\260\347\317\274\252W{<\2344\017=BTv=ih|\274\362R\236=Z\030\023<\014\376\\=\254\275M<\010\277\346\274\323\337\331\273\371\211\204<l\"\335\274\313\335G=6_\301=\026\351\257<\024\200\227\275NY\372:on\037=K\327R\274%\275j=\005f\\=\221Kp=\263\333v=\220Z\270;\323\243M\275\227D\004<O\035X=\na\'=\331c\252\274\317>\200\274\320\013\213\275PQ><K\245I\274\2062\373<\263\312\225<M\020\261\275\037\034 =\362\310\363\275\203\364\023=\211\203<=\203U\005\275\026\370\315\275\223d\007\275\343\345\004;I\320\306;\355\034\242<\325<\007\2755\274\256\273\224kB<^\352o;TM\244\275\373J2=\023\301\366\274\034\313\262\275\022\2368=\221\037\002=\261\026\225\275\306\201&=\210\005g\275\216\332\202=\003\251x=X,\007\274\256 \202\275\361j\n\275\320\003X<(\370\257<v\217\032=\274X\035\274\'\004>=\357A =\306\237\240<N\306!=`*\346\274\000\0056=\036q\221\275\342\026\232\273\301\332t=;\362\265\274\362s4\273\317\355\005=8\264\027=?\313L=\302\247\022=\362\361\r=\025\335\211\275\202n\010\275\366\0103=\274%v=-\326\014<\312\243\271\274\373\340\337\2749\227\020=i\251@\273\241V\372\271\337e<\275\347\341\350<yC\221=F\327\241<\351\362\017=>q\223\2759\201\002\275b\035\310\272\265f\315\273\344\344\036=\350\305X<\317\034\333\275./\255\275w\027{\275\371\324\357\274iY\355=2\241a=\2164\022=a\372k\275\205\264\206=\205\r\265\274u\232\243\275\326\271\222=\367\316t<\252Vo\275\315OO=\303\216\313<:%\227<s\341\236;\233\005\221\275\017\262\226<\275\'\246;\r{\034<]7!\275\262f\230;\302\327\2769\372\263\254\274U\220G\274\214n\356<d\243f=\312\247g\275 \250\312<\315X\243\274\330z?=\203=)\273Z\275\201\275\331\\9=\305\337\267=q\253\020\275cX\000\275\315S\326;\3212\301=_\3605\275\326\026.\275\177\221\"=H-e;\220\005\034=?\0017\274;\006O<1\262\240\275\213H\033\2752\235\t\275\240\240<\275`\031><?\220\r\275\334l\320\273j\237\340<\247\226d\275\3431I\275;\025k\274\312\241/\272\235\324\356<\206\332\007\275Z\225a\274*1%<\006\211\030\275\367536\3105\214\274\3254\200\2757Q <M]\256\275\017\034\033\275\262\3258=Pc6=o\376\010<\266\212\033\274X\020\212<\212?0\2743\234\253\274\2724\267<Xs\206<\323ET=\356\203,\275\360h\353\275\224\362\326\274\224\274\203\275d\334O\275@!\323\273\217\356\006\275\355\"6\275\023\354h=\232!\021=\236&v=i1\207\275\\\333C\275\304\002\253<\272$\031<X\010\346=m\376\202\274\364\355\357:\032\317\037\275#\233 =\330\220\t=\323\344\361;\026\027^<\372\363\215\275\\\344]=#\251]=\272\264\002\275\325\r\n\272\224?i<\236\274p<\342\235A;<H\026\274Ze+\274\260\275\022=s\000\247\274)\322\243= \243Y\274\223\025\274\274\234$7\275\277\265\t;\241\000\231\272\247[\211<\276\231\334<\341\250\207<Cd\366\274-\214r=nz\200<\275p)\2740ZV\275\277\245\035\275\360\213\243<\351)\367\274\037#|\275s\306\240<\376\260\221=#2\212=\316\026\301\273\'K7\274\toh<\347\204\217\274\246\010\206<m\307\365\273}\273\214=\271Y[=K\335\206=1\247V=5\357|=\000\366\276\273a\265\n<QG\356\273\\vS=\321\353\242=\253>\242\274G\266|\274\017\032\246;R\010 <\275\354q<\237\020~\275}\276\374<T\233I\275[i\307<70\213\275\372\265\204\275Y\020\261\275\204\301Q\275(\352\014\275\224\353B=\332e\203\275\345\256\226=?\317\305\272-S\336\273G\221\203\275\013\230\373<D\240|=\341\246\246\275Y\302\326\274\"\362*=\266\020\202\272\367\352\003\275\222\311(\275d\343\340<\213\222\315<\364\372\254\274*C\317\273\377\202\017=T\255\364\274\036\332H\274g\334\216\275\261/\353;\240\352x<#\202\223<\260\205\351=\274\016(=i\010\014\275\030\350\003=\252\271\266\274\275\272^=\025\025\234=\343\351\321\274\314\2241=\321\340\347<\326\334\355;[\277\207<\240\370K\275\327\246-<A\017\274\274^U\237=\3737\222=\376\000\005\274\273$m\2753\026\261\272\314b$<%+d\274U\372\347\274\326\374\343;\213\376\244=\303\177\010=;\031\266<<\203Q<C1\303<\277?E=\'\3646=\217\370m=\250=}\274\344+\316=U\024\212<\r\034\252\274.\177\221\275nIY=\373\271\226\273\013i\016\274_\r\240\275\311\346\037\275j\2419\275\300m\305<[\006\017\275?\261\253=\207H\036\273\332\2157=\206N%;\265=E\274\322\351\330=E\202\024<!\006/<\334#\377=7\345\334<\311\223\017<+\025\034\274p\266\250\274\244d\266\275!\277\234\274#\007\206=\274\226I=\337\335&\2741\037\264\274vH\246=\232\\\235\275\3433\217\27512o\274M\253\374\274\230v\265=\267\346+\275\300B%=\357\321\232\275.#\257=\354\016L\275\306s\376\273V\016_=\n\036\233\274\010g\245\275W>\304<\037\327\177<W2K\275\314Z\343\274\374p\227=\376$\220=\010\302m<\333wN=u\220\226\275\2650\344;\220\034\001\274\266\334\353<X\275\371<\230\304\215=\210\355\001\275\366\033Z=\353V9\274\002\272\316<\203\333\212=\343\te\272\235J\213\274\210\006\247\272\245\216\274\274\217\3631\275\335\361\322\274\031\200$=\254\217\353\274\026\356\306;l\203\271\275XB\213=t:m=Dib\275\006s$=0\316-=\227\224\270\274h\215\003\275\347\331\207\273\002\200\311\2742\032\016=\224\313\235\271\020L#\275\331\210\025<9\")\275\021\252?<\350\010\211\274.y\262\274\273\325F\2754\317\302\274\266\317\274;\305S\362<\254\265\002\273\264\352\003\274\320\363\210\274\337\226\036=\364\255\">=\224I=%c\256\2740\206\315\273k\211\273\271\234\343S\275AV\266\274c\363\217<\330\346\245<]\034f<f\360\214\275\022\210\212\275\344\333\014=\031\346\215\274\003DU\275\032b.<\322\"%\275\227\371\236\274oc\347<v>T\275jvl\275\340\003a=%\347L\275\2334\243;\026?\003=\270W\345<J\261\374<K<\230<\301\203\224=\206SW=\004\277N\274\305\270\340\274b%\013=\374tR\274W}\224\2746;\301<\177\352\007\275\373r\213\274\304\2638<\325\266\242=\267\253\225\274\217|\205\275\244\203\355:\037\364\014=A\244M\275\2125l\272)\233\241\275:\223\225\275\2674\321<0\004\340\274\345\205#<\307\253u<B\341\352;K\243\306=\013\323\201\274\221\203\000\275\034\311\037;\005\266`=k$\232\274\007dp\275\371\306c=}jA\275\313\315\027=P-A=\242\263\337\274\366e\006=\036\324K=\325^\300\274h5\243\275\373Ed\274\2113\304=\000\001\273<\240\221\031<\353\376\004=n\371\314<\3417\221<\233\226\377<c\326w\27546\330:P\230\321\274\366\262y\275\350\265\354\274\014\306\271;9{&\275\312\245\035\275\216Ty<\233k\221\274\245\373K=\251>0\275\320\223\273\274\376}\340\274\333\377a\275\250]\366<%\316\002=\354\202\220=\204\222<=1s\005\275du\305\273\013\030Q\275\023\301\'\275S\240!=\242\320<\274\232\200\256<\261\276\373;I\007\327\274\374\352\3509\314\327B=l\030\203=\347\"\335\274\333\004\316\2755\3133<\303\035\264<#/:\275%\316\336<\016\325\230\273c~C=U\351\227\275\354\365h\275H\017\324\274\365\202\332\274\351\\\325<\322\234\360\274BBR<k\232/=\261P\371\274\217SF<!h\200\274\037@\265<\321\n\204\274\317\031\027=\267\266S=\333\225\246=\330\036\256<\212\237_=\354\006\237\275!\336\204\275\301\233\325<*/l\275\351\252m\275>\220\375<\037K7<)O\177\275bS!=\323\325d=\317zG;^9\222<\257\363A\275\344\253\236<w\345\304\275p\211!\275\031I\025\275\261\032}:\232\215H\275M&\276;Y\254\301=\234m\235=\362\365\372<\007\032]\273\337\014\273=\363_R\274k\325\017=E\361\275<\321v\332:\302z\024=\207^\347;\035K\305\274M`n=\304\231\257\275\224,\214=\026kn\275\375\346\202\274\263\326\022\274\267:3\275\007\2010\274(Mj\2745\305%\274\343\301\203=LLY\273\331\023\353;\020E)=\226E\303\274\2279-=[\322\206<!rf\275\300\024\006\275\0244\300<\221\360S\273w\274\230\274\327\'G\273X\007\023=\376\214\003\275\245uV\275o\223\236\275{\211.=\223\270\r\275\034\263\320\274\214\375\237\275\210\2620\274\3203\230<\010\354i=\264V\220\274Z\322\021\274=F\004\275\242\353\362<\035op\273\316\227\224=\215\301\\<\013\351\216=.\343\251\275\360,)\275\2462\202\274\334\227\315\275\353f\024\274_\204\232=\376|e\275\302\033\205\275#\245\236=\314/<<\223\346{<21%=\026\371/\275\304\353\247<\263\007\000\275\021\311$<\237{\342\275\263\nx=\365CC;f\301\'\274\263U\203\274\227\346\207<\340S\010=\224\303\220\274[X\222\275\030WG=\232s\242;P{]<J\263\252\275?t\315<\243\225\352<\216\235G=\004/8=\241#\200\275\037\345\003<\226-v;\237\010\201=\250\267\007=,\310w\274\037\002\330<\r9p\274\317 B9\223,>=\321\375\013<\211-\025=\267\272\033\275\024X\224\273\031H0\274Y\242\320<y\213\217\275\304\"\350<\026|)<q&+\275H\036=9<\257\222=l\006\016\275\251\0226<\346\037\310;L\330\207\274[\334\204\274\232\001\314=\014\366\216\275\261U#\274%\205f\273L\327E=F\335\313;_\241\330;\200%:<\001#\352<\337\250\232\274\250\t\252<o\022\t<\342\001\251\272\236\207%\273\332\361\306\274\337\250\267\274\354\364W=\007\020\025=W!\235<\r\350\354=\020za\275\316!d=\357\277`<\372V\374<5g\027=\001\334\306\275\276\220\356<\034\016\t=\216\005\253\275\323K\021;\010\n\306\275\332\2330\275+p\241<\304Y\013=>\000\230=\205\302\342<\230\351\2769\245\353H8\264\372]\275\365H\277\274\2138\352\274\215\n\324;\200TD\274\335g\350\274(h3=\001hv\275,\206?\275\002\374\r\275Me =j\335\021\275lgP<J.i\275\360\252T\275\007\334\203=Z\211)\275\201\242\374\274\356R>\274\325(\354<\270Xf\275\233\314\201\274\001x?\275<\373 \275\312\222;\274\220k\334\275`\346~\275n\344P\275\350Q\331\274\304\353\310<\257rS=\377h\237=\217\nJ\274\201\000\325<\010P\004=:d\232\275\236P\256\274\213,A=\237i\023\275\301\376\230<5\216\265<*<\327\271,\326O\275\202\022\371\273\032\034D=\014\315\213\275\272f_\274\206\3776=x\316:\272\317\356X\275\010\263\241<S\0066\273tGX\275\260\t\257<\352\203\037\275\201\0369\275|9\277\2734\200\034=\205\351\244=U\254\324;\335\220\374<\017$a=J\224\216;\323\005L=A\030\234\274\267\314R\275D\310\205\275S$\276<\246\330\345<}/)\275,D\003\275\376\202\226=\"\335r\274H\'!<\254.A=\r\357u\274\226\263k=n\351\343\273\017\244H\274sit\271\324\306\234\275\023-\327;\343ml<\022Tg\275\037\231]\275\343\244\371\274z\355x=\271\022,=\006G\003=\250\262F=\371\016\225\275pZ\246=\\)\240\275\232\001\241\2730\367==C]M\274m\216\233=E\003\001=\215iQ\2757\314\265\274AA\370<\205\027\251\275\220\tu\2751\231\223\274\230\200\027\275\205K\212=\304X\223=\034\356\"=\341\366\373\274\027x\003=L\2208\275\315\273\346\274\027t\217\2747\304?\275\275\036\210\275e\302\276<o\340\243\275\032\266i<A\237\275:\261\362\213=\331\304\216\274\257Q]=\\\365\307\274,\222H\275E\3651=\035E1=}\330\034=wq9\275K\275g\275\253CF=\326DO=e\353\211=\355>&\275\233/[=\010\023\310\275\312=r\273?p\365\272\26286=\335=\006\275G\257\324\273\302z,\274w0\030\274G\331j\274\370\241\224=\305V\243=\330WL=\344 Z=\034u\366=\355\315R\274dj\341\274lb\022:\334\316~\275\335i\257<y\224\227\274)\006\222\274\017=n=\321\352\013\275\332m3<\013F\216<\'mT\272\017/r=\035\n\"=\"I\230=\006\212\254\274\'\217\251<5\376\016\274Q\025\242<\006\203m;Wm\246<\375Lj<7\270_\275\241\223x=\n\013\t=lD\024<\263]\215\275l,X\275\341\307u<&\345\037<;\346\236=\322\345t\275\272\257\227=\304\261\200=\014\326\032=\304\373L\275/\017\273\274\323{\312\274\235\342\014\274\362\027[\274\255 \355\274\216r\346\274\nt\304<\016\014!=\'\377\333<\034\371u\273\266\301\247<\200\217Y\274U\362\203<\305\347/\275\2273\321<\223SL\274\272\344a\274\206\246\023=\215\305=\275Q\251\232\274:\353\023\274\373\336\203<0D\026\274\217(5<;O\005\275R-&\274\377\024\212\275T\tf\274\001\'\307=\245n\024=b\301\n\275T\001\266\275\276-\252\274SC\211<\267\362\241=\031\363\211\274\234\020\230<\327\203\217<\264\256j;\3564\003=\202)\022=\017\024:\274\266\246\352;\032\326\301<\376d\256=\323~K=\335\2716=u\037\004\275&1{=V\206\317<\323\265\263<;\343c;:\323\025\275_\362\234;Ku\242<\215]\325<\340 p=\377\243\026\275\217\302\026;\226\305S=4j\376\274O\353f=\323\367\022<\022\005\376<g\n\025;XG\354\274\020\207\236\274\023\300G\275\250\026g\273\200gK\275}\026Z\275\330J\237\275t\220O\274K(q\274\346\352\210\274q:\027\275\313`\216\274\317\253w=\\\020\257\274W\256\020<\241M\277\274S\237\003=\010\007\002\275\003\256\227<\005~\332\274\002\354\204:\220\n\275=\265\217\016:\023\277\013\274N\207\315\274G[\342\274\304+\217=\357 \316<\211] ;\201\351\004<\036\274\351<Y\346\310<\314\347==\212\364\016\275v`\017\275\247w\227<&:\262<@\303%\275\177}\013\274\306J\2319[\365\232<\271_\265<\030s\025=\022\204\023:\307ZV\275g\353F=C\313\267<\311X==\256\324\261<\030|\303;\2245\"\274!\"H\275\262p\234:\331L\220;g&\302\274\275\300^</\232\027\275\242^\344<\360\220\315\274l*\276\273\244\376g;B\334\335\274\235,\205\275`\3710\2758\020,<2\\\223\274\236\006-\275\373\177\351<\034\210[</\312\243:\371\370\000=\276\000\272<\232\332\215=a\263\207=\\&+<\331\216\r=\366\276\n\275\351u\265=\256,\217\274\212\016>\274\302\301\333<U>?\275\352\003r=\3454\220=wgn\272\010?j=r\345\240\275!\240\206\273\331\222\034\274N\320E\2753\263\274\274\351+A<\324\245\374\274\217\r\274;\266<\326\274\032\326\305<\262\213>\275\017\303)=\023\243\344<\010\\\200=\036\310\034\275\026@\256\275\335\327m\275\300q\302<\374Y\021\275\323\'*\275]\351\314\274\313H\360\273\333tb<\007\022\342\273\353\035\020\274\351\252\266<!l\226\273-><=4%\230<\331rD<cz\033<\230p\027\274\251>\223<JOX\275I\272\013\275\326\261\345<=\377\027>B\313\371<\375]\014<\307\377\\\275\251\2468\274=\322\264\274cEp\274\257\2318\274\365b\036\275\335\000\265\275BZ\250<~\032U=&\323\221\274]\371D\274\330\241\027\274L7H\274X\314\227\275\'\270\032<\251\001\354<\267\262G=\310\356l=\243rb=r\2567\274&:\225\274\022\340\276\274\267$l\275\235Y\177\2732\010\255\274\202#\350\274\326\021\001\273\273\264l=\001u\330<\0166\023\275\3368T=\n\210\364\273\247\254\374=Z&E<H/-\275\244\372\370\274\020VH\274\267\024\275=\016\320f=\321[\340\274B\224\220<\020\215+\275Q0\"=3\177\250\275\226H\316;`6\013\274Uo\241=\342v\007\275\252\236\226\275\025E\275\274\273K\235\274\306\347\210<\302\033\274\274\312\261\320</=\035<\217H\016=2\262\000\275\343\201\211=|O\256<\357\256\235\2750\213\276\275\324\274\310<\251\027\226\274\222\200\r\276vp\327\275YQ\312<\263*\257=\360md\275ryH\275<\365\311\274\007\361\227\275\22182>:\222\'<wCA\275\312\206>=\242H\032\275>\033\360\2742g\025\275gh\221<#0\020<\317\2539\274\003p\246\275|\235\335<F\210n\274\276\201N\275\256j\311\275\206\365~<\021s\304\275\007y\335=\330\026A\274\240\342\275<gg\343\273/S\344<VO\260\275\317\242D\275 \271\213\275\317Ww\275p\376-=E\231\010\274<.\334<\273Q\340\273op\344\274\306\235\216\275 \352\022\275\336\014\203\275X\265\222=S\224\r\275]\'\316<\250\350==R\307L\274\224\226\031\275\216\320%\274N\265w=\2133C<\3351\023:\340v\336=\205v\242\275^\244\231\274\273\272v=\341\343\344<N\177\027<0\360\004=\350a[=\362\350\214\275\320\305\355;\330/\233=\\w\322<\267e:\275\r\235\217<]\377H=\313\270\207<\347\325\215=\224d\201=B\000\211;\237\022g=\311\332A\275i\035(\275\321\206\331\274\274\214\007<K\232\t=I\212\276=A\033\232\275\366.\t>\027\271$\275E\375\345\274\270\257\010\275\332t\357<\360n\014=\006\030\200\275\201\222S=O\231i\274\016A#\275\353j\034\275fH\353=\004[\206\275\031\313\361\274\207\204\225=\330\211\221\275\275\005X\275\210i\316=H.\225=Bu\372;\243F)<\211\370\363\275\024\272\216<S#\021\276o\037\002\275qr\004\275\'\333\305<l9\010\275\363 \323;\321\010\025\275\344\322n=u\177\364\273\347v\t\275\006\337\276<\2204\340\272]Eq\275\224T\222\275\230\020\335\273\013R\306=S&\001=ZS \275\245\375\032=\025\245u\273\304]\3369\344G\310<\232\246L;T\212>=\nh\343<_\367\263\273r8\345<\005co\275\310{\215\275g\nH=\237\007v\275\304\210\277\275)\313E\2759H\224<Zk\226=\315W\305\274\347\352\005\2754\220Y\275\005`\363\273\354>\351<^Y\200\275Y\2672=\320\276\221=\341\273\215;W\343J=\374\245V=\"\2518<\375G\315=\322\254\274\274A\027x=t5(<\337uw\275\310Kt=@\326X\275\337\325]<\004\035r\275\353\271\264<!\rH<\2227!\273\030\017\222=^\344p=\214\224\r=/\262\2348\225X\335\275*C\274\274\206B3\272\322\240\340\274\216\r\250\272Qv\034<\020\210\202=TW5=\314m\365<\243\224\027=\216F[\275\313\013y\275v.\373\274\324|\237<`\341\031<\201\205\225;\213\272J=\315\300\t<\350\252\301\273(\253\004\274\375\357\301=*f\217;I\006\353;\277\'W<i\262\225\273\316\225Y=\024\200\"\274E\025\247<\325b\t=\265\224T<bu\033=\317\221,;\245C\032\275\007*d=\236\376\300\274\244A\326\274\375\265c<\303\030\363\274b\"l\275\323\360Y\274\376\322\373\274`E\251=\303\235d=\353Q\204;)V}=\254\010\030\275\210\000\r;\251\014;\2749\270\025=\313k\003\275\254+\023=\273\207X\274QCc\275n\302\270;\263-\001\275\355\370\245;\014\202/<\n\237\251\275[\030\317;\023\020\307<\354\0356\274\363{\220=41\014\274\t)\253=8\354I<G\374\342\273\034Z\216\274]\"\264<\261M1=\303-#=\305\256\226=\374\005\226\272\021\253\330=!\313\357\274\005\220\t=\225UI\275W\324\243=\024,d=\365z\222\275\262\234Z\274=f\021=\307\'\327:\037u\302\275\225\303M=\307\236\243\273\014\372E\274\364\204A<l^D=Vt\314\274\356ao\275L\300\371\274\216\t\032=_\337\213=.\3206\275Y\0008<uI\005\274,\305\376\274L\3104\275\016\271:=\250+w=\252\005\221\274!\203\262=\234H\205\273\256\362S\271\212\263\305\273\260w\222\274\261mJ\275\337\025Y=\307|\005=zA\245\275\021#\261<X\346?<]\254O\275(\035D\275\203S\007\275nF3\2749>\026=\226\244\302\274{=\273\271\366\211+\273D>\215=\321\3167\274-&J=\312\207\242<f%\310<\036\020\221\273\327}w=\224;\272\274\027bt8Ac\267\275$\323\221\274\371\267\025<j)(\274\020\034\273<\315\323\272\275\203/[\273\017\250\226\273\230\006\024<o\340n=.\367\211\275\320\031l=\272?\266<\355\205\251=\031\0137=&\215\031\275\306\027-=l\236,=evw\274\204\223\230=\223\207`;\327\203\324\272\2040\332<\307\207s=\2249\252<r\n8\275\311h\232<\236\355\033\274\317\233\321<40\253\274\316\367\206\273\245H\333;\266\270I\275\207V_<\213$\024=\370N\003=\020{K\273yb\235\274F\300\246=~\335(<\365@ <\003/\006=x \274\274\333\327\006\274\351\243*\275\026N\253<\210\331\022=\211\300\360\274\361\010\226\274\315y\344=E\013\361<\013\364\262<\253\271\020=S]\357\274\005/\n\275\005\010\202=\267\013\277<f\014\360<\3338\010=$$\344\273\267\273\225\275\264n\242\275a\320X=\376b\r\274\367\312\003=\203\220\210\274\"\255\227=\201x\261\274v\362\202\275&\324\335\274\217\377\237<\336d\213\274\322\227\226<{\273\300\274\254-\016=%\303\304<a\365>\274X\211/<\022m\274<8\301\375<\374\322u\274\234\034\003\274\3660w\275\022w\037=\357\'\344\274\000\035m<\365\r\306\274\317\334F=\032\260\205= f6\274\262\025G=\277\326\311\274\305\2765=\017\3619=\221M <\372H)\275\"\020\250;\200\204*\275\377\n\300\275\266S\235\274\257\365\301\273\276;\276=t\006&\275.a\377\274\343\366\034=\313\251\024\275G\312U\275\304\363\235\275\001\202\307<\335\261\022=h\250U\2748@\233\274k\300w<\315V\033\272s\354,\275j4\025\273\265\321\203;u|]\274,\224`=e\224I\275 ZN\275\303[K\274!zs<\340^?\275\224\030\036<\244=L\275\023\037\375\273\035\202\025<b?\200;\007\rY=\370\035\277=W\t`<\241+\301<GO \275\307\216\237\274\337\227%=1sQ\275\n\353\255\275\215\346\277\274P|\341\273/\331r\274\245s\373\274$\211\210=$\2708\275f\337F=\235\'\351\274[i\355\274\007\224\266\275cT\322\273]\357\321<\223\243\335;[2q\273\271&\205<\326h\231\274\234\024\177:\033_\314=\342\331h=\302+?\274\305\332\270=A\305\237;.\376?\273Op\217\274\213\214!\274\025\244Y\272\377\030G=\371OL=\020\357x\275\322\037\246=\345\343\013=m\372\2509J?\252\275\361}:=\035g\001\274\376\221\254<\022\223\233=n\024\233\274\322\275<<\227\210\205\274\220T\334\274\352\345Z\275_\231\374\274\020w\254==\225c=\312\2164<\250\351\327\274\037\237\256\274\214\207\277<^\234\210=9\3166<\r3\022\275\2409!=\0071\262<\324\260\203;\034\275\027<\371\226e\275\267\334i=\322**=k\220\345\273y\201\235=]\271\t=(@*\275Se3\274\250\202\263\274\002H\n\2748\017L<\207\025-<HF\303=\361_\031\275\236^\016\276\303\017j\2725-\306:j\355a\275\220#X\275\227Vt\275\035\005\322<\241\\\200\274\177\230D<\220\2431\274cw\n<?\321\014\275X\030\347\273XR\266<]4O\275~\231/<\242\375\216\274\3539\255<\207\203%\275M\343S\275\374\315\326<L\"\210;\262\202:=1s\212=\2439\217;\377\234\270<\330\037A\275\026=`\275\271\323\327:\301P\030\275ij\347\274\217=\201=,<V:3G\221\274?=\030=?\n=\275\205\375\026=\237\3536\275 6\266=\363\362L=08\263=3\201\210=.\377\261\274\212K\255=\230~\213<\3364=;\254\'\035\275f\363~\274\317\277\347<\343\265\346\2741\300\207\274\345\361\231<\216\203.\274\277 d=N\235\226\273\330\375><\256\332x=\n\t\211=&tl\275x\263\022<\343\375\017\275Wu{=!\233V<\361/\273\274\2270J=\230\266&=\275\260F<q\272j\275\022\275\375\274\306\027\277\274\367\343\005\275\361\244\204:\242\002\225\275[\272\252=\356v#<7\217\211=\302\017I=\017`\364\274\353p\334;\376pA=\200\214\207\275\336\010\005\275\225\035\206\274;\024\222=\307\257\362\272\242\005\337<\365%\025\275\324rL=$\220J=Q\311\250\275\251\220\337:\007\213z;\266\367;<\317l\363<\301L4=\2622|;\005m\021=\374[\253\275\237\204\027\275DuX=\362\374\320<\375\256\361<l\340\265\274bnC\274t\255!=k03=p\n7=\375\360\302\274z2L=\030\344\301=J\246\211=\032|\235<#\363\201\275\255\226\371\274H\272\226=\264\332\336:\357mz=\317\274%\275\3668E\275\261\360\263\275q|\225\275\002?\266=1\354\316\272\"\304\200\274\332\377\330\275\344$\033=\201k\341<\303C\327\275\356i\263\275uR\232\273\005>\306\274\3222X=\225@N\271\320\203\024:\205#\367\275\021^\264\275\024\220\026=\327Xr=D\2429;mh\323;\242^e\274C=\366\273I;0<\301\251{\274m\217\013\276\305\\\363;=\240\256=\224f\347\274=\371\"=h\357\265<\007\367[\275\020\370\245\274o9\316<\354\243!<\250/h\273\250S\204\275*\016\000=m\177\243\275\025\211\361:S\331\303<~\224\260\273\003\224\236\274\347#\304<\'\034\367\274>P\262\275xA\257\274:.;=E\360\207\274;\003I\275\212k\212=\375\006\021\275\361\254\231=\355\t\276<\321G/\275,\016z=\313d\242=\001\357t=\265\021\010;qV\177=>w\211\272\307\224Z\274P\232\256<]B\245\275\272\304\204\275\034;Y<\330g\361\274))Y\274]g-\275t\226\364<\246\000\037=\2746:=>?\201=\270x\020\275\\<\023\275\035N\223\274cvC=\031\033\001<\344\374\243\273\360\035a\274/\346\224\275\362\251\262\275\206\256\344\272\272\016\300:Z\323\263\273M\247\023=2\326\3349Q\315h\275 5\211\274\241\255\216\275\236\213x\274\315i\005\274FZ9=7}\217;\323\221\026\274\2074\t=?\r\214\274\2648\272\275\217S{<B=x=C\241\317\274\242\334\205=\201\020\314<\245U\265\273\002q\010\275\377\321\n</b[==\242\333\273<\027Z=\325\2114=\313\261\216\273\221\326p<\270\005b\274yc\032\275/B\231=0\207\202<\324\356\\\275\027\316\251=\232\006\010\274\245\353\225;&O\242<Y\027#=(\316\343<9\t\210\274\256\265\013\272/%\007\276)\265\204\275Gm\n=\227\0313=7\352\020\275\334\3352=\373\250 <\006\210^<\032\201\216\275\264\217c\272\214\363\004;U\346\236< \024k=\000\273\255<c\n\231<\353\201?\275\261!\376<]\200\243=ee\003=\310=\224\275T\232\n=C\031\007=l\215\341<\221\242\353\274\244&\201<{,\310\274wg\257\274\327\270\204=\220\301\344\274\310 %\275\375\344\223\274\200o,\275\375P\236=\207\025\250\272\267(\350\273\'\030p=\351\315\323\273\204j8\275\210\320\252<b-\345\274\334\337\266<\342\374\274<\037\276\330\275^\014y\275]W\221\274f\223\242\274\257\t\034\275\037P\304\272\334\277\364=.\316)=\022\273\010\275J\360?<\315\005X\275\n\t*\275\\Q1=\\}H<o\033\324<\275W\024\274\315\024A\274\322\006\367\271I\303\016\275\301~\234=\350\243\201<\331\342\354;tRj<\3167n<\271\210P=\207j\204= \377]=\251\027_\275\267\2108\275\224\361\333\273?Y\246;6\003G\274N~\340=\032\335\023=\300\204\005\273tUw=\305\025\347;\252\362\206\275\273Q9<o\265O\274\005y\210=\335\302\030=\373:\255<kd\326\2741z\033\275\374\276\357\274J\360\361;\001i2\274\235\017\005<Vb\307\273\246d\336\2743]\230<\177\354\315\274\316\017\247<\"*\331<\203\302m\273\356\206\343=^<\343\274X/\026=}i\300\273\234\037\023<D\315\375<M\0105=;\360\234=]?V<\205{\236=,\375%\275\275\350\224\275\263\250s=\237E\177\273f\254q\275\001\'~=\374\000\'\275.Z\205\272\304\014\215\275\211\332\372\272\321G\024\275(\2665\274\232aA=\025\367\023<(@\337<\332CW\274|\306D\275\276\323.:\230\t\222=\002\306\205;\005qi\275d\201\341<\314\013e=}\227P<\322\314\250<[]\200=\345\220\n\275\300{\002=mk\277\275\034\216\220=\207\375\237\275\267{U\275\250<)=\264V\220<\037@\227\273z\221\356\274\273^N=\367\223\270<\313\006\001=C\2519=\013\014\275=Pq\255<\325\324/\275\337R`\275\"\336B\275\010\361K=39\020<+\344\217;v\'\255\275AR1\275\276\002Q\275\242j@=\206\001\362<\331\'\254<\266\306C<\252\356\257<\366\364\363\274I\242\245=5\330\305=-\276G\275n\242\025\275\266\303\242<|\030\241=zH\230<\266\312@=\204\3660=\253\024R\275@e\321\275OT~<\347p\213\275\254\353 =^\373\317\275\263\201@\275tK\212<\245\311\217<\302\026\241<\r\235h\273\365\205\223\274\010\265\n\275\255<8<%u\2759\027\210D<]\365\352\274\331\204\033=\231\307\246=0\345\t\272\237\231\336\274\332\231{\274\273\317\210\274\367\331\263<\317i\214\274D\3078\275\260~#\275\212g\266\274\202+\375\273\315\236.\274\205\225\220\274H\351\036\275\224\261.=/9B\275\253/\034\275\322\026?=j\000Y=\216\310\002=\356\026\017\275\324\256*=p\354\002=\325\310(\275\001\316\251=\014\327;<\254\3130\275\013U\260;k\261K\275\324\317\\=\023\213{=\022\245\262\274\212E,\275\340\215\376<Sj\323\274x\243\317\273\317\025\333<\247Wm\275\024\307\205;`\234\211=\026\352\231\275\301\232V\274\256\323\274\274^(\317\274>\215x\272\030\345\004=\241g\226=\215\004\3159\370\030\314<\005\377\246\274e0~=\274>\027;\301\014i\275\374\371\030\274\247\322*\2743<%=\031\225&\275\251T\260=7r\222=*Q\222\275\\\320\361\274\326\247\337<\320\202\217\274\251z\023=\260\0135=h\005P< \210\232\275)Wv=g\374m=\334\362\241\274s\272?=\024\214\221\274i\351\035=\314\352e=\222y\334<x\305\224=\005XV:r\r1\275Ol\245<Xy\0268\237d\205<&\036~\275\222\323\n\275\261\331\213\275\035\264\375;\333\376\3208\362\021$=hO\241<\370H\302\274\313(\262\274x\013\212\273\274B\345\274\360#\031=Bh\207<\020>7\274\220\334\207\275#\344I\274\371\364\243\274^k\227=bqu\2753>\r=\300DJ;\361\361\311<dl\026\275\350\374\230<=\203\251=\201\303\350<\250\'\231\273.p\300\273\330\254N\275\315\334U\274Bt\016\275w\'\277<[B\307<2\313\307<V\256\017<\322N\020=\350\343\027=\356\306\026\275\223P\266\273\207\301e<\376\001L\275\312\203-=\275D\005=\024\361 <\2526\243<\t5<\274\356\226\203\274\312\350\037=\035\237\245<\213\262\313\275N\n\270\275\334\341\361<\256\237\001\274\335a\346<\322<\205\275\210\023S\274\347\335>\275y<\355\274\227|$=\307\274E=\344\3466=u\t\242<\033$\236\274l\r\002\275\356\252S=\t\017\222\275\227\002\016\274hOr<e\215\007\275\341\272\223\274\376y\021\275wz\031\274\306\376a\274~Y\232;\227\271[=\3025\205\275\001O\352<|\304\270;\327\222\016;\224\024\310=/V\215<\227F\204<y\n\264<\260\177\322:T\315\266=\037\016\3109\352-\306\2744\335\017\276\260\313\030=\271\004\201<}\212\255\275\307\234\325\274 \024K=\031\200*\274\301k==je\267<\344\317N<\227\267e=NC%\272\360+9;4\202\027=S\2364\275\326\305\002\275\210\335[\273\035\216\213\274\030\300!\275I\374\335:\216zy<9\026m<\307\320\211<u\233\031<\201A:\275\365\316\'<\035ZY=\373j\321\274\265\265\023=\353\372\302<\224C\227<\0018Q;J\302\036=\342\267\360<\023~&\275%\rR=\236Q\317\272\240I\n=\301\025\262=\326\322\232\274\024:\233=\227\003!<\221S\234\274\236\270\267<\325\265n<]\207\210<\021p\377\275L%p=\246\300\255\274qyL<\277g3=]6\236\274%\3422\274\260\207\204<\300\nF=g\027\n\2759\336\013<\374z.\274\302\220\227:\356\366\240=\330\321\256<\374\005\254=tt\265<\000\\\226<DJf=;\\\261\275\342\351\215\273\362\3306=\315\265\343\274?\321J;\020Q\341\273\361|\377\274\300\272Z;\264m\227\275\0132\255\274\272\214r<\230\351=\275\373h\213\275{Kd<\364B\340<|\313\232\274[\225N<0\2479\275\370\377\220\273\016\021\014=R\271\312\275\355\243\204\275\276J%=vm\265=\314uS\275\352\330\332\273\204\271>=\'\377a<\377\371F<\335E\226\273\236\233\353:\214\211\317<7oH=\230R\361<\355\223\257=\2671\260\275\336bD;\2256y\273\350\271=\275>\3455=\241\230@=\223\307\373\271g\313\372\274\337s\204\273\004\326\234\275\271\275\214\274\332\350\217=s\353\177\275\376:\027=\240\021\021;\025\365\351\274=P\231\274\235\376\025=0P\241\274\177\370\022=\314\364(=\352\332\213<8\365\226=S\231a=h\336w\275.\2425\273\325\035\344;\300\236\233\274\232VN\275\346\341j<\2564\255=\335\374\n=\370\357\037=\212\217\273=\331:\016\275awY=\276\375\017=\330\022\212\274 \367\244\274\311]-\274\r\212\031=\247u\334\274\225\350\363<dh\366\274\250\211\t=\000?O=S\3052=*-\242\274I\252\254<\364\347\r\2739\013\205\274\364\221\267=\351r\331<\014\353\340\275\036\305\n=\245\320R\275\233\300!=\207\024P=\nn\n\275\323\274\203=r\007\276\272p\210\303\274t\366\363\272\245\3144=2\203\331=oK\247\274,\t\253<\217aO=\025\247\215=]M\264;\005\350\214\275n\333b\274z\322\262=z\245\226\274\013Fy=J\2034\275\231&\204=1@\371\274\361/\000\275\371\033\215\275\247\"\020\274JN\010\275\372e\314=\327\001r\275\322\353S\275\376\036V=\202\202\305;\335\367\217\274\353\307\343<3\020%=\266\377\034=\335\367/=\301\343\023=!\\ \275\303e\023\275\216J!<\245\247Z\275\273\210 =\303\320\237<n\337\034\2756<1\275\217DQ\274\331[\217=#Z\357<A\004{\273;\220\225\273\214\2741=\352\320\252\274\026T}=\006\267$\273\372\037R\275\237\373\325\272\353(\337\273R\375\226\275\201}\347;T\202Q\275\374\013\362;&OK=\262q)\275\023\014\370<\240\"!<\030>M\274\341O\037=|M\006\275Z\235\224<\226\273\001<}L\206<\202\030$\275gz!;\263z\"\2753\341\t=RV\036\274\027\205\227=\340\314\200\274\243\260\356\273\261\376\200\275\310\351\363\274\202\264S<\232X\276\273\3202\220=G\265g\275\210JF\275\035\013\"\275\020\311\373<\230C==\252\333\252<eO\037=\246=\324;\315\202\002=\302\307\010<\231.6\274*\312\221=\244\001\301\275\263Q}\274\225\351\360<\244\023\251\275_\3410\275Y=\250\275\357\262o<\032-\265<\317\264\037\274\337iB\275\214\351\244<\343\001~\274\3371\273\274\014\256\250;\252E\335<x\327\236=\274^N=\362\334)=\316\006\237<\342\035\014\275\244rY;\307P\214\274\316\262\324<Xqa\274\203\320\020\275Yb\220\274U$\327<\354\246$=E\322\300\274\302\354\306\275\246\3333<*\311|=\016\204k\2745\266\022=<\017&=P\221\212\274\250O\022=\213s\362;\t\230\255\274<y\360<\326V1<\357I\017=\266\335,<\023\311\001\275\352}\242<\256\370\017=\313\314g=h\221\013\274\032a\257\274\375%\236\273uA\316<\307\366\037=jR\024=C\330\005\274\025\234w\274G\000\310;4)x\274j\332\376\274\366sp<\202\n\263\274\035\0061=\330w\316\274\302\037A=\341\352\237=\033+\207:\371\211\237\275\212\352V<^$\266\275[\371P\275n\213\263=\214v\243<\304C3\274A\222\201=L\312q\275}\025J={\262\014\276\nPJ\275\326\235\037=)\000\037=R\327\217=\263?\215=\337\027\357\273\367N\302<6]\033=\307\371\355\274.\\ \275\003\002\273<p\221\305\275\217\272\234\274\312\'\n\275\006r\275\274;\177\036=4\'\336<$\370\222=\213U\237\275\177\030\"\275V1\316\274\205\234\312;J\033\347=J\231\227<\315\247\207\275\341d&\274\372\226\363<pU\007=\304o\245<5\344\021\275\300\340\233\274\346\377\363=\344\367\262\274w\275\021\275S\223?\273`\340\200=\321B\311<\254\'\010;v\310z\275h8G\2751w\375\274#\302\212=\313,4\275\265(\311\274`\332\200\275\t\0140\275\223~\211\274\361\204/=x\034\226\274\023\353V\275\267E\213\275\230\246\001=b\002g<\250T:\274N;Z:\314B\213\275\350\010\267<Fo\277=l\300E=<\343\226<\013G\262\275\312\026\367\274\374~\220=\026\313\302=\214\230\262\275\317T\342\273\004\236\217=\345\225\272\2758\254\n=\t\267\221\275EY\224=?\304\033<\026[@\274|\201P\274\222\224:<\240X(\275a\"\214\274\373\332\032;\202\223\202<^\303\227=-S\261:>\030\\\275\352\255\362;j\335\255\275f\211\330\274Q\317:=Cr\257\272L\237\203\275\000\214\207\274\241\0209<\177;\315<\201u\257;\335]\024\275\\;\273\274\320\3520\275\276V\317\273\217#-\274\372\251\205<\324\223\031\273S\325O=Z\372\010\275v\200\322\274\034c$;}v\245\274z\332\212\274\270\273f<I{\004=\216\214X<S!\276=\303\034 \275(\201\026\275u\211\345\274K]\323<\363C;\273\310\354\351\274\253\200h=\252;\025;\307\363\302\274\344:\351<f\205k<\037\246`=^\204Q\275Wb\007\275\023\243\353\274\"\331\025\275`\241\224<\314\020\'\271\247q\003\275w,\336<\265\227N=fV\202\275\2615)=\032\000I=\2756G=\207\347\036<\016og\275\367\221\030<\304V\r<\023\264\r=\3310\255\274i\322\345=W\213\305\274\252\026L=p\377\311\274\250\223t<\340d\244\275\310x\252\274\001\221\n\2751@\026<\202\273\021\274\267\242\217\274F\"\025\274k\2024=\242i\210<h\225\206<\220_?=\355\243\376\274\215\r\261\274\263K\316=\236\350\352\275\360\212k=\014\264\363=\340\032\346\274\226\377\215\274\274\217&=5\316?<\374x\335<\217E\243<\215\340\210=\261&&<\342H}\275%\027>\274&\"J<e@L=\237\356\003\275\235\023\000\275o\213\323=18\253\274U\354\203=g&\201<\t\245\203=]\343\356\273\375G\007=\360\262<=\036\226N<\232\336\225<\ru\250\275\340\277\220\275\346\026\242\274\035E:\275i\366\331\274l\361v=\220\260\261<\241\351c=\322\250F=\346\035F<\270\222\324=h!Y:Zc\324:#\264p<g$T<\365\311,\275\2444\241=\346\323\333\274\3157\237;\346\250a\275j\027\345\274\377E\302<\3755\204\272\276\036\266= z\001=\213\352\365\274\020\332\362\274Ee,<\351-)\274\314\311\370\274\346\232\026\275\021|\000\274\305\201\213=\273\375\255\275\346S6=/\251\026\274\007\000\031=\3545j=\034\3038=\313\2373=l#\335\274\315\275Z\275\1778\201\275\313\020n=\346\010\247=\370\231\032=\365x;\275\325l\225\274\\3^\275\321\261:\275\002\2700=\270\033\247\274;\311h\275\330\337\303\275\365\3331\275=YJ\275\261\032\027\275R#\207\274\002fS=\017eT<\347G\033=\3538\335\274\265\333\013<r\356\222;\201\024\324\274\244DQ=)K\347\275\225u\026=Z\247/=\002\274\267<\303\2256\274\356\234F=/\335\342\274M\246\036<\013.\241<\330\265\022\275\271\253\355\274\202\215\256\274\207\311D=\007F\200\274\206\253\317\274\372l\300\274\370#\344\274\360\363\343;\341v\021=\250O4\275\346\377\252\274J8\207\272\2325z=\"E\323;kg#=\347Ka\275\266\377\363<\010\351\200=$%l\275Y\025d;\023zx<7qe\274VS5\275\226\351X\275\226f\321=\253\203C\274\241\002n=\264$\030\274\002\316\371\274{i\216\275\307:\005=\354A\240=\266\342a\275\337&\007\275%\351n\275\211\247\253\275\t\3552=\016\3670\275fC \274\227f1=\325\266\305\274\337\217$=?\321\300\274\222\311\264\274\250\025W;VY\244<e\225`\274r\027A<\221\246b=\371\3640<!.\214=\246\350`=\237\212\200;\334(\267\275\214%O\275\314\373\030=\320\213i=S\333J<aK\257<F\263\343\274g-\001\275\021A1=\352\007\021=\002\242\330\274\333~D=c^\004=-\320\212\274\334\030\205\273]Xz<\372\216\205=:z\274<8\034\314<o\215#\274v \315\275\230\233\360<\262n\204<6\344\323<\321u\032\275\3768\026<\247\222\233<-\254\014\275n\234[\273\345\275\000\273\303\264\352;\250\336\362<\377L\273\275\324v(=\216\366b\275b\315\220=^D\007\275eNF\2753\3032\274r\200\252=\031\365X\275\215u\347\274\tBW=n\234H\275\033\355\212=\242\205-=\334\205\337\274*\322O;r$X=p9\307\274H\343-\275\355\315`=\007\006\261\274\035N\027\275%Uk\273\270>\016;\325\007\334\274\327\260\252\274\253\007\236\275\016Vy\274bh\361\275e\026\002\275\"@\003=qT\266=\013W\'\274\311\307\242<\303\301-\275\014\272\215=\305\356\r\275\003\261\253\274\033\263r=\261\001\020=Q\311\332<a\275~<\310\240\205<O\032-\275v\355h\273\331\237\221\275r\260\004\275\235\250\242<\334\255\204\274\217\223\246\275|~\004\275U.\345;\343\302\260\275tq\277=\344\220\251\274\227\017E=/\323\200=\330\032M=c\337\214<\250\277\032\274!\324\267\2747\347x9*\334x\274?y\357<l\355\271\274I\210==\023\251F<\031i\032=\232\005\311=\216\233w=\256\013=\2756\300\274\274\021\340$=\000\326\000\275\205\243\377;C\223<\274\030\216R\275\267\2237=\235\353\252\273X\031\204\275\277tM\275\304\257I\274\341Yd=\305\000\244\274\276\354\304<\036q\204<\202\255%=\016\261H=\311\326\305<\357i\252\274\356\016g\275\250K<\275\336\254\333<\027q/=LU\210\275\355\266U=Fe\354\274%\344\007\273\003\201\242<\337\321\r\274\274Ui=\314\232`\274\3414C<\340g\241=R\022\212\275\222\227[\274\3261\242\274\376\206@\275\223z`=\222\\\311\274<\234\236\275\345\211\341\274\203\346\364<\336\204\t\273\242\345O=G\345\341\275{\t\253\2743tV\274H\013l\275\366S\016=R4\270=\227\351\324:\233s\t=M\315\016\275\233\355&=\357`.=\376\031\306\274,\224\252<\220\230\217\274\357\032\331\274sR\242;\353\352\036\275\332f\227\275\n6\247==\245{=d\322@\275ei\313\275+:\252\274#2\010=K\326\024\275G\211\"=\266\250[\275\263\002I\275\271b\006\2749\223G\275\374\247\240\275\201\347\220\275c\267\263<\233\326c=\366\342\333;\373\376\306<2\274\305\273\376x\372;\020\'\215\275\364\027\220\275\003?m<\000\034\"=\374c\020\275@\261c\275\377\273\315=\227~\362<\"9\277\275\334\310\006<\325\275!=o&\204<\374\332\314\273\030\255\311=6;X\275\027Q\314\274<\270G\275\004-\232\275\324\337\247=\t5 <brg\275\314\277\316<\340\300M\275[\355\216\275|/\206<*\377o\275\212\004j=W>\007=\354\030g=d$\360\274\003\221\261<\301,\340;\275\034\250\274\367\300\022\275e\007\262;\025#2=\005)\305=M\003\014=[\250\263;\357<\326\274\236\350\226=xT\014\271\035\330J=\371`\016=S\371,\275\216\266\202\274\325\333\332<h\233#\275\005dS\275\030\260(\275\2727\210\274Z|\301\275\350\210\333:0\2502\275\024\001\031<3\'\277=\346\037\361\274->\204<k\240\235;\323\263\350<I\266`<\233T\017=f\376\006=\334\214\235<\330\315\017=\300\215\006\275\204\024\250\273\033:\261<`\220(<xE\014\275\324O\030=ev\300<XD\026=De\325<x/\014=\024\244\006<I\016w\275\314\177C\274\314\247\214\275K\374\r;\246\301\346<l\220Z=\205\364\217=EY\207\275\260~\330<A\230p<\206U\263\275\257\344\033\275\025\021\327<Ta\230\274\023n\222\275\024\2052\275\335]\005=U\330\001\275\370\215\361=a6I\274\313.\263\273\211[e=\213\266\227\274\177\204O\274\274\\T<E\273\207;15-\275\365\274\274<\215\354g\273a\000\264\273\031\307\232<\003\363M<\372.\215;e\317a=\342~\331\274\361\224\254\275\243\032\024=S\033x\275\323\252\333<<\334\206\275\264\024P<e\030\206\275\251\016\322;]<\230:k\225I=\363W\307\274\226\333\235=w\221\302\274hf\220<\264l\237\275\225\037(\275l,\373<)\276Y\274\0179\006<\201\247?\275\236\311\220\273aV\257\274\324k\000\275\326\002_\274{\354\t=\325N:\275x\3229=\335\307\206\273\364\373\035\275\367\3315\275\3320(=C\240\023\274\2355\014\275\374\212\222=\354\221\201\274\237\254\207<\036\330\200<\276\226\325<\360\242\336=\341\241\\\274LK\022=\355\222\354\274qNW=\017DX=u\264\206\273Y\235\266\274\253\312\205\274x\037\325<pI\227;\332\227\213=K\022\"\274\343\334\222<`l =\024\255V=\342\246\370\274\002\215\316<\\\027\013<.\ng=\\\203\017=P\243\037=H\332\\\275\300yA\275\210c!\274\017\324\362\274\002:\344<!4\316\274\235;,\274\027\276\373<F\010\303<*)D=!\257\250\2757\334\243<k\336u\275\304<\025=\247\222~<\274a\006\275U\371=\273\0342\376=I\034u\275\346G\275\273\370#(\275:<\205<\020\357)=\222E\\;\231\214R<\250\353\330:\014\346c\274\251S\255\273\244\337\003\273\350\367p==\'<\275`\004\377\274\034Z\025\275\024\034\'\275V\260+\274\357\271\327\274H\247\200<\232\013\340:\322\336?\275\277\217@\275\003\2630<\376z\352;\377\225\207\274\355\267\210\274\206\334\205<H\226\'<\207\376L\275\323\3519=\205\344\325<\361\321c=zF\221=\247\266(;\353b#=\207O\232\275\250s\240=\000#8=\202\273\347\274\345\307\211<\336+\276=\232\247o\275\207\375\301\274\030PJ=\334\310\003\273\312\310$<\221+5=\224\020\305<\177\330\367;i\232?=\337\241\274=\341\035K\275\036\004\347\272w\024G=x\305r<5\024\370<\235\333~\275\344}9\274A\216=;\365A$\274\256\276O<nTF=\316\004\357\274\370\341\230=\211\000T\275Y[s\275\333Y@<\335\205\374\273\215\301\323<\376\341\372\274wk\355\273\360\210\333<\375@\261=\220\313 <\273)\007=\037HX\275AW \275vK\r<\223,\347<*\371\332\273\350\332]\275\332\314|\274\311\243\306\275V\254\010\275\001\310\302\274fw\256\273\352;\215=\316\\/\275*\364\021\275\265\354L=\313\372Z\274\304\307\320=\210\211\"<\235\275!=\275I==\2555\242\274^\241\221\272u;\215=\033\023\251=S\211)<\037\342\220\275\360\233*\275\375\323%<M\341\244\275B\356\221\275\336\307\322\274\317\271\211=^o\007\275\357{#\275z\335\243<\007\265b<Qm%\275\020\034\252\274:Uz\275}I\355<\005S\234=\021\227{\274\037\334*;\300\2062=A\355\230\273\376+\264\274c\374\205\274\223\216\224=q<I=\370\230}\275pn\002<\344\350\n\276=\001?<r\242\210\274\242\251\213<8\037x=+\326\357<\254\344\200=}ko\275(Y\217\275\314\r?\275\320\033@=\222\331\t\275!r\236\273\026\004\221<\270\264\342\275\177\377\304<\265\342\240\274\356\242\323=\376g\203;\200QP\275fi%\275\006\232\317\273\324\033\032<1\202\004\275<\367\333; k\000=\222s*<\233V\355<\232\226\222=\221\226\323\274TD\n\275\311\314\347<@+\225=\024\3746\275\241\244]\274\262\003T=\360\356g\275\217\021\000=\033\353V=\304K\006=\201Dp\273\007\r\275<\003\211\210\275\333I\236\273\247\200\374\273<\213&=\335\321\006<6F\206\274l}\322\274n\022;\274\377\210\"=\017\341*<v\345]=\343\367\334<\247{\004=\3503D=\243(\037\274\306j\202\274(\313\315=\030#\322<\207\014#\273\372!\373\273\221\301\363\274\226\022\020=\345\311%\276\306w\254\274\373\251_=\2460\'=\000s\222<Y\234i\275\031\"\220\273\365\212\322\274q\375~\2752R\216=^\326\272\274\3219\275\274KeP;\r\334\340\274\375#0\275\242\237\220\274%\2708<\227\363@\274\350\240o<\263\'\240;\346\035:=)\316y=U\261\342;tZ\033\275\307_\n=\357\312j\274\372\207G\274\331\221\251=\2513\350\272\223\211T\275\230Q\005\275\356\265]<t\037@\274\362:)\275b\301I<\274\310u\274\242\324\276<\262\002\21292R\242\274<\307\024\271\355s\260\274iH?<\256\323\016\273\235G\020=;\366\337;.\tz<|D\006=wO\023=\220H\343\274\035\302\242\274\307q\013\274\251e\222=\270\247X=\036\252\223;\356K\177<\25038=Xf\276\273\006\022\276\273\276\320%=\334i\373\270\030\031\306<\350\323\333;\321\373\245<\376\337I\273\343\321A=\234\005-=\356P\336\274\024\211v;\r\265\331=\227\244\253=\332\211\024\274v\202\324;\031j\361;hmL\2750\332\235<\037w\234\273\231\366\001\275\001\252P\275H}E=,\222`<\353\001\246\275\002A+:\215\337`\274\230\303\215\275\334\217\345;&C4\275\271[\221<\265\2507;]h\277=0\220!\274\345\240\035=\032q\220\275\230HF<s\262\373=\274\246\343\274\3373\235\272\303V\207\274(W\274<\200\355\220\274\017\247\336\274\177\276b\275I\355]\274L\201\352;O\264\320\275\273p\243=\2174\327<\342p\275\275\362@\234\274U\274\202\273\340P\335\275\277\372\210\274\327\231\263\275_q\027\275\303\362i\275\220I\016=4\225D=\363\261\230<\326\244\241\274\342\036\256<\276\354\260=\204\304?<8\304\034=\231\311\233\275\023@Z\275\207\373H\2758\"`=\014\377\013;k\314/\275\001\305\006\275K\352\374<\334\337U\272\365;j\274\306p\330<0\352\201\274\021\3518<\014\235f=r2\346\2737*h\275m8\303<\2723\217\273BZx\274\223Qv\274\311\254\277<O:)\275\344\250#\275\213`3=\3643\345\275\327\274\311<0\365\237=U\201\262<{x\230\275E\322\377\274\371\343\315;\003w!\274\3233\207\275\026\366\222\275+~p\274\231\200\365\273]\3373=\005\207\344:\\\246\370\274\330n\204<pY\347\273\027\225\035\275\201\217\006=\363\365L\274\216tH=\014\355S=b\360o=\207l\244<ixZ\275\020z\232=\321~-\275\005\265\'=\270\211\010\275\262\262\236<a^|=\367\213\355\275\247!\350\274\331\233\036<\375z\017=\023\317\225\274}$\215<\270\232)\275\257\013\237<\020\241\342<\347\215\201\272\346b\231<5\010\245<\217\300i\274p\275\211\274\037X\022\274\241\255\305\274\343\375\034\275G\221H=\366|\355<\376\322\274\275\335z\306=Y\276\333<\202u`=$C\350\274f6\321\273fq\035=R:\235\274<\200\024;Pyo\275e\225\227\274\334\325\351<z\214K<\303\222\033=\347\205_<\342\\\203\275\027\235\347\274\361+S\275\230e\307\273\'D8=\227\360\345\274\374\266\030=\232\256\220;<;`<|\362\357=\330\375\242=_\313\275\273\247v\321\274`\344\027;\263\227`\275&y \275U[,\275!\331\022=\2275H;\347\3707\273\316\177^\273\350\224w=\177;\277;:\2501\275Y\225!\275\266\031J=1U\350<Q\0336\275\340\266\010=M\261\371<\\C\020=\204\216F=\225\371N\273\254\262\013\274\346^\216=Q.n=r#;\272d\336\031=\327b\246\275\033)\231;J|6=\026\271O<\346Y\244<\270\251-\275w\272W<{\241/;\221\353\226\273V\304==\r\001^<w-\222\274RW_=\223\303\234\275\030\244>=\025x\371\273\252.\316\274K\333%=\373\'\010=\322\341\250<\370GZ=\351\341\033\275t\320\264\274L!\007=\273\317\001=\005<C\275\265i\306\275\203\031\010\273\332\236Y\275\337\232\354:\347-@\275)\374q<;\241L\275\003\251z\274\370q\213=\0219$=\271\273\221\275\027:w\275\335\242\250\275r\267\305<8\370Q<)t\270=-Q\203<\314\363C\274Z\350\177=q\230\037=\003ac=z*G=\301i\300<\233\240\274;=\310\346\275\rR$\275\310\273\035<\t\217\324\275\'L\226\273\362\370\214\2746\266s\274\n\231\366\273\245\235\375=\3470r<\004\354\344\274\300g\251\2749\342\200\275\033\212A\275j\357\323\275\251j\001=\026w\367\274C5k\275\016>,\275\025\367\000=q\332\237\274\212\'\342\272\211\270*=L\370\323\274\024Y\177=\221:\360\274\226\320\361<\200;4\275*\311\333\273\244\367\244<}\341Z\275\\\317\263=Om\272\275%S\325;\\\311l\275\313I&\275\274o\003;&5\261;\351-\314;&\243\213\273\310\300\300\273\317\322\277\274\356\217\027=+<\335\275\033\341\202<\213\nC=@\214*=\005\225\366;\361\023\227<\266\002g\275J\311\335<[R\034\275\3203\254\275c\223\022=Sht\274\325S\216=\205\001\243\274\230k~=S\333\223:\375\205\261\274\331\303\266<\001\366Q=\225c5\275\245V\253=T\264\334\274\227\362F\275d\373\\=!b\240\275\267\255z<\0059b=\205\354\027\275\014k\234\274\352\303\'\275\264\224;\275\320\210\035\274YU\332<Ke\226\275\213\305\365\274\210\032\246;\"\013\206;\275\014\342\274LK\371\2747\322\323\273\203\220\352\274\241+\273=.\310\224=\334\372\003\275N\021\020=\337\023\223\275O\221\227\273\032\313\221<\342\246$\273\333\210\211<\354#\210\275d\364\302\274\252\037-=},l\274\321f[\275\026\311\027=\r9\200\275E7%\275N\371\024\275\006\331\354\274S\032\301<%\026m\275i\027H\274+m\244\275\312o\254=W\254-91\266\300\274\254\216\234\273\267\003\035===\243<\027\3638\275^\223~<1Q\020\274\300\004\236<?\310Z\275\270\232\261\275\036\360\252\274Z*\034\275\252=\361\272\366\037<\275\350w<=6F\245\275U\262\300<[\251\350:\366_\302<7z\331\274\352_a\275f\2126:%W|\273\371T\363\274J\224}<\317\027\000\275\326u\262=*p-=\370\371\021;\2576\237\275\341\277=\275\210\2576\275\346}Y=\207\226X=\235\237\241<\2706\256<\335`\340\275\223\356\325\274\303\237l==\200k<\276\004T\274\352\2365\275Yq\007>k\247b\275\031q\031\275\361G\211<L\010\327:\274\263 \2756\300\230<b\260*\275\300\005X\275\346q\343\275/r\035\2748\265\322\274;\367\316\273>\004\233\273h\276\347\273\251rr=+\007\203\274\032\007\227\275\031\021t\275t\001\336<.\317\210;\030W$\2753{\231=\023RH=\250uq<\335D\353\274\343p\364\2741V\014\275\226\320q\2753K\307<\326 u\2750\332\226\275\365^b\274u<\006\275%\204\014;\2569\331<\213$\254;\220\343\200=\202u\207\275\270\300V\275RGe\275\025;\240\273\211\307+\275\244\222\211\274\272\267\216\272#\272\036=\234\343\226\274\214\213)\274,\021\331;\2235m\275\255\202\270=\306^\336\274(\370\024\275\351\335o=\207t\316\274\212@\205\274Y:C=>Q\320<\364\266-\274\214\337\350=@u2\2750l\343\272\274\326\245<Z\031#\275\n\023?\275\322\350\277\274\346\303P\274\337\214\255<\352\003U<\\\002l;V\215\243;\263\216L\275!V6\275\260\0224\275\026\200\261<\376\246\267<l\276\213\272\003\221!=\371\350K=\324\352}\274\336\344L=\202\334\242:\322l\027=&g\202\275\215\225\306<\252p\200=t\035 \275M\271\202\272Rr3=\267\020\220=\'\277^<Q\334!=\352W\271\274\014\324\252\274\316\252\216\275\255\276\025=\225O(\274\271\037\202<\241YZ\275\311\371\271<\234\263\221\275\306\222\235<vv\353\274\342B\320\274\276\302`\272\010\022\026=\024\365\262\273\377\365d\275f\247q<Z\'F\275\331\005$=*\030\354;C\337\030=\365\002\213;\301z\342;ie2=5k =5q\214;\237\202\306<\247\310N=KRJ\274\353nG=\215\225I=\341\0246<\203c\242=b\366\247=I=~<\271\024f\274\rw\n\275\033\300+\274\224\023\306<U\024\224=\3248\344\274\217\337\314;\022\322\355=\203\335B=\022>\211<=\347\200=\004s\013=[\347\006\275\344\3149\275\221N8\274\244\276\370<\200\313\317\274J\220\022\275y;\241<|\203\326\274\n\013\237\274,J\262;\276\351\360;]\341\360<Z[\317\275\356\027f=\271/\001\275\2359\004\275\210\010\324\274,\252\245=\360\331K\274E\037\204\274\247_\243=\234\347\023\275\2619\0167n,\370\274\225\361/\275\200\375_<p6.=\366\344\322<\005\310[\275\253H\245\275U\334\333\272\323(0\275\377\244^=\026\252\034\2746\005\365\274<\010\261=\n\036\277<\027\266\274\273\2309\006=\275\037S\275\241g\354<n\360v<$\266\355;\313V\321<\243]N\275l7\004\274Gu\243:l\375]\273\220,w=\244\255\256\274O\322>\275\017s\032\275Fm\350\274|O2\275\3038\310=\001/S=?\235\355\273\222\367\311<\352g:\273_\017\324\272\345\343\261<\350y\032\274\331[\251\274\224\233\242\272\031\327L=\274~\252\273\364\"\'=\337\306\225\274\321\356\226=\204\322\035\274VA\023=@[\322:\376Q\211=\216\207D=/\224\375\274\241w\367\274Y\005Y=x\227\021\276\034\0319=\205B\234\274\246\004\216=\\Tc=\314\334C=\\\236\024=sX\247<\330b\336=l_R=\320\375?\275L\200!=!\236h\275\226\313?\275\241D\214<p\247\204\275\0333\265<Uy\t=\'w\251=S\213\n\274\306m\244<%C0=\351\037d\274\2534H=QK\326<\024\023\300\274T\230.\274\313]&<W\242\255=[\353\315\274\305\306\032=5\255\010\275\360\n\232<S\2373=\376\266[=\320\2326\275.\245\324\273\364\310\030<\253\rU=\250\217\336;\014\232\026=\367\007\016\2756\334\002<\237\372\211=kN\r=\007XQ\275\326\253<\272\360\313F=Q\362A<\210\274m\274c\244\371<*\243&\275\374\013\236<y\203\300\274\235\r\026=0\005c<\3521\007<\nn5<\031\317H\275C\2661<\312\013\351<\304`o\275\373kp=`\311\014\275\262*Y<\327<k\275\270\2315\275Q\263\303<\262\377\324<\022\3409\275n\323\360<I&\017<\224\'g\275WNB=3ZS\272\036\260\261\275\357ju=\025\321s\273\303;\206\274Hk\212\274 <\031=\353\235B=\031\244\347\274\344\3034<\321\356\276<i\246!\274\243\264}=\311[\275=\374\005\004=_\265\200\275\244?\332;\212\262%=\014\337J\275\242\307\271\275Q!\277\275\252\262\200=\312\341\241\274e[\325\275\370\334A=\t\325\360\2732\323\036\275]x\212;k\014\"=z\271\363\275c\033\325\274\243\344\261=\343\362y\275N\3120:\247^\010\274\036\027[<\256\241\263=\264\207F=N\275\345\274\214\253\264\273\3558\260=\024\275\236<\252\017\034\275pH\214<\276\010r\275\006\221>=^\2032\275\366\277\217\274%D\273<N\001\247;\'\036\001\275\360\234\206<n\355\221;C\005\243\274\316P\235\274D\233\002<M\000\231=\250\033\023=!`\246<\211\200\216=\223\007\261\274QS\200\275q:\311<\'\024\244\274\335\366\210=\353$\352<W\t\207\275\026\203\031\275\212\245\352<\265\2443=\227\347\001\275\000\305-\275m\342\377<\364\"+\274\327f\021\275D\244\243=`p\246\274\204h\177\275F\t1\275p\'\311;vR)<K\257z\274\247\223\333=HY\304=\2024+\275\036\027\261=\334\204\364;\332\036H\275\014T\3677l\2208<\333i\215<\036W+\275,\3349=\007\242\213\275\'\245\270\274\256\210\361\2740h@=\371\276\273\273:J\316\275\376\331n=\370\003\306\275\257\027\240=.\035\212=\303\211\254<\235\225\204\275tD#\275r\202\365\274\036\230E<\210\034\300\275\350\372(=\002\3660=\341\251\244\274\025\213\273=\207\335\321\2743\0056\274a\1770\275\350\260\023\275\250\210@=?B\245\275\0342E<\247\257\372\272\035fj\275\307GV=+m\311\274\304%\223\275\351\350\220=\234\240\267\274\372\236Q=<\233\030=PL\332;U\357=;\034\004\255\274\276?{\274X\001\247<aq\241\274\247`\251<\274L4=\360\347^\274~9\275<\264L\270\274\244\366{<\277<\301\275\302!\350<X5|\275\267\363\005\275p\336w=\315V\017\275\376\310\322<\322\t\302\274=\336o\274X\255\031\275\031\326;\275V\347\206<\271\256\332\274\023\321\313\274\263\320\253\275\235\224\365\274\334Am\274\263Mx\275\013\346\005=\367\001\373\274uC\236\274\3643S\274@\225\031\275\261\023!\275T\275\257<*\317S\275\331 \257\273\3165\035=\032:\021\275\230\nv:Y\213\245<r\362\251\275;\362\014\274\250\223.\275Q\277\311;\324\302\234\275x\263\263\273\246.U=\220\220\236=\303_\347;\'X\245:!\005\215\275\224\257\033\275\3707\304\274\035\r\253\275\010\235 \274,T\335<.\317\205=`\372\252\274e?\220=hO\221<\227\265\212\274\262A\032<\377 +<$\221\312<\276\r\346<\250\027\221\275\017{\203\275\363%\024=\031\223\230\274\271}\000\275\037\361_\274\330s\217\274\310z\362<\333\277M=\234\304g\275$\356\250\275\244\221?=\304fx=\001\033\217=(\300\323\275+k\313=$|\313<\"\006\016\275\256\260\240=0\021\207<\345\227?\275\373C\276<\243Xs<r=@=8\321\324<(\321\007=\264f.\275{\255\303;!\214\312=,\220\325<C\0054\275;V\253=\037s\351<\223\200b\274<\252-\275\236u\211=Huk=\020\237\277\274\203\025\204\275\223Vl<@\202\256\275\227W/\275\\\324\016\273\002\255w=\324Z\325\274\276\255\327\273\265]\010=~|\016=\227F\213\275\277\224@\274K\002\235<\271\255e=\245.\230=\233~\022<,N\220\275\373\201\257<\202j\253\275.\323\021\275\273\303u=\003\267\266\275\002\307\262<\245\220\302\274D\362\031\274\343f\252<\034\'\265\2759\263\304;\224l\354\274Y\251E\275\033\264\224=NQ\234\274\344U\234=%\2729=\226\r\034\275\351\004\212\274\333\246\001\275M\312\267\273\020\232\232\274\0341%\275u\211<\274=v\317<\241T\031=\n3\245\274\270H\317<\327\260\035\275\337\236\240\274\206\244\216\275\353\017\370\274A&\027\274\374u|=\265~\000\273l<5;Zq\261;\335\207a\275\374w\n=/\251#\276T\345\245<\022P\255\274b\001T\274\226UC=\362\271J\275\035\304t=\241K\222<\271f4\275\276\334\303<\261S\254<c.\300<\227\r)\275[W$\274\000\312\200\275O\324\374\274`US\275\340m\017;k\333\300\275\246\376\251\275cy\231\2751\262\211\274\207|(=\016\370\006=\357\2062\275\215\014\263\273\366\010S\274\373X\034\275\004k\005\275\360\257c\275\22489<\023\207\260\273\310s\234=\306\236\316\274\037\331\265=\016\005\302\274A\253\224\275|\330\013<;\200\333\275\227\004l<\371\347K\273\214\336\032;^NH=\277\345%=\245\252\362\273>X\371\274+&\336<\202\345\261<\257\376\260<\3733\030=\371\326\030\275\365\202\332\274\316Q\301<\207t$=\237k\272<r\345\007\274\354\326U<6\264\211=\371\306\010\275\023\232\271<h\030\001\275\036f\317<\3370&\274a\271\257<,l\232\274\2542M\275\023\350\023:+\233A<S_\334\271\257\263\013=\244hW\275\244\377\014=\225\026F=\221(1<\000u\"\275\3451\201\274\222b\022<\004f\030\274\267\3022\273\312\336\363;\312\377G\275E\345\'<%\236D=4\213O<\305F\005=wfx=\005\343\333<if1\275h)\244=\335\327\267\274\360_D<\350,x\275n.\r\275\200h\305\274\031w\327\274Z\236\005\275$\007K\272\304h\001>\035\003\223=\262Y\234\275\177ny\274\237\177x\275u\\;<\031\3063\273\332\253V=\'\027\023;L\013?<`\341\r\275\006\347\240\273B\332\227\275\364^s<{,\356;\330\263\020=\214`\016\275\343\340T\274\214\001\213=y\177\224\272\254\t4=\256\003\035=\214\232K=\252\273B\275\275\230\361<c\226\221=\205\r\206<\0131\216\274\257\n\201\274\277\032\205=\035\002\271;\013\307\263=\317\260\267\274C\215\332\274\215\013D=\221*\237;H\252\016<\272\024\316<[\031\316\274\0236J=A\243\001=\017\377\224<\341\375C\274\2753\200=<\363\327\273F\372,=\252\253\257\275%\217\271<y\013\326<\304\347\355\272\362\364\335\274\307z\001<+Z0\275x\245c=E2\247\274u\nG=\210c\254<\233\\\252\275j;C=ek\314:\323\251\316<\336\341\023\275[\000P=\251\033q\2741\3322=r\023\341<\276\232\247=.\037\222=R\274X=\361\030\234=\004\276\206\274\331\017\326;:\266\024=\025\037\'\275\364\337\225<\321\322#\272d1\\=\024\340\242<W\357\207\274\261\364\314=\273\255h;\2668\307\274\360%7<u\013\217\275\2567\300;\214\2207=\201\2553=\316[\002\275I\177[<-H\235\274W\312\350\274\020}\013\274\260\2115=\317\320L<\363\362\214\274\3265\317<\365\'-\274\301N\033\274*\374h=\306\'j\275\266\203\020\2754\031\243\272\340f\247\274\276^\'=\200\215\304\273\345\251\n\275c\273M\275\210Z\241\274\242\"\354\27487\223<\224\270\206<l\376\351\274\216x\201;\337\023\212=\013G$<\211r\256=\215X}\274A\255\360\274\301\253\255\273\t\320\007\275m\201\005>\377n\327\274\204 \232\272\251y\203=\005)\241=\213\355\261<\200\213\031\275A\221r\272@P\327\273\353w\037\275\313\265\021=\241F\354<\275\350\257\274\036\252O\2753\336\331=Jz\223\275\373\270\211=\272C@=P\371P=\027\342L\273\247F0\275\363\266\263<&SC\275|\272v\275=\033\010\272X\302\361<p,\022={n-=(\034H\274\311Fc=rB\035\274mfu<t\202\356\274\225L\332<\3460\360\274[\201;\274\227W$=\273\255\036\2754\017\231=`\377\252\274S\234)=\326\305J=O\r\032\274\371t\366<\253\001)\275\177n\275<u\364\231\275?\226\213;rA\237\273eP\236=\021\233\031<\226\305\311\274?H\007=\025\030a=\336\344\224\275\303\345\234\274\3335F=\014\211\332<\244\023J\275\257=<:w\221\242\272Jb\373\274\3125\362=o\273\253\274\264\326\266\275\223\327r=8z\273<\254w\366<+m\370\274\213:\014\275!\365\242\274\032VQ\274\032\326,\274\262\316r\275\251\277\310<\023>\031=P\014\337\273\365\217\227\275>\031:\275\323\235&=\267\304M=\252\306\251<\342\026\374\274$\377\"\275\037P\274<F\256o\275\026\267u<\326\014p\275Pz\213\275\324\036\000<F$\206=\227p\254<\210\216\0338M<\366<$\251\202=d:\241;\216\1777\275b_\225<\214\242S<\365\336l\274^\334\206\274\200\301\013=\377\000K=\307\322)\275\203\373\010\275\302Dp;\027#;=R\242\334<@\0250<\037{\036\275\343,\321<\351+\237<7\025\232\275C,D\273\356\377\330\275)G1\275\327`\200\274\005C.\272\320\r\005=\234Y8=\364a\347=b\371B=\235\221\356<\346\'\301\275B13\275\306\302\303<.\275\006\274\327=S=\363\305=;aP\317\274\331\005\357\274\0227#<\322\325\353\273\035\224\251\274w\276\201=\026\305_<\274\342\035\275\212U\222;!\331\240<\340s\263<\360\025\214=\210Qo\275\206\265\230<%\273\354\273\340,\253\275\373\242\233\274kj\033\275\nA\345\273\313\020\032\274\254j\232<\007B\366\274)Q\201<\254\313\276=I\267\210=f\317\223=y3;\275\225$B<\330\271%\275\313\235\035\275/\025\304\274\005\330\302\274j\361\204\274z/\211=\220.u\275\001\243\030\274\372I\225;\201\316\330<MH\246<\302T\021=\372\332\357\273\3609\240=\362\222x\275\344\302\257:\245\023\242\275\217eE;\344\274-<i\346\224\274\213Z\275\274-~{\275\355Z\275<\001\252G:-\235\257\275\274\306\020\275\324\351\025<A\352\233<\020i.\274\355/\"\273#\251\325<\371\272\221=\002\217\244=?z\035=\323\343\207\275vd\003\275#\266F=\2635\261<\2451\217\275\013\352\233\274\267l\221=|i\025\274B\"\232<\027\271\272\271%\206v\274S\211\202\275\365\361\330\273\'uY\274\316\334\025=\352\227/=\322g\\=;\216\241\274\2646~=~\307M\275\242\030\321\273]\232\203\274!7\004\275\352\340\001>z\247q=\214\343\227=\244\321+\275\317\370\302\274\256\217\260<n\266\273\274^\212\\<(\3540\274\275\345>\274\013\014\304<(:*\275\000\r\221=\377Mm=\026\003G\275\t_\006\275W\376\031\2754\271\377\274\215-*<[\217s=3\203\211=\013\016~\274\212cl=D\035\232=uB\203\275\324a\202\274h\246o<\363\264\234\275\261\224\333\274\230\356\233\275=\333\333\272\234\277\323=\030\363$<B\010N=\345v\214\275\227\335H<)\3320\275\235\231k=\223\221\253=\215\203\226\275\263_A\275\021+a\27345J;A6\222\274\244\324\344;\"\000@;<!\271\275\351\327\350\273\000@\002\275\205q\026=\031\217*<\313 \006=\010\265[=\"\271\240=o\224\222\275\224 \206=\243\347\206=7\206\243=\tQ\352=\345\244Y\275\3420\'=\247G\253:v\311\202\275\013\224n<\332\001\312<\333g\245\274I\231\005\275\340*,\274\357O\347\274H2\264<\224\260\340\274\010\250B:\342c\225=\337\213\002\2756\335\034=E\251$\275\007/\244=\345\212\353<M\017\206<\036W\372;?\354\374<\231H\364\274\007\302\247\273\022\276\356<~\200\351=\010k\306\275!\007=\275x\324\371\274\004\244\303\273\356\271\006=z\361\233\274\r\310&=S\320\332\273\350\217$=\307~\334<#i*\274\266\000H\275\032\336%<*\300\221<\324wa=G\333\237;\001\027\003<\274\006\222<X\230\264\274\375\244\211\274\3267f\275\2674\272<\254\003\201=\373\313v\275/\273\350=@\302\026\275\364\252\242:X\350\223\275\377\024\210;\226\271\226\274d \007\271S\307U=\241\346\314<\243)f<\303\016\353\272\364\351\345\273H\223\010=sd\207\275>R*\275m\206\023=\304\366M=.|\037\274\221\332\001=\273\214\231\275\n\304\214<\376y\352;Yn:<\246\036\003\274\371\331\211:\021\226B=\2152f=B\336\t\274\366\375\361\274S\261\010=\317\010\356\274\006\334\351\272\210\006x\274q\344\265\274\236Fj=\320\215a<\242%\311\275\003\370\231<2\332R=\014C\253<\373\245\256;p\316Q\273%*7\2749\205a=KK\222\274K=<\274e\214i=\356m3\275\223\327\233<u\353\237=2Q\003\272\320?\245\274r\025\323=\372\273^<\031_n\275\201\332>\275\214\202\324\273.\257I\275\010?\031\275\321\342\t\275:v\327\2747\341\324\275\266\326\311\274\321\265\204<\025-\332;-\027\025\275p\342W=\3026\321;\300\206\241;\027\231+=\240\3003=\365C\261\275\363$\262\274\035\206R\275\367L\017=\031(\216=\351w\270\275\225\026\215;h\325\233<z\261h\275!B\331\274\262\020\234=\352!\332\274l\3107=\222\\a\275\336w\364\274\222\266\226\275g_$<\243\377\270;lJx;N\252\013=\320\201\246\274\266\024\231=h\221\020\275>\2258<Y\273\311\275\\H\350:\266\2266=U\335*\275\222\017k<IW~<#|\232\274\352X\210<8\n\315<\377\010\025=X\244\177\2748\274\240=\200\341c\275\262\216\225=\230\005\203<\273\177&=G\250\213<p\247 \275\307R\361<N\342R\274h\317\177\2752\220\340<\3658\234\275\204\253\226\274\200\013J<\250y\216=\3663\376<\351\3751\274\013\360I\275\357\235\316<\261\036\026<7\006\024;\3050\240<\326\306:<]\326`<\256#\226\275P\207\337\274\252K=\275Z|\275<\323\224\226<f\202\212\275\037-\204\274Qn-\275(\232j\274\361\223=\274\366Y\3079|\230\365<\277\0365=8\006\036>\362\342\031\274\375w\253\2750)\010=\246\n\202\275\331\371|8\215\300\211<\214\2735\274K\274\207\275B|\023=\034V\005\275x\343\236\274DN\255<\014R\214=\224b\222<\024\346\210\272=8\343\275\215\373\377\273Hf\325\274V\027\222;p\334\020=\253\010\037=\313\365\224<\r\266w=\257\003;\275\272\340A\275B\321;\275\300\333P<c\367\237\275\026\323\325<\207\205Z=\020$\257=\354,*\274\272g\347\274)\356\023:\264\230\n\274\016\300=8\004\356u;\210\037\233\2755\200\222<\226;\276\274\340\274\n\276\337\257\027=\207\341\234\274&\374~\274\\\254u\274\364)\323<\262\035\203=\026\350\032\2757/5=\310\271\276:\343D\003\275\353\244\010<\236\314\021\275\037\307\272\274\216T\321\274\003W\270\274\230\203\323\274\nA-=\273\366\213=\005\254\2359`\241\216\275\273_\327<\256BV\274\247\337X\275og\204\275E\221\210<\377\337\302\274\370z_\275W\t\215\274\313\351q\274\355n\372\2742\002\202<ha\204\275\254\002\271\275\224\212\034=\004\"\035=\n;9=\234CU\274\276V1\275j53=\025\330\006=\333QQ=\343\027\312<c[\261\273\220o\312<J0)\275\356P\207\275\355\267\247=\251\347\020\275\033\373C\2751\026\261<\272\211\013=.\266]\275\020\372L\274\366C\326;1\245<\275\265\013\361\273c\375\263<\256I\020\274\325\364\221=\316\346\016:\241g\220\2740\\\317<+e\244\275C\"\271\273\215\036\003=Wg\311<\321\n\305\2740\032\301\273\266)6\275\340K1<W;\004<\325\356\316<+G:;\363\177\240\275\203\265>\27527l<\302<\231=\212p\000\275\327\030\004\275\350\245@=\355\202\"\275\3638\315<\313F\263<\240\213]\274\343\250\277\274\370\247\274=\243o \275pgB\275n\205`<\022.\206<\312s}=\276^4<\326\270\213=\376\254\014<\2278i\275\236\004m\2740\252\252<\337\224D=y\032#\272f\220D\275\367fx=n\022\233\274\002\313\317\273\370\362\001=\262\313\026<f\276#=\004OI\274\351\344\001\274y/\\\275\236\301\266\274t\253\274\274\331\333\346<>\363d\275\337\316\035=\024\236\351\274p\360R<:\351\037\274\010\213\007\273\311h\364\274\373X\321\274Y=\200;\026mu=\244\356u;N\327\026=\017\362U<^/\234\274\361$\001\274\316u\261<\025\206\373<\030/7\274e\311\200\274l-\\:\'\244[\275g\216{:t\215\233\274\032\213Q=\212\230O=\356\263l<\351i\256\275$\250X=\337\014\r\274\376}\007\275\000+\213=\031\210W=\375\345\236\274K|<=>\365\274;\275g\200\275\316\340\325<5\300\32494}}\274u\270O\273g\335G\275\266y\021=\355^-\275&lA\275\347\017\343<\005\343\325<\376f\306\275\203\017p=\371:\301<\005dA\272L\345\316:U\226^\274\356\021\373<-#\255\273\r\215\240\274\031\336`\275\025\177T\275\302#\214<\252T\027\275\351\237\236;\340.5=\253\363\226<\244\021{\275b?\264\275z,\355\274\244\034\220=x^\021=u\265\206\275\027\032/=\355^q\273\251=\013\275:>\037\274\370\240\302\274M\305\227<\315\262\331\274HF\t\275\276\010\333\275\220L\305\274|\331\206=@C#\275?\2654<\323\347A=\022\375\206<\254\";\274\275]\017<\270\345v=\307\"\247=2\242J=\005\"#\275SYP=\205\226\270\275\324\230\245\274`\217\t\273S\317\017\274\375\266\005\275\264k\216\274\300\013\325\274\304\237\206=y=\237=\203\261\374<K\215v=/<}=\235`[<=\344#\274\354\224\024=\275\202-<\027\021\240\275\257Q\352<\204\353\365<\374\260\032<\271\316\262=8L\224\274\261>\232<39\177<\312\255\302\274\201\273\222\274\007\257\323<e\010/\2740C\222=\220w%=r\3053\275?~s\274\001NG=-\034\367<T\031\n\275\201\240\215\2751C\326<\256\215\031=\207-\315\275S\321\224\274$l\204<wQ\005=mJ5\275\251W\006\275\306I\202;\336\301>=\204\356\0179\235\360$<\202 \207=\344.\217\274\3503\251\274\232\022b\275\265\250_;$\017\257;{\235\317\274\252x\342<\231\346+=\027C\257<P\333\206=\235\352\014=\r,M\275\025\331c\275\2748\217\273)\337\t:\021\010\246=\325\031\333\275\202@,\275Y\217\223=\242\227&<Ma\223=\246<\006\271\336\365\261\272\3149\244\2753h\203\274r,\224<\220`\037;\013\3637\274\225\222\022\275\314X\353;\321\305\002=`\255\214<\333\237\370\274/\203\325=\307~]\275vq\246<\334F\257<`\\\277\274\265u\247=:\367\344<\007\022!=\tj\243\273\347;$\275\316\347\002\274\002/+=rS\336:\002\026L\275\356\016\210<\212j,=\252p\225\275GX\032=\\=\031\275@8\237\274\301\311@\274\340\r\350\274e\226\'\274\277\310\273<\270\177\242\275\222\333\032\275\001\t\214\275u\307\006<\231\251\'=J+\271<\242\336G</N(\275T+\376<\344\320\025=\036F\333\274\340I\n\275\363[\200\275\355\342\355\275\327\324\375=\022\374\216\274\232\217\303\273u\3722\273\345\266\307\274\357\365\313\274N\262\003=\300\331\233=\336+6<\236\tO:\244\335H<X\220N\272N\246\373\273i\234;\2755}\241=\357\376\247=!k\366\274\325r\331<\227c\244\274\n\026a\274f\036\022\275\301\240\346=\3440\304\274J\377\206==\251w=\024X\247=\267\244T<G#];\220d\320<3\303u\275r\277n\275_h[\275^\352J=\237\202\241\275\014\272\210\274\373n\362\275\375\326@=\355\314\"\274\224\'\n=\356G>=u(\016=\334+\025\273\236\273\270<\332Y\356;\222\347\220=\031$\207=u\2406=\315\377\020\275(\324\003\275q\317\305=\006\321\331\272\271w_<\243\tb\274\251\\f\275\241>\212\274\275\007\022<c6\005<-:\230\275\204\242J\275\2376+=Z5{=\\\3665=e\256\030=\377r\017\274&P#:;\307\202\275u\032\213<7\334\334<u3\202\2756\340%=\\\367\217=\361d!<dRb\275\223\207\003=\306I\252<\256cN<\260T\000\275\277\264\212=\'[M<\223\265\365<\027\005\023<~. =\305\320\244\274\263\201\350<\3139\234<\025\237X<\271\300e\275\200\337\331=5\326`=$m\266\274*\376\300\275h\310\225<\201\334\\\273O\t\223<\307\221!=\305\310~=\316B\221\274\377\006\232=Z\246\227\275\304\266\334\272\274,\343\274\366\"\300<\273wC\273-1\247=>\323\343\274\013\3555\274\223\245\336\274\000\303h<~\247(\275\221YX\274C\373\212=\021\271\272<\250\232&\275\032\311\001<\022\261\226=t\3674=>.E\274A\020\301\275\305\357\275<-#\'\275L\204c\275h0\215\274\231\023\365<\301D\224=\262d\243\275\250C\036<mD|=\252\220\025=\265^\370\273=^#\275\363\020\242=^\232\250<q\310\223\2741\351\222\273\205\030I=u\177\205\275\324\251\031=Of\207\275\033\033\323\273\223:2=\276\265O\274f\260\361<\\ta\275\267\021[\274`<\214\274\321\305\312\275\3271\377\271\026>\362\274g3Q:\255\304\022;\304\0104=\274+\014=F\034\267\273?\223\010=\177\254f\275P\272+\275P\320\210=\351\227\243=G\372\214<\203N\261\274n\247v<\302\\\r;\035\303K=\342\344u=bG\037\273\270)\r=\313<\312\273\267\236\273\274(;\242\274gq\206\275\364\021\222<i\203\206\275\375\326\214\274\267\021x=\313\031w=`\206\023\2746Y\375<I\364\233<5\205s<U\025\314\273\177\202!\273\241!\213;:9\372<\315D\304\274?\326\212\273u\330\252\273A\243\220\275\350J\301<k5\255=\374\225W\275\207\225\266\275\241\306\025=x\265\t\275\005\260\366\274\034)p\272F\003\n\274\022\316\305<\347\373@<\217o\217=wr\331=\213\355\010=|u\220\275\360\220A\275\247\302 =H\273\267<\020\236\377\274\337Y\311\2747R\306:\313\275\253\274tX\210\275\0017\343<\013\320q\274\321IE\275\304\005\266\274\233P!>\256\200\000\274V>\361\274\335\r\235\275\324(\313<\207\222W=\231\327\255=\034L}\274\3337\367<\307\213\221\274\3062]\275\201<]\275\352\020P\271)\2308\275\371\275s\2746\205\027\274m\n{\275\007\263\216=\033\311\032\274\244c@=\241\235\235\274$J\317<1\300\206\274\326\022\010=\na\002\275}\256\204=\3625G\275\372I\033\275hC\224\275\374\336\036=#[\027<\267b<\2755&\260\275}*%\275aL\360<+\263\300\275_X\250<d\002\321\274!\230\335;\327\203Q\275k\227\'\275g\306F=n?l=\203\360N==\334\214;~\321\215=\240\217d<\275x\025=\370L\024\275*\n}=(e\257\274\350#|</\207e\272\027\203F=[\333\020\275\326\232@<\377\2279<|\351\361\274\371\324.<\355\005q<\230f\306<w\250\351<\233\213\354;x\'\257=\272\217j=U)F=v\013l=W3X\274\361,\224=@\323\330<\262\221H=;\235d<Z]\206=\212\205~=Q\201\206=\0000\037\275\264\326\357\274\035\252\211;jy\262\275\324\210\363;\215\241=\274\244\241$:\225dg\274xro\275)\263\240<\216G\021\274[\373\203=fl\031\275\2601\t<\336l\304<+\023X\274p\300\252=cM\314\274\375\216\256=W1\033\275\257\016\241<w\006P=i\217\026\275r~b\275\306(G=\360\217\205\275\022\346\272\273\247\001\r=\213\324\211=\n=\225<\"M\314\275\376U\200<\200\372&<!\306\034=\241\375f;?\016l<;\342q\275\316l\0319\320\370\t=.\323\262<\243\373X=S\300\322\274,\214\235\275E\315\201<Ff\014=\200\017\016=Jb\016\274u:R=\342\354\232\274g\257O\274$I\'=\307p\234=\"\334\301=\022\355$<b\300\275\275\260\311#=\254\030\351;S\274\241=<\032\303<\375\236\210\273\267\325S\274m\007T\275\03293<\370\266\220\275\375c\200<u\365\322\272(\213\024<\031\377\226=\351\030\325=\037{\007\275 \241\270<\321\2565=\305\214\237\275\036-J\274\331\231\027\275\3419\302\274\317\366\226\273\022E\364\274\260\275\261<k\323\257\275j\231\t\274\345\374\203\275\222\224T<\036\2107=Y\201\034=kv\300<G\310\006\274k\232\276;tEQ<+\0041=l\355(=X\314\356\274f\263\236=\331m\031=L\245Z\274kh4=\013\025\332\274\317\214\372\274\036\375#\275\323\266==\006\251?=|\351$;\231\004\336;-\236\211\274\322e\325\273\363\233\267<G\300\001\274\031^\237=\022Z\241<\177\371h<a\2221\275a\r\337;F\222E\273\232L\231<\202\325\004=\026\007 \274y\273r\275\212\226H\275d\030^=)\300\225\2754_\001=\2219u\274\325\260\036\275\211\033\036=\202\217\210\275\272VG=Y\3758\275\014\\\002\272\021\267\022\274\202\365\376\273\235>G\273\271-\026=\252\246\320\274\341)\276<\351\200r\275\276\026\306=\001\212\206\274\303;\334;6Kp\275\201\177M<D\031\271;\354\362r\273v\002\322\274\205\346\010=\234L\240\274Q\354\351;\372\027Q\275y&V\274\355Df\275\2576\352\274\253.\230\272k\0000=^\345\374<\201FK\275U)(=zv\217\274\325\373\374;\036\000/\275j\255\027\275\301\365\347<\300\004\205\275_r\317\273\340\223\016>\326\221\n\275\036\361\353<;\373\315<\333u\"=e0\357;\006&$==\021\350=\220\0138<\377El;\331\200t=\201\364\023<\246\367\034\275\024\241p\275W\232\203=\225\"\240=\336K\034=\372\352\215;\'\317\253\274d\026\204<\201\325\315\274I\257\003=\347b\205\275\201\277\277\274\2639`<\201\200G;\216\277]=\034[,;\207<\337\274xv?\275X<\211\2745j\261<M\365T=\036\305\202=\373\322\224\275x\225\231\273\256\321\216\273\232\334\254<\333\203r=\021v\r\274u\010\341<:3\'\274\373\254\312\2750\255\376<Q\256\204\274\246p[\2743\234\026\274\\\302\036=\002b\013\275\335\361\215=)\304\021=u\217F\275\t\251\237<\312\270\217\273\320{z=\227\216\025=nU\227\274\t\2636=\313\352\277<\033\361\226=,\226:=p6\232\2746\362\276<\230\003.\275Hd\201=\322\324\312\274W\235\337\274\021\377L:\334\241n\272\222Z\314\272;\367~=\242\"\317;o\205a<\330j\254\275\002\370\014\274i\352\231\275\247\204}\2742\035\360\274\210z\222\274\270\255\007\274\304\010\345\274\356\344\'<\343\362\214\274\350E4\275\311\3629\275\021\247\230\275j\326\213\274Y,\367\274\201\230\215;PH\226=\304a\277;\036\202S;*M\321<\303)b=<\026\013\275\265{L\274)+\203<\t$\006=\204MT\275\213\220\036=\207\254\020>\225U\206=O\347\345\273T\317n<M\0011\275\235I\373<`5\020=\0362A\275\250\323\266\274>\344\237\275\t\330)<\327\251g=\262\350N\275V\306:=\217\257\305\274X\237+\275`\240\211\275\247\255\215</\3400\275b5\204=\r\342\024<\361\247~\274ID9=\211\300\177;?\234\207=\322\203\300=\025\037\346\274t\207\265\274)\003==,\361\275\274\350\310h<rp)\275\336\314_=\335sj=\361\030~\273r\267P\274Y\250\n\273\\t\235\272\242\002$=\247\267\276<\331\201\327\275\207\242\352\274#\034B\275Q\\\304\273\223{\252<\204\000\205=\205\375\331;\005\272=\275\354V(;\025\374<\274\3037-<x\202\315\2730NC\274\316,,=\341\036\247\275\\\035\232=\347Ac=\257\260\301<K\2022\274o\312\232<G\352\231\274eT\244\275`\377|\275 ?\263\275\267\361\314<\003\030\022\275HOp<\204\323\226;\306\314\034\275\223\3746=K\3776=$\3517\273m1\215=\r\246\324:dHx\275\251\006\377<\032\227\342<\032\367X\274\314\203\374;\303\3006=\342\027C=q\313\210;8.\306\273\206\242\360<\222\262O=\213a\210=\r\314\264=\331:\201\274x\201o\274\300\352:=\002V^\273\254\341\247\275cM\243\274FP\215;;\356{\275\300\'\341;\032\001_=\312\373+=\363\033\014<\251\311\t\276\310\362N\2756T5=N\234J=~\351\221=\210\212)\275z}O=\255\322\r\275\013u\025\275\247\000\311<\342Jo;\262\267v\275\321\345\007=\206zB=]\371A\275@\204\272\274\275\212\204\275&\r\206\275w>\303\273m\006\034=4-\304<R\226P=V`\262<VZ\270<\336\211\256\274\325\366\227\274\377e\201<\222-\223=w\344\211\274\323 X\274bx\257\275\320\346@=\340\034\023\275\276Z\325\275\314q\222\273\341\t\262\273\254\215\373\275.d\262<\225\024\t\275-\2469\2757\023\035</\254\231=x<]\274\322b\214\275\006\201o=\376\2329=\253c\330=7=\206\274\230\225\005;\222\325L=X\363\321\274\016\221\021;\3029\002\275\305\331\314<\033\t\037;\347\341\306<3\"r=}\023&<T\317\'\275\202(f=\273o\365\274=\306D=nJ\270\274]\355\010\274\340Nz\274\t\020g\274\306\374\255\275\005t\321\274i\004\201\275\034o+;!9N\274\314l\236<\2465\327\274G.\264;\313\335>\274\027\014\030\274w/\237\2759i\321\275\005\333/=\355_\252\274?\275t=EF;<\033\364\214<\231\2126;)\343\353;\026\013C\273\322T\344\275\220\026Z=\314\325C=\007\331\006\275\021#X\2752.\257\273;\356\235\274\256\327\200\272o\225\n<t\246\026\274\333G\227=Tr=\2749\252f\274a\255i\274\023\333\213\275\244s\005\273p1\030=\255\316L=\202\203\016<\303]\231=\375\200\004<\226\231\004>\326\307#=\013\324s=\035\321@=^\212x\275\371\275\360\274\272\002\303=vU\300<\032XM\274\034\251\027\275\200\306\302\273\275\330\271\274\003\032\342\271&\353Z=\003\220\252<\021!8;\230\222\272=\306\217\215\275\216|\277;\332\010\272\275)f\020<\tk,\275V\213\356\274\277X7\275\002\374B\275O\220\026\275\006\342\225\274\266=\026<v\317\243<\217\020\332\274\022T8<\355\343\210=i\347\177\274I\372@=\266\306\021=2\265.9\352K\257\274\333\313\257<\014\347\243=S\342m\275\177\264\377:\212L\035<\236\230\330;\360\320\034=\244\202\014=\021\321J<\203\350\356\273w\221\227<em4\2758\236\366\274\205\375\236<\365\374\341\274\214O\220<\360\246I=*xW\275C\340\357;\235\342E=\326\r\304\274\233_\037=\216b\"=Du\020;\306L)=;?\345\273\316\210Q=~\372C=\236E\273=O\301);\336\334\200=H\025\223\275\\}\243=^h\361\274\220[\236\274c\215\032\275\3266\214<\202r\373\274\rO\032<\306\022Y\275\2140~=-p==\254\300 =\366;\230=\210\177}\275\311\326\326\273e\036\277\271\035\372(=\333\261\"\275\223\024\210<Ml\245<\232\315w=;\177\242<\2670\224\274\251\307\223<w\201\265\274R\363\234<?\342\001\275\363cH\275\212x\201\275j\017$=\035s\202=\255\224\231=\336N*=E\342\272\274:\201%\274T\250\372\274\361\371\205=a\003\203<+\340+=\nLF=A\243A\275\036\226M\274\253z\230\274~6\337\272\000\200;\274*+\321\274\376\215W;\034\231^=\272\014\253\274\211\032E=%\003\321\273\327\333\307<\003\257\227=\255\315\225\275Z,\036\275;\000\223\274$U\201\275\306\032\026\275R#\371\274\234\203*\2757&+<K6R\275\261\331\\=\226i\221\272&gx=\210\220\314=\376\006\206=\215\224\273\275\232\037\244\274\250\214\342<\034I\\\272\330\214\315;C;8\274\206+\237<\277\256\023\275v\266\237=\023\344\253\274\313\n\215<\000%\246\275\277n\271<\364#\335;\274u\t\275\0178\332:=\003\246<\206}\255\275\221GO\2755\230\177=\263\'1\275Z\253O=+\257\265<\232\023s=<\r{\274\322L\027\274h\264\000\274*~\263<\357c\254<\212\253\202\274\0263S=L~a=\360\226i=\250E\210\275\022\240x\275/\225\375\274\023\202\246\273[`>\273F\335\372;e\242\233=r\006\315\274\321\227E=\242z\255\275,\006F=\336x\304\274\277\345H\275\265\373\270;\241\207\313\274C\241W=C \363<C\001\267\274\217\271\277\270U\334\236\275\327Y\034\275NI6\273\021\326d=\232\016\256=\035[\212\275;\013M=\n\005\371<\222\026\253<e\305_\275\243\263\322\275*\366\326<QA,=\\\000\003\275\214\363\031=\035\233\326\275 \372\356<V\242\022=\272\315;\275\246o\316\274\227\023I<\021\271&\275\256\217\031=+\"\014\275\t\212\325<\214\360\211\275\031\241\237\274\207\'\214\274\242^\n\274`\305\234\274\260\271U=l\0225<\t\230T;L\232\236\274\372P\352\274I$\361\274\'\321\026\275a\220$=nI\237\274O6\333\274\353\267\224=\026V\220\273I<I=\220H\217\275\235\273\023<!\031\037\275\274\275\343\274>\222#=\264;\261\275\016Z\341<fs<<\002\202/<\025\3102\275\226\250\201=\333\376\216\273o|l;\350\230\033<H\262I\275\305\320\354\274\217\315w\275\033\353M=\214j\005\275^Z%<_UK=\221\362\215\274\035&\212\273:$\307<\271\272?\275\306%\311=\007\277\226=\373<\212<u\236[=^\237\344:o\254Y=\317}/=\005d~=X\224\212=5-\202=xB\010=\365\353\367\274N\233I\275\202m\272=\000\372\026<?\316\240<\326\243I=$7\357<\214\247\020<\024\357\252\274\302\332y\274\364/\334;-\274\266<N\016s\274\360\024\027\275\272\rU<\010*\r=\326\234\234\274\242\321\035\275\347\221V=\217\031\n\275\331\020Q;\\2\205=E\3105\274 \037\234\2758Q,\275\312\251\005\273\335\034\201\275\201\331\251:B\301\030\272\352\215@\275|mO\274\0027u=\\<k\274\323\235\006\275\032\360o\275\324\346\243:t\253\336\275\263\303G=C\264\242\274[\316\006<\030R!=7\rs\275\242\372\270\273\356\346f\274\256\265\272<\300\002\234<\025\216@={\334\035=\302=L\275S\203w\275\240\211K\274\n\316F\274^2Z\275\341\372\301=\237}\016=\211\365\305\275G{K\275\017\360E\274\374\354\264\275\'\320&\275q\243\001\274$4@=X}\223<|N(=\260\027\341<\374\216\277\275y\2526\274\321\256\036=\347[t\273\336\n!\275\241\271w=g\t \275J\222\346\274\304hC\275\231\236\322<\333\300>\275\177~9\275\325[\025\274\\9\231<\312\227\'\274\210\rz=*\312\235\272\3239\247\2753\207Q\275~\300\r\274\331\225\242\275\231x\212\274\327\336\333;Q\035\032\273^\262\036=U\211>\275F\"\244<\200\236.\273N?\025=eG\243\273\034+\256\275\212x\224<.\250\024<\245\224u=\271ZH\275\005\276\313\274Jv*=R\274\276\272m|%;\324\315\212=\006*\216;\317\272\306\274\306(\372\273\306Ah\274p,\240\274\007\267\021\274\027af\275\3520\027\275\030 \202\274?\206\310\273`:\361\274W\035\230<0P\222\274\330\343\230\273r\024}\274\357\353\245=\226\024G=\303\231\334\274\215T]\275\214<\326=\267\025\001=;%p\275\350\372\035\274\345l\263<\225&.\275a\177\346=\305\223\221\273\030\016K=\005B\364\274\320\260S<\340`\217\275\023\322]=2&,;\252\270\357<\273\370\374<\221*\374<\315\204U\274[\254;\275\031\301\312\274\343^\203\273\346\204\025\275\022\350A\275\201\030C;\324~<=R\342\031\275J\365\274\275g\263\207=3`\227\275\033\236\262\2759\215\220=\247G\245<\017\031\356\274\204\016J\275\357\337*\2747\363\237\275qy\013=\212\221\263=\n\331u\273\233\031\205\275\362\0139=4\003?\274\010\262\245\275\245\367O<\005\343\251\273?\272\026>a\227\320\274\366SX;=\\\025\275\202\010)=\376\240^<7\263J=\34614\275\252d\024\274\216[\006\274\311\030\007\274\324\250\266<T\353\200=;\214s<\3073\234\273\031D\002\275\375\3764=\273\273\024=\031My\274\322\264\207=r\3746\275\313\341]\273n \\\274e\014I=0\'\335<Ljk\275\317Cn=\310\362\215=\224\022+<\267#\305\273\333\026\210\275\316\377\016\274(B\023<f\212\212=\212\006\227<3\271\213=\003\2259=\326\375\225=\203\220\354<\000\234\354<\357\224\007=\010l\217\275],\273=pm\216<\270\225\271\274|^a<w\234@\275\302\240\025\275\254N4<y72\274\344>\037\274\005R\234<\246\271\260<=\177!\274?\325c=\224\177\360\274[C\242<s]\000=;\014W=\305(\201=l\245\371\273\312\206\244\275\304%\003<\262\267X<d\337\200\273\r\"\327;\346\305*=\352\033Y=\025\351E\275\025\330w\275\242\202c\275\031\215\270<\341\240\374;\003\240\377:\020\013_=U\'\215\275\235l\304;\345)\307;\355\353,=\024;\211<\022E\\<*\300\036\274(\376\325\274\3102:\2752\323\336\273\r\320=<\375\317\204=.\320\271<1\246\r\272\275d%=;<\246=\252e\213\275\300\275`=\'\203\216=\200\352\321\274l\025\271<.c\034=\2625\273\274\362?\271\275\314\347d\274\370\254\214<\300/\271\273\013$\272\275v\326\233\275es\335<\330\245\016;\313\321\234\275W\251\257<@-o\274\210\024\216\275!>}=o\244\033=\266}\245\275\020\037\014\275\002>D=N\034\275\274\305K\310\274\364\'\344\2756\325\276:\022|\r=hg@=\361\t\202=k\025L\272\260\023\000\275\225e\210=k\026P\275\213\027/\275o\005*<\371%/\274\244\303J\274\345\356\206\274f\205F=\372| \2759\003\024\275\272\354\014\275\026\272,\275b?\252\273\225\204>=ke\211\273\321`\003\275|\rG=?|}=\200\007\000=\351z\371\274\215\262\312<\307\304*<\243\343m=\210Rx\273l\357W=\236L\311\274\206\236\250=\016~\370\273\nE\311=\270\226\201\275!\314\240<b\324\177\274l\347\242=Z\337\235=\2422\354;9\340\021=\177i\027=HtX=\304u\024\275\021W\023=\360\234%=\371o\006\275\254\r`=\212\355&<\206\267\207\273\'\334v\275\267l\'\273\323a7\275\337e\376<\350\022\334<%\255\307\274\265\303\032=VQ\337\274y&\261<\006:\201;4/?<\2759\306\272\231\206\347\274\317k\206:k\207\321<\234W\242<C\275\210<2UY<\211\233\022\275g\"\r=\225\340n=t\2471\274\312\350\022\275\346=\002=z\223t<\033-\261<\250N\234\275\377\254\016\275\366\261$=\007\241\344<\345\264\321<\346\3501\275\363Vu<\034\031{;wzf\275\363\231\000>\325\236?<\022\326\250<5\036\030=N\305g<t\306\363\274\261\355\177=(\250g<\244?\245=\346\314\321\275O]\243\274\300\346s;\'\037\020\275\205\365\021<\251\211+\274\275(\214<\315\"Y\275W\177,\275@\245\350;\024a.=.f\r\274\341\317\321;\211\006\'=\365\343\005<\315\213 =\247\231\245\275\271\301\334\274x&\006\274r\242\003=\300\016\036\275\220\206\034<\030~\"=\365We\272\367\334v=9\336\005\272)\346\321\273\330\333&=\244\216\271\275\244h\033\275\352\"\271=_\261\201\274\277\365o\275\013~\276<U\221\233<,\322a;0\3051\275\017\033\024\275\'\317\311\2753\225\270\274\033\214C=\037G\250\273\004\266N=\243[;=\262~\300<\255{#\275\241{g\274\014)\205\275m\337\005:\317D\315\274\344W\346\275>\023\236=\344\345+=l\272\372\273kq.\275\246l\020<\177\005\313=Ce\322<\220\254\244;.\2417=9\336\355\274\006\030\214\274\317\000\250\274\243\354[=\213\231=<]\347)<\347\321\024\272\301\377\314<\004\375\231;[V|\275_\3556\274\346\234w\275\321O[=\336_\023\275\307\343N=Vq\265=\2136\266<\367B\003=\365\251{=\032\350\177\274\253\304\320\274]\014\202\275\375I\021=h\310\233:ot\r\274\202C\305\274\220\220D\275\326;E\275i\023\205<\217\026\217<\3118\263=5\231\347;FH\234\273\204\037\227\274\343\222R=5\336\316\275\253\231\300:\220\235\233\273V\215\363<\025`\r=\2133\354\273\005\312\344;\224\234n\273\235\223i=\223\025\234\275\202\372\t\272\205:J\274\254\335\026\274\340\230\211\275 \272I\2745\261\226\2744\343\200=\322\000+\274\270d\245\274\341\024\332\273\261}M=y\331]\275[\025I\274\337\356\324\273\262H\202\275Z\252Q=L\236\032=\"\332\000<\344\251\207\2750\256\002=\211\300\362;5\355\304\2750\3406=\252\201,=\027\326\305\274\330\330_<ED\334<\261\035 \275p\366\317;\034\250X<p\032c=\345\316\344\273wx\016=B-\240\275\216~\256;\255*N<\225\356\265\273YE\343\273\317\217U<?\2421=\262\220`\275\272\215\212<\202\310K<\250\342\215\272Pf\303\270Qu\207=\242<\345\275^\366\266\274\204\013k\275\t\313\335=\344\314\232<\023\033\237\274Ch\t=\':Q;\3611\202<=\307P\275[\314D=Q\301e\275\020\216\201=m\216\016\275<\215\320\274a\277\340<8\016%=\363C\001>7\267\035\275p\310u=\352\240\301\272#g\271<aM\274\274\245#\003=x\377\302<\210\324N=\306\350\000<59\271\271\203l\255=\276US\275\363\265\303<\231\256Q\275\033\224#=\324\252\317\2746w\243:\334i\221=m\013\262=\024B\237\274@\006\223\273\211\205C=\335\317\033<e\234\222=\352]\321\275\225\230\r={\225o=\337\302\273\274\342\245\211\275\332B\007\275\360\220\301<I\\\304<\317\247u<[5\314\274p\204\230=\305`\350;\257\200\210=\n^\371\273\325D?\275cV?\275Y\026x\274\014\034H<|Z\276\275\r\204\300;\370\231i\274\344\233\247=\2718\026\274_$\333<mv5\275%\200\204\275\016\266\257;u\245\\=\347\315o=\336U\236=>S\2729\231X7\275\0378_\275J\361G=[\031\304\274pP\034\275Ji:\274\306\302\305<u\263\314<\023\212\024\275IL\003\275U\335\325\274\205\371\003=\201\017\201\275\340D\361<q\251\234=\276\330<\275\246\222_<\371\2259\274u.w=\202\311\323<\363B\003\274\207 \333\275v\376\266;\362\271\023\274n\256)=U/\257=\320;X=~r\r\275\300Gt<?\342\272<s\021\331=\361g\273=!_B=9\313\220<\256\276\013>\323\'\3129\025S\315\273\307\361\273<\006\356\276\274\031\214V<\320\345\221=\215R\311\272\233\346q;7j\371<I\010\374\273\306\3748=\215\300m:\212\\\207\274\235\3740\275QY\234\274V%\325<\017#\346\274\001\337\202\275M\316\247=#P\025\274\034\342)=|q\271=\342\020\203=L\253\277<\267\327\024=$\264\017\275\343\'\001=\210\331\024<\006\250Q\275\017V.\274\333#\346<4qk\275\210F\033<QS\032=\2519H\2746Q\202\275nI\"\275,\\P=.}\221\272\332\332[<]T\251\273\366\201\324\273\225\035\351<\276.\356<\254\022\334\274\213\311\264;\312\370\021=\356#:=\213\364\212\275\031O\252<X\246\303<HnU\274\326\360\014<\243\252\226=\343e\216\274s\340u\275\3236\255<\027Lf=\365p\242:\231\343*<\r\036E;\016\277s\274\240\305~=8\225#=\332s\342=\277\024\213<\363\220P=\206\261r\274\3224/=\230\276\035\274\211\242K=\270\211\337\274\367\327\001=0\210\344=BwW\275CFw\275\374\343\265\273%\305U=\020\223\024\274^\263U<i\354Z\275\034\313+;p\256\211\273\036%p=,w9\275f\363^\274\270If<\3647m\274vUd<\332\273$\275\327\237y=\230\344\033=i\316B<E\014\021\275\027\272\n=\357\323\025=\366\216\243=\220\327\215\275\233\375\242=\274\003\221<\2566\023\274\336\214\024\275\000\2257<\317\365+=F\323x;\202\266k\275\212\2234\274\r<\367\274\361:;=R\340\357<\237\357\210;\000\363\"\275\177a\243\275\370\020\327<0\254\254=J\330\030=\270\255\203\274R\271\364\274\325\242\262<#\316\300\275\"\020\254=s\310\210\274\031\2619=g\315e=\203\016\242=\351\230\222;l?s<`h\372\271\377t\026<\371|\271;*\232h=\250\354S= \013|=\223{\027<[N\241:[a\355<\277\0165\274\002\246\355<\270q\375=W\021\217\275\"\264q=\265\202\211\275\234\321\277<F\231\006=\010\354I;\325\227\315\274\357\023\237=\235x\335;0\301\221\274\236e^\275N1\010\275\034\252\241=P\303\377\274?\302G=\310l\262<\216e&\273E\0211\275o?\010=y\030\333<e\276s\275\306\236\214\275)q\361\274G\376\017<\206q\300\274\372\333\207<o\202\340\274\302>\215=\004\267d\275\000\034\315<\206\324\t\275\232\223\343=\374Ho\275j\263\014\275\007Zb\275\303\351)=$\360\312<o:\214<b\357\223;[\200\310=\265\317?\275\243\014\211\274\362\035)\275au\027=\254H:\274\247\000\260<\034\241o=\252,\214\273<\246P<\365_(\274\206+p<\201\361\013>\207,\363<\305\344\231<\0352\246\273\303|\277\275\004\343\266<\304\277\214\274,\3270\275@\356\357\273~\"\r=\271\255g\275\006&\233\274\206\253\360\272\334\363r;0\234\007\275\210\246\2678VS\'\274\006S\367\2749\\$=\022L\004<\315\224\350\273/b\033\275\273 q\275\206J\246<\256\244\244\274\334\373\270<\372d\010<i\337\216=\330Nr<\375\2722=\177\010\005<\352\372(=i\260/\274\305\304+\275M\276l=N\201\312\274\356<\256\272!\253\337<\206!\363\271\272\222\320<\031\016\232\274\334\236\267\2754\242I=\315X\246\274\330\017f\275\004\330\276\274\346([:l\030:\273\016-\032\275f\255\301<\033:K=\345\320\200=c\350\316\275\025\355\337<\3705\346<\025\273)\274n(=\275\355\360v\275p\007\207\274\'\330\233=\244\371\245<>\212Y\274Q\274>=`\325N<Nq\253;\236\024\230\274\263E\344\274gj\365<\211\342\305\274x~\026;\333mn\275k>P=\201\361\202\275\337\026P\275_\263\265<\250\"\033=fm,\275\2141\240;\207e\322\274f\312\220=T\314\201=k@\354<Lt\347\274[\205i\275n\301t=\311\000\351\274\222Dx=D\325_<PO\225=E\235\224;\324\377\021\275\227-\312<\310x\026>j\237\230=\354\313y;\\\344\326<}/\200\274@\340\376=:\263:=g\363\362\271\223\240\222=\032}\221\274\030\335\031\273W\343!=\360\242\300=\\\246\022\275\301\007-=\324=\021\275Z\237\264;<Q\373\274\214\022\017<s\352\226:\204\311\347\2750+U=\301o\207\275\025\202?\275\305E\033\275@\262\371\274\344a\027=\221\327q\273?\"><\026@r\272\301\227\365;\362\357\350\273\353\034\351\271\324\217!\274\351\033\\\274\3623\214<+\021\345;\037\016\216<C#\007\275D\231\027=\350\237R=\372\\\234\274t\307M=\344O\254\274#[\337<\016\025\355:\251*\010=i|\254;\264\244\300\274\312\324\347<\t9\345<Tx\036\274\351\240q\275\200\216L<\r0v=U\350\220=\322\206\330=\362\305e;\273\364\356<\275\360\217\275?\006{<\326i\235<\325\313\316=\034\210\016\275\274\004\312\272w\212\233=\n`\330;\022\325\022\275\343\212\025\275\307\204[\275\364,\r\275\212\345\267=\331#\035<m 8\275\252\020\231\274\035?\260\273\373\373\205\275K\007\372\273p\023\204<\235\350F\275\341:\341\275\n\252A\275\216\370\260=\274\010\256\274\322E0=\007\334s=\375\312q=\227\221=\275\322D\211\272\332J\234<\030\347\022=\332\022y=cJZ=p(\300<\276\327\370\273i\037g=6W\344<#\226\232\273\232\302\375;I\373\320\275\324ft=6\256\346<\246\332H\275D\370W<\227\'8=\330\325#=\300\316%8\247\347\337;w\236\372\274\330\277\364;\024\026\203\274\255\232U\274n*+\275D\241\024\275!\234\343;7D[\273\310~\371\274\353\201G=2R6=)\\\177;\257n\362=\244^(\275\235\352\376<c 4\274s\242O\274\206\005\220=\251\215\253\275\032S\212<\333e\236<\227ap\275\274\251;=\255\020\013\275\024\352\305<e83\275>\376\263\275\t-\207\275\360\373\331\273h+k=\022g\304\275\026\022p;\342\037\002=`\330\375\274o\333\'=\245n\305;\241A!=\205\222m<\305;\211\273\365\3278\275\212\337\261=\"J\"<\017V\272<!?\235\274\265\303\220\273,A\327;IQ=\275\313\257\036<\023\376 \2758\003\207=\366\323\341<\037\266\351\274+\365\303=i\213C\274 L\334<\224\247s\274\324\310_=\211\211\314<i\305Q={s<<eTN\274N\271\375\274\211i\256=}\366\277=:C\333\274\257\247\341\274Y\032s=5\253K=\345\362]=\004S!\275\204eF\275\254\263\373\273\020\361\276\274\252\231\371<\265\021\t\275k\363\030=hr\252=\374\254\007\275[O\022\275;\020\216=\377q\363\272=\260x=C#(<\217\212\"=T \013\275.\010\177\274@\352\222<O\362\221\274;\317l=J\373\013=,$\330<J\354|\273(\375B\275\374\201\345\274\020\352\315=\277I7\2738\277q\275B\'\031\274\273\3219\276^\303i\274!\220\031\275`~&=\007\352\026\275&`\337=\037}\264<\236\233!\27574O=\373\036\027=\317\372\275\275\341\344\232<\246\370\020=\255\275J\275a\2039\275\276m);\334\200\274<]L\327:\366!N\275i\255\226< \021W=\021G\241=\\1p;\035\200;\275\001q\307<@\246\354\274\021h{\275u\206\233\272\344\257\274=\314\323C\275\332,\266\274I\277Z\275\311\244,=\321\216\246<\270u\260<G\207s=\342\276J\275\363\275\016\274\262\303\352<\nK+\275\033\2629\275b\2249=}\362\026\274b@\265\275L\007(=\311\345=\273&\3773=\242\021\335\274\331&\241<2\203\t=\245e\236\275\323\010\025<\365K\020\275QEk=\035\337\256<E\324!=q\351.\275\326\354#;\027V\024\275\244\315\215=\355\320\207\273\304x\254\274*\275\247\275\032\215\364<\230\200.=]\246\'<\014\237\030\275\035!\201=\372r\323<\005\037Q\274\235\351\003\275\262\032|\274\020@\342=\367\361\200=\221\267\2779\256\022\312\274C\301\220<\361\370\350\274\354x\357\273\t\207\010\275\357\002\236\273\365~r\275\261\244&\275\016Gg\271^\317L\275\312\264%=\377;1\274J}4=5\347\004;\342\013,\275\255\352\355\272\016Gu\274\240o\027=\004*\246<.y\004\275gN\273;\025`\342\274w\362h\274\306F\330\273G\231\021=\343*\334:\277A\355<9g\207\275\214\277\277=\300\201\"\275\014\220\247=\217\222\235\274\372\t\021=+$(<\216\240\200\275\000\364e=\034(\250<\303cT\273T\371\016\2758\007B=\201l\222:\305\232I:\337\330\030=jt\242=r\270Z\274\323~\306<\016\\\315\273\203\222\033=\227\211r\274\360\022\305\274[\274\206:\2432\335\274v\376\267\274$\252\002=w\312\364<^\276i\275D6o\275XUU\2750\347M=\311\326\373<\253\256=<)\326R\273\037)f=\223\r\266<+>5\275\326z\020<{\343\033=\n8Z\275\007\tV=\272\333\341\274\207\204\245\273\354E6=,T\224\274T\210\265<Q\214\220=m\026\311<\246)\013\275*\001\233<\261\017\245<\204<m\275%\231\251;J\266C\275\021cp<\007\026\034<\360nP;\343\301\201\275b\003\034=<\001\006=s\250Q=\251\217 \275\252t\251=>\363\t<\030Z\364:\333\rV\271\007\236\361\274\036\315B\275\376[\274\272\203\270\200\274L\346y\274\020\026\006=\333\3264=\377.\210\275\265N\327<\212\337\037;*\250\273\2736\035\231\275X\037\022=\352\341R\274\177\354\017<\'(C\275*7\225;\230\231\216\275\'\245\213<|\343#\275\321\337\237=<\366\227=P\266\324;\261P\3256uA\262=v\241\302<=*\037\275\037\314;\275\306\332<\275)\014\005\275*\242\331\274\035\251U\275\027\014\201\274\345\330\025=,A^;\016\207\214<]\305\350<h\237\353\274X\331\254\275\245\221\321\272S\034n\275@\010P\274\026!\351\272!\025]=\225\301v<\330j\006=Z\233\021\275\315\216\345\274\334\036\247\273F\375\000\275q\0359=\325\333\305\275\221\365O=,\207x<^\240>=M\310.=\232\331L=\004\252\226=\t\370}\275\301\347\351\274D\314\201<\357\360\025=\262,L\274f+z=\010\310\027;\255]\346\274\342\034\007=\335\365\002=\305%@=\005\253\214<\024\211\355<\216A\241\275g\021\206<\224+\234\2747\326Y\275\216\254\242\275\t5C<\363\333\007<\270\210\021\275\375\364\264\275#=\356;0IP;\240J#\275\333\236W=@\354\254\273\275\032b;\357\255%\275\203tJ=T \261\274i\336\255<\3561\035=\244\375\246=\357\3379\275\372d\212\274\214WP\274\223;\304;9Z\201=#H\261;\306\377\016<\3312\362\274KA\001=S\000\253=\245(1=\357\326\237\274\253\000\371:\035=\200=\305\253\335;\252\261\033=\375\2515\275\342\006L=.\257#<\311sZ\275\262\265\234\274M\t\034<\032y\316<\363N,\275\266\205\000=\361\246\217<R\261\300\274\362\275\010\274\320\003\274=;@\250=\325\340\247\274\317\371\300<u|\262\273\016\355\314=\236c\265<\002l|<\245\354Z\274\376P\334=\343\353\322<\201\034\206=\026\327\"\274j\217#\275\244-\337<\341F\227=ew\017=\217\031\037\275\375\375\355\274xu\267<\201\245\274=\240\210\355<.\216U\275>e\314<A\251C\275\262\266\260\275/\036\256=\001\364\315\2730H/\275\030}V=\03008\273\2077?<\"W\'9\326\262\221\275\017t;=Yf\370<\027\345\354\274\366\351\372\274\033}\326=]\272K=s\262\000>!\260k<\240\004\345\273Z\352*<J\255\265\272\331\316\201<\365\271+:Qj\371<\013\006\n\273y\275\370;\360F\251<`\314\243\274p\216u\275F\363\326\274l\324y=\034{<\275&\310\263;gv$\275\377f\001\275<{u\273\026`Q\275N\261\201;&\326\312\275O\001\330<s\001K\2744\210w\275\320\034t=\343U\321\274\262\336&=\257M\267=7\357!=\345\r?;\247\261\250<X\346G=\256\364\317<\2379a=\215Sk\275\263\323\217=S\374R<\366\221\240;X\033>\275\331\346\343\274\367\214\255\272\272\263\321<\241\030 =8\034\302\274\366\362r\275D\245Z\275\022v\260\274\210)\311<\333/\020=\372\317\031<\340\010\306\274\263\213\341=\216;\271=a\236\024<\312\327\005=\304\371\023\275U{\'\274\016\342,<\353\247\216<\301\277R\275\004\203\263=L\213.\275\217\021\340=%``<\363G\355\274\373\247><\204~\203\275\226a\007\274E\351\220\274\200 \220=\244\0373\274\350\243\026\275&\326\247\274\211;\301=\345\024\247<2\266\212=\347\334\301=\252\036%\274u\334\250\275!\262\210\275|\215\005=<\253\335\274\377\364\326\274\237X\013=%\335\225=\257\272\257=S[\030\2755\313\037\275\216u,=\350\301\276:\377\3737\275i.{=\351h\030\275!\366d=\030\323\320=t\223\332\275\366A\350\274E&\311=ha\224\275#\323\342<\327T]\275\343E\001\275w9\267;\216\003\242\274\232\334\023\275\035Y\003\274?\271\000\2751\226K\272L\035\321\274\322P\326:B-c\274\305\216\266\274\200@1\274v\320\202=)\303\212<\246 \226\274pg\364<kp\371<!\352\233=D\264`<\374\256F\273\351w\251\275\2029\024=\014\231\322=\376\007\213\273\036r|=\032C \274G1,\275L\241\330<\367\374#=\300\357)<\340\024\264=\222\375\026\275\321\262I\274\265\243B\274\356\253\037=\307(j\275M\204\337=\001\212S\275P^\230\275\315\321\270;\366F\346;\276\030O\272\212\366\314\274\365x\325\274;C=<\361\241\264<\306~\226<%T\036\272\3079<=\"?\347\273.\314w\274\036\346\203<\340g\000=\365\006\027\275\264\234\225\274\241/\210=\367\311:\275fA\336;?L\256<\322\0332\275\213\023\010\274\262\207S=\013\n\000\275+\301\262\275\004M>\273\031B\004=\232\263\242\275\356\202\364;\237\206+=\333\032\270\274\227\355\325<\307\204\034=!\370\017=5b\036=]A\324\274\004\277#\274ti\206;\267,\207<6\227n\274\324N\275<\325\031\007=\247\346u\270L\036O<\204\t\016\273\237`\317:\013<e\275&C\246\274\343\023\243<\306\337p<o:\3169\221k\035<4Q\225\274{\300\271\273\002;*\275\277\200\231;\365\243\001=M\314[\275\026`\221\274\206\322\026\273jA\000=)~9=y\263\222\275\232^4\275U\027\205=\036S\237\275\177\367\355<\366\300\013=\273\364\256<\314c\304<\350\241\'=J=\363<\250\026\007= \210\020\275 \010\247\274U\201\3739[\311m<\356\306\030=\2046\346<\205\023\026<\252\310\267\272g\320I<<8\215\275!\353\272<\177\234[\273\203\317\353<^\017<\275\351\205~\274\337\356w\274B5\203\275\233\010\335<\275v\201=S)\313=\305\241\250\275\3243\032=Gi\251\274\310\325\234;* g\275\370O\031\275\324z\035\275\353B\347\274\342\224\363<\201UW\274\226\237\035=\266\327\246\274\001h\330\274\231Y\010\275\257\3778\275\353?\266=\260\254|\274C4\204\275\223\207C\274\365#=\2753\'\177=\345\372\014\275\241X(<,r\222\2751D<\275\206\314\214\274(\327\027=Z\0304\275D5D;\300\366\220<\"\232\'=\014\345O\275JP\221=\'\031\377\274\301\253\244=\304\275\330<&\307\222<h}\224<\364\364\306\273O5\225=\303^\222<\350\237\345\274\214\367p=\"\254\204=Y\220\276\274\034Wm<\210\331\222=)\305\365<\225-p\275\252`\374\274\0312\013<\367\317\227=\025V\r=\246\207\342;\032rX\275J\025\n=\273\213\216\274{\255\333=\027\367\014=s\3531;c\'7\27592\337\275\321\036\363\273\031\271\373<sW\201\274\272.-=\265\"\223\274]Ug<\250\326\000<\277\036\360\273\336\302A\274\305\306\220=<\0325\275\022\263\021=\267<J<\212\030==\314\362#\275\243\204\241=\222\206#\275\222\363<\275\213\\y\273\023\330\337<a\234\312\274\271\202\302<\016g\244\274\022\301g=\323\251\244\274\360\223\'\275\235\242\013=\016|\302\274n\025u=+3\211<\320\247\342\274\2249\210\275\306\375\230<\013N\231;OBB=\203\225\025\275\2101M=\310\370\324=\005\315\213=\362\307\246\273C\351\234=\251,\275\274\360\322\363<ydy\275{S;=\364\225\353<\'\307\020\272*w\300;O\006\265;\022|{\274%\305R\275\217\355o< \255\200\275yTP=.\035W;>\367\307=E\026x<\200\337\352\274i\204\000\275\200\357;\275\224\302\026;\005\260H=\022\261\005=}\'@=\364\027\377\274z\335\241=\346\273\372<C \204\274 \"V<\301\2445=\330\240\222=\204D\206;O\347\017=li\273\273f\364\261\274A\324G=\374\242\t=l\202\032=\213\230\253\275\351\265\312\272,\361|\274j!\305\275\022f\247<\220\037\236=k*\242\273=4\327\273z>\032\274\3766J\275\274\315]\275\304\202\317</\005\222\275T\200V=\246\3417=\312\340\277;x\203o<\t\342\324\270q\004\261<\313\225\334<\261$H=\272\316#\275\010\327\342<\031\366\213=\202\027Q\275\306x\272<\263\362\216\274!\354\357\273\277s0\274\205\303\316\275\207- \275t\034\357\274nV\315\275\255\217\247:\373\233\002;\216\224\020\274||^=,\027\265\274)!4\2745\263\306<\273\277\262\274\323\255\t\2759\267\036\275\225z\265\274\024[\203=N\317\214<\253p\036\275\254\321\243<\214\344\223\274T\216\271=6Bt\2757$W\275\034\004\027\274\016\227\014\275\337\343\201\274\013v\220\274@\2158<\221!\332<\216@\343;\241\002U\274\026&\240=\323`\341\274\305\340O=\222\360\346;\230\346\336=\376\321B\275e\020\201;5\315\217\274\375\274\304=\014/?\275\342\204\005<\313\003I\273\002\204l\275\3333[=\021%>\274\240\014\250<g\243J<\352\255\\\2745\\\264=\245?\014>\220\374\373\274\215\361_=\320\3619\275\240\262\006=\030\365e\275\364\303\007\274v\364N;3\032\266:\030\373\356\274\251\242\000\274B\266\223<\216\034\201=\333\256\224\2723\n\367\274\270\343\025;\223_\363\274\003\331\325;\013`*\274\2222c\274\324s\"\274\340\216I\274\021\027\016\274Q\222-\275\271\000\301;\022\242:\275\357\245\217\275\207{>=\235E\374<\2722\010\274\305\010\226=M\330\205<\017\220y\273\372\364\025\273!>q=2d6\274e[\223\274\013\263\230\274\020b\232=\342\254\313\274\370\311\265\274L\355\010\275-q\265<}\342\026\275n\344l\274j\351>\275,\264\314<\003&#\275A\301\210\274\220\251!\275\361\246j\275n\316\t\275\255j\000<s\203&\275\275\250H\275\215:B:\344,\366\274\351\205\307\274,\302\254\274\362\213@=\225\006N<A\335\025\274\372m9<;\354o=Z\rt=1\335L\275\'=\223=\001<\200\275\t\267\240;\201\240\222\275\252;\265\273\226\372\034\275\243\001\207\273)\327\005\275 \265\364<\306Y\213\275F\025\365\274N\3441\272\330\2556<\n{\022\275\035\023\340\271\034:\230\275\030\377\312<\367\356\344\275\2765]\275\205\004T\274/\321\242;\276\350-:\357\2221\275 \356+=N\254=\274L$\n=\242:\031\274H\261\025\275]\325{\275\324\254\376<\324\267\026=\220E\253;\304\243\271\274\270y\303=X\243 =\035T\311=!d\036=Y1\"\275\361\\.\2753\274\000\275d\304\006=\254\221\213\275\256\233\336<\014\224K\275F\301I\275\0010`<m\366F=\320:\035\275\360\n\032\274\317*T=\352N\201=\372\365\316;\021\233\211\274k\373\206=[\213\200;\220hd<\260:\314\274\300\265N\275\027H\323<\335\370P=\344\370\264<\034\302\254<A#\230\274\014\216+\275\026\2276=\341\036\201\272\274\202\201\274\017{<\274\204\214m<1\376\026;\347\324\"\275\244K\202=b\317\022\274\010\000\207<\301\207\000=o7\205=\303\305K\275\377^\336<\253aY=\372\2210<\223\226\260=\236y\025=\377\2148\273TDU\273\320c\327;\312^\217;\306\014u=IG*\275\213H\016=\350\013\351<\231\344\314<qi\234=&<\277=\3000\027\274xf\016=\271c\317;}+\301\275\260TT\275\210?\010\275-/P=\2331\317<\021\242\354<\341\241\023<\033\261\234\275\332r\275=\206\332\227\274\245\010\330<V\306R\2758\326E\275\037\207\001\275\220\357N\275 \035 <\247\352\222=\271\3737= \250\004=\001\216\r\275SH|\274\372\034W\273\355=h\275\344A\n=\215M\204<\2061\210\274;\207g<\030\027\231=\032\344\267\275\332\371\222=\251\035\305\273\262\201\206\274\243|\260\275R\266\227\275\213\354\266=\237\264\310<\277\366\324<\332\337(=7\020\367=\365\310\370;\344\035J\274p\305\205\273^K\313<\203f\331:\317,\223=Dm\305<\366P\342=H\005h\275j\344X=\224.\006\274\335\207K\275\222$\272\274H\362\257\274\370Oc=\362v7<\222\026}\274\356t\301<E\231o=\275\333\225=\225<\002=\037g\346\275\370\216Z\275\241\023\356\274\303\202\333\274\357f\331<\237\307m=:\023\002\275@\023\037;\007\216\'=\001E\337\274\300#\r<KA\030=v\242X<\034\227\023=2\007\277\274\202\304\307<\201\3344<CD\031\274\375\313\016=\366\205\001\275\215\354\021\274<\223\215\275\322P\251\275\260\302p\275}k\262\274smE\275Y\207\226\275\330\013\014=Q\373\031=\007E\353<\254R\034\276\2736\236=d\261Y<\342\224\327<\214\337\3659\034&~\275\320F\211\274\271\274\200<ivc\2757\234\250=\253\356\254<b\325\202\275\222\177\225;\213H\260=\352F\235:\032\177\3209\323\'m\275a\337\330\274\306\347i<\267~\031:\342[h=\232\245\311<\032\214q<3_L\274 \213\'\275\266u\211\275\265\3003=iL\226\274\213O\001=#\2070<Z\332\344\2747I\257\274`\240\354\274\343\000\367=\252\356\010=\264K\"=\211\256<<F\014\213=\325&7\275=\316f<\257\375\355;\326q\235<tn-=\210eF\275\336\244o=\234\244\257\275\254;\016=\371\036\256\274\253\377A\275\024!\240<~\265\202\275\333\305\325\275\203\244\275<\353\235\237\274\311=\010<\202\027\024;\306_\320\274\013\355\202\275En\025=\023\227\263<\326\362\222<\021fT\275g\335\211<u=#\275\307\335\216=J\315\257\274\272\200\227<\270\352v\274=\013\247=/<\230=\013g\246=\242\260&\275\334\353\372;\214\261v<+8\333<\246\311\031<4\345\216\274y\372C<]\323b\275W\341\321<\023\3576=H\272\304<\361Yg<\220rC<^\304\000=!b\022=\260\363\250\275\273s\033\275 Pz=V\364{=\002\310N\275\317\340\267;E\344e\274py\306\274\363\210D=\243\306\242=k\323\240\274\246c9\275\367Rm;\250\216_\275o!\221=D+_=\006\310\261<\333l\030<\3378\025=\272v\001=\205\372~<\214\246`\275I^\235=l\215\357<\342\341\201\275,zS<)\270\201\275!\267\203<\276\250\257\274\213M\213=e,9\275Z\202\023\273\"\026\216\274\177\006\217=\266(\236=\306\331\\\274\377\342/\274u\021\200<,\227\355\2742\372\221\275\223\231\366\274v\375\306<\372k\317<\302B\332\273\202 B\275\302\nt\275\222S\034\275TN\035=\234CS\274\375Z\220<\361\250a=4\001/\275\360\216\021\275X\3758\274\037\243\252<\365\251\312\274\342\235T\275B\251\231;X\244T\275U\036\317\274\007\323\024\275\312r\020\275\341F!=\247\000\240=\260C\004=\324\360\232<M!\212<\013S\235\2749\336|=\216!L=\252\360\001=Uta\275T\274\371<\224#\255\274C1\234<F\0335;\224c\237\273\\9s=\261\242{=\'2\230=BX\223=*\254\022\275\247\364Y\272\232\tW\275\273\267T<Y\037\177;\324\210W\272S\373\235\274\201\270\034\275\2339\037\275\t\223\275\275\220\364\361\273d\320\n\275\245\315\263<\205\373\302\273\232\037\206\273\355i[\275\264\'\241;\306H=\274Z\271\262\2739\036X<\276O\243=\223c\317\275\273\020\347\274-@)=\245\317D=@\024y\274[\324-<\377\344\005\273d\3664\275V4Y\275\372\244\233<\247u,=\252\"\033\275I\217p=Lc\212=2\006\037<(\351\224\275\202U\032\275w\246\316\275\343\243\364\273\260\216D=~\223\356<\266\007r=*\333\311\2745\354q\274\372C\247<\237o\354<w\272\r\276\211\256\303\272!sD\274-\372V\273|w\311\274\364\303\244\274\354c\026\2753\004J=X\034\357\274\301-I=\371\362\274\272~\347<=\234\247\315\274\036\232\024\275\340\354;=b\230\251\274Xw\242<\370;=\274\217\344\216\275\356v\212;\351\302><_\347\201\275\204A:\275\222\223\235=i\020\225<}\231\373\274\n@\237\274H\177\244\274\310\363\022=\336\376V<I\332p\274E\265<\2748:\353<\236\220\371;\243P\'\273h\231\300;0\361\317\274f\3301\275\t\217\213<\272f\240=\272:\276\275\301\367@\2757\034&<\337\344O<\220n\253\273BO\264;E\362\320<\037\232\027\275\034\005\226=;\204S\275!G\241\274$\306\210=\316 7\275\035+\013=vJ\227\275\232\376\036=\004x\217\275ZC\207=\246\255\257:#\267s=\250\221i<W\345\256=s`\004=\374\356\326<\233\312\375<\314U=\275X\204\177<\274\365\263\274NW]\274y\347\351\274\371\323\017\275\302\304\215=W\214\343<n\252\013\275ksk\274\261\353\350<\212!\265\274Q\031`\273\341\320\t\274!\205\276<d\300\256=B\375\203\274\020\035I=\000uh\274\307\206\000\274\021\360\344\274\331/\306<m\010\267\273\034n\002\276Z\013\204<\354m\177\275\247\004/\275\266\365\030=Q\215B\274\271\376\361<\207\373!<y\260\215< \365\016<\244\312\271=7/\353<\357\203\257\274\351\343\234<\301\214\200\275\344<U<\215X\315\274\"\216\234=\177\316d<\235L\326\274:\314x\275\0314\201\275\357\216\341;\001\312\211<\000\200\223<\210\023\t=UN\217<\034\205b\275\200\347L\275\022\031\200=\013\334\263;\362*B\274\375\2459\275\352\336\340<\314\2038\273\327\226\230<\r\355\266<?`S\274\374{i\275\267\271\206=_4J<EZ9\274\010\332\227=i\005\201\275\303\005\203\275A!\222\273\375%@=S\0104\275\027\272\211\274~wZ=S\025<\273\321\304\266<8\317\013=\230}D<\245\033\347<\360|\207<\352\310\007<9\361\363\274/-G\275\375\020\207\274\360\024\002=\t\320\271;\251\267\010\275\261J\007\275wR9;\332\271\376\274\224\3014<\302;\'\274o\374\345<\244m\r:\315Ut\275\0213v<\302\nu;e\201\r\2756<\355\274\017\365\233\2754\340M\274\202\013_=3\'\030<\261b\377<r\205[<\366\270\367<\013a)\274O\014}\274\345\217\371<\244)\016\275\367bL\275\251;\233<+v\272\275\235f\321<\'\357\207=%\342+=\200\031u=\027\351\332\274\235z\205\274~\003\036\275\023\227\357;\203\r\023\274\2569\t\275`{\033\2722\207\371=3\003\n\274\212\"\016\275\213\023P\275\344|Q\274\357\247%=`\'P\275R\333\022\274N\264\205=op\265\274\362]\026=\307\312\335\273\362\252\203=>A\344<\035\021\324\274\302g\235<u\230\253;0D\320;\311\327f=\346YP\275{\217{=\213\004t<xeF\275\362\260\272<k\251\027=[f\000>\021\272\305<\350K&\275\253\307\017\275j\021\231=\024x%=\345\317\277<c\331\033\275\355\276\032<\025o\017=\354\366\006=\nr\217\274\304\270\301<\300\324L\275\2112\211=N\001,\274\253\033\311\274\337ob=\316\246==\257S\324\274\221\001\211\275\3456\221=YUi\274%\371\261\272\316-\304<\242\2648<\341\033X\273\234V\322\274\020H\244;|\331:=\326\002\306\274\365q\342\273\202\033&\275\232\337\310\275\360\274t\275\315s\021=tD2<\\\3713=4)\211=\341\322\255;\231U\372;\031\031e;.f\316\274\332\376b\275\364py=\023\222\374\274\\lX=\272`\253=9\322t=\2749\306\274\250\323]=t\353\\:\257\"\264=7\371L=\351:<=\252\033\260<\235z\254\275x\306\302\274\330\332\212\274kk<\275\016ZQ=\'\t\231=\253`\236=\343M\024=\027\225\241=\017]\347<\030`\223\273n\232\270\274\343J\010\275\037H\204<\243\361,=1\336\325<\177h\362<\'\243S=\274\212\236\275\226\302\360<\274Q\034=\"W\006\274\373\266%\274 \212L<z\233\233;0\035-=N\330\217<\006\305\212=\345!\202<\036\212\267=\364\377\224\275Oe\225<\237z%<\331Yx\272\007}\326\273+\275\r\276\341\177\213=F\271>\275!\317\275=q\245\362\273O\332B\273m\010\003\274\022\035\304<\271a\365=\305\007\033\275\3175L\274\211\000\333\274\177k\215=\3576\354<\262\2476\275\200\247\004\275:\335\300\275\253(M\275zy\271\275\320\257\252<j,\001\275\305\321g\275\\\t4=\337\034\347\274\305\204\273\275\220\276q<\351\202\234\272:\345Q<\373TS=\"\336\242;\017\305\330<\300\364\217\274\225P\243\274g\340\254\275l\034x\275\232t\221=\243r\270\275\022\223:\274\007\344\2569\334\336\353<\224)&\274\211\202\240\274\372\352G\275M\3337=\220\241#<|\276\240\275\361\325`=\367i\206=(\254\231\274\242\227\026<\027q\001;\265\222\232\275\353q\253\274\261X\207<\220\366\244<57\313\275\':\373;\311EE=v\353\305\275t_\"\275\360E\262\275\273\037H\274\272\274\362\273\\P\201\275\375\3123\274\335\360\217;R\353}\275\304\233~\274A\215,\275\227\216T\275L\2128<\2141i=\201\032\305:y\032Q\275\370\202&=N$=\274\316\232\005\275\356\236Z\275\274\312\215<\304[(=\016\002\221\275\312LD=\204Cd=\242/\224\273\266`\030\274\321g\326;\323\206\221\274T\216\233\274\177\000\270<K\252^\274}\232\302=\375\037\207;j\214\223=W\230\262\274\027\005\210=\215q8=P\373\360\273G?\014\275\210\236\036\275\306\355\244=\224\251\275;\217U\030;\360\317\'<\274SC\275\200X\253<Zq*=\335\016.=\371\271\204\274N\302\302\275\314\r\347<\326\316\221\2746\241\232;n\037\221<Z\344\221=B\266H=V\357\000\2751\247\345\274\213\217\014\275\024$\344\274\220o\205=\216\177\252\274\014\353n=\271fw=4\207\276=\317\230o<9\301\033\275dH\022\275\311\202 \275F;\234\275\206\334\315\274\2226\327\274\\D2=I\027\241;\316\3625\275s<\255<[,[\274\236\217\236=\225\037<\273\277\357\302;\220\326\034=\260\310~\275cwZ<\317\374\312<\2747p\274\320x\031\274\\\211?<\235\200\207=+M\007=\020#^:-\342\353;\n&[<;\326\313\274\257\t\002>m\246N=\010\325\025\275h\354>\275\232\027\227\275\025\270\346<a\321\222\273PD\240\275\226\204\317<\016>\205\275\225y\211\274\034\203\002=\272\020\035\274\250\340\223<\'M\223<D\210\200\275\006\022/\275\016\230Z=\373$\332<\234\003\243=8\033;<\336\324/=D\331W\275HL\363;\337\261&=\231*\224;\243\230]\274\344aF\275\230\025\370\273\335\377\346\274k\311\242<\316#\n=\001\317\207\275\257\273\200\275\031\303\352<\034}P\274\005+\260=\225a[;\330\335\014\275\315^\276;\210\251:<\332\'4=\377\374}\274\226Db<@\222R\274,\204\234\275}1\313\274\340\341\311<\373\3678\275F\357\363;\230yi<\236g\357\275\002\377K<\313!\263;_\240A\275\035O\336<Y\322\001\275\304(f<\222\037\025\274\007\233\226\271\371\0026\275vc\343<\323y\214\275\001\250\027=\253!W\275\233\206\270<\005\314\203=F\212@=\333\033\215<2e<\273\'\361\277<\221\320T=\350\350\205=\227?Q\275B)(=\333\215&<\332z\221\274\376\206\250=\nz!=\226\330s<\251\n@\275\334\244\207\2744{\200<\225\207\374\275\3712\365<\330\252^<\245[@=~5\034=\006\210\264\274\210;\250\275\324\030\303<\360\350\203\273|\037\007=i\2760\274\220o\316<\247\301d<\250\"-\274\354\021\177\275*\315+\275\301\230F\273\370\312\002\275Yf\235=\226\224\202=\217M\000=\344y\311<\344\224\263;\321\\\342\274a\376\202:Ew\331=D\246#=>_\351<\210\304\240\274X\227x=>\214\322\275\n\245\026\275\201I\000=D\304\222<\013\252\324\273\330q\245<;h\252\2743\200v=\263[\301;\014\377\311\274U\327L\273\230\301\006\275\310\223)\275\217\325\r\275\311q+=L\374f\274\323\2542\275\346\005\357\274\327\215\227;l\032\302<\315\305\253=\341\216\010=\326\201<\275F;E\275\301\242\257=\253\373\325\274-z)<\037\364\220=\001\202\221\273\200Q\006=\237\364<<q\277r=\311o\235<\\\344\324\274x\np=\211\341u\275t\371\006<\252>=\274\272\277\313\274\304\227\201=\034!\325<\000\207-<\342\240\313<{A\212\274~\246\310<a\'\313<\024\261\200=\340=6=D\021\213=m#\344\274%\222\254\275\314\\M=]rG\2755\365\314\272pYy=\022\021\363<h\332\357\273>\245\037\274\007\252B\275}\223\320\275\324xe=9\316\215\273Z\001(=\245\260\225\274Z4\276<\316\000j\275kl\215=\241\204J<s\306W=\313\311V\275n2\376\273\345\201M=-\024\320\273\210\263\216=eZ\351\267\034X\232=A\275\376<\205\243\027<\334,P<c\252\374<\303j\252\274\214\0161\273(\372\021<\345\360\021\275\235\211\003\275hr\025\275\235\005\252<\336\253\245\273\344~\375\274Qb>;\032\037\022=t\363\374\273^\247\256<\264\266\375\274\276\276\356<C\302\252;\237\367\311;w\230]\275IB\343\274\306#\252\275\271\363\021\275\177&j\275\262\325\325\273\271vs=\322\261l==\232\343\274O\031\214\274\234\367\211=\226\252\250\275(\212w\275\267\241==q\230\241\275\261\222\220=\3606\271\2757\262\271\274\to\002\275\245\203\223\274\224\032\033<Z\314\211=\315_)={e\231\275\013\241Q<=\r\307<\364\3304=\231U\224;ca\000=\313\252p\274\300ma\275u\342\033=i\367\365\274\022\324\206=\233\246p\274\351\224W;\376K\204<\335\335M\274^Q\031\275\261e\207\275\324(\257;\357\227\202\275f\233\200=#\016\263\275\373\203\205=\227\333\t\275\023z\006\274\310`Y<\352\224V:\363\322\241\273\241\241\035=\336/\177\275\034\356W\2756P]\273?\222#=\313\023\310=\355\365\000=\207\0347=\317\232\336\273.\252\211\2747n\236\275\305\r\201\2723\364\345\272)\\\004<\264G\017=\037\224\266\274\030\362Z<G\2149<\233=\226=!\001\364<\177\362\036\27400\371\274\204\276\212<\236\234N\274h\311\354\273\235}.\275\216\270\021\276\355\006/\274\250n\030\274h:\205=\023%g=\303.\002=\245 \007\274\300)\251;\357>\013=\374\340\246\275\263\325\200=\005N\360<\230\363\267=\370k\271\275\261\327f:\273\206\313=\021Nm\274]\022\027\274t\003=<\265\204\275=,\334`\274r\366j\274%\376\242\272\312\314\033<\224yW=\245\372\306<\227\224\030\275\237\'\274\275h\341y;\261\200\253<O\032\234;_wF=\213\027\326\274\027\220\200\275\316\254\213\275\324\313\317\273\215\032\n=\312\375\027=\325,\250\274P\257.=o\324\277\274\250\363N<\232\242M=F\022\311<\274\022.\275\001\337\002=\200\375\213\275\177\203\230<\222\314a\275pv-=\033\235\024=\'Fh=\305\036\026\273\372\276\303<\n\346\331\274_\220\202\275\340J\274=\203\237\315\274\316\301g\275\350\331\314<s\317\'=;\035~\275\235\032\241\275=\330\215\272\001\264\321<8*\256;D\014\004=\256\000\205<7\tr<\270U\001=Wk\031\275A\207\013\272\203\375\225=\375\2031\275\331\354\300\274\376\226*=\005@|<d\362\371<|\222\310<51\226\274E\307n\273\t.\307\274b\177y=\210\235\017=\351\332\237=\332\003\007\275k\007i\274\030\257\305<[\026\304\275VS\371<$\r\252<\364\221q\274\265\347\3659\242G\302\274H\340\236\274%\033<\275\262\371Q\275S\031\t=\315\243\020\275\247%\031\275\"\027\021;\207\n3<\240 \336\274\351\361\266<\353\004\237<\267k\027<\372\275D\275/\'h=\373%\245<\330<\277<\016\253\346<\007\256+=\3657\217\275\232\211\312\274\246\202\237\274P\301\207\275jAc\275\210\326\250\275*//\275J\361\367\274\352f&\275y\347\343\272\251(\274\274\207\231\216\274 \004\013=\000/L\275{\304\304\275\202.D=\177\225\343\275\347\276\321\274N_\365\274mz^=s\000\340\274\356<\212\273\262!\253<r&\224\275c\2404=R\237C=*\214\000\275xb\326\274\rSW=\276\2252=\200y\361\274\355\016?\275\207e\030\275\t<b\275\253\365\251\275\270\n\351<\346\355A=\351\213u<\005pw\275\004\201\375<\327\316\010\276\242\001\277\274Y\365\000:\340v\235\272\226\246\0049*}\211=\206\346i\275\001%\270\274R\374\243\274\t\211r\275%kU\275\335\230\213\274f\027\332<,H\'=B\373\361\274\210\373\207\273\037*\264\273_y&\275\202;F;O\374\211\27432\225:p+\241<\360\255U=>\217(=\336b\204=!\014\257<\363~\207=GY\336<\026\335L\275o\344\260\274nwE;\\|\372\274,\214\365\274\221\365\235\273\260\314Q\274\310\201\244<\263 \240<\251\006P=\260\335\241\274q\237\002\274\013\031\250=\342\"\241\274\016\330,\274]\206\020\274 g\013=)\237p\275`~\242\275\320\352\222\2750\010B<\245\034_\275\344*\033=%\2164\275A\331\006=\326\300\034\274\315\333\023>\036\334\272=Js\326<0\240==\\[\200=n\241\213<r7\241=6\'\340=\357\247G\275,\004\250;\036Zx=z\005\303\2748Y\264\273z\234\261\273d\331\231=\216:\365<\263\r\002\275]\325\212\275e>\243;\331\024\225=\251\374Q\275\307\265C\272;\221\370<NSJ\274\263n\351<4\252<\275\325\010\275\274\225\022\030\275)~\214;p\344\250<\212\021\231\274>\024\"\275\350\252\032\275\224\033<=W\032/;\262\237A\273N\331 =\216&\035\272\236\261\252<\025\244 =\231@1\275\265\200\262=\377]\273<\366\017-:\376\357\352\274d\022u<t\014 =\265L\000=\213\213\335\274\305\313\235\274r\211C\274\361tc\275\317K\212=\355\340\245\272cYa<K\0302\273\252\240~=\326r\217=\266\372\251=p\350R=\026\301\324:\302\376\002\275\207\373T\272k\222\257<\312#\017\275<)\334<_\242\212<\244\264\326;}\204\313\274\377+\'=\035\327\272;\366\357\351\274\201\024,=\320\261\"=\232\351G\275R\200(=\260}\230\274\351Nm\275o@\207\275Xg\256:\222v\333<\253\017\037\274\371\037%\275F\247\337\274NW\313\275\007\035\014\275r\206\"\274\310i\354<\321:j=\275R\021\275\013Yl\275\000\356\265<\004S\031\275\t\257\202<\217\305\321<zs\006<S\0249\274<\023`=\014\267\336=Z\325\202\274\206w\261;t\030\234\275>\177<=\267zl<i\027\377\273q\235\316<\2405\032=l@\022=\315W\351;\005\3048\275_\270\214\274\351\003\273<:\201\007=\\\345a\2757h!\275\374\354g:\2011\262=\304\211\210;\362\3027<\213%\273\273]\212\003<Q\306\202\274\360:==p\224\020\274\317\247<<Cn\327\274~M@\275\024?x\275\335\242M\275\231\223\007>\320\2559\275\344\204v=\301\002\241<\251\220\220<\337\003\362<5\333T\274\207\017q=\226\354\037=\200\374\277\274\212\215\215<?XT=\275XA<\3560\031\273\200\366[<Jb\355<;\262\207=\215Gb<\257*Y=\257\351\371<\307h4=\367xl<\340\377E\275(\365~=/\367\016=\013V\350\274\177\337K=\313\217\n\274|\325\304<\225m\350\274\205\370\300;\352\'\032\275?n\340\274\030\203k=\3019\231\274`\316K=/7\347<c=\213<\303\243\246\274\375\374e;\rJS<\003\370\322=|V\206\274\263\364\257\275cL\263\274j\014\323<y\313\270<#\321\215\275\351}\207= \366H\275q\200/<t\\\363<\r\316 =\360\013\236=MjV<\233\264\260\275\307FH=J\331\211=zx.\274\256%a=\261L\311\271\372\311\001\275\316:\316<H\037\225\275\237\375\254<\345\206m=\221\366\202\2751\264\241=\020\216\243\274\r\262\001=\271\340\371\273&\336(<kk\007\275\004\231H\275\3724\366\2744\271\014\275\212{\032=t\265\025=9\260\036<e\306+\275.\331\356\274\330\314\277\275\245\3702=\256\225\"\275\254\237E\2752\007%:\022K\360<\"K\255\275I\027\331<]Y\367;\203\217O=\215\004x\273G,)\275\234Cw\274\225\227\26798\213p=\242\214V\274\264\n\274;\343\022c=d;\206<>5\205=\3056\377\274\332\023\r=\210\345\363\273\202\010>\275\274eC<,)_\274\302\032\331;(\333D\274\232\254\252<\261\rA\275\273\266\243=\271\233\030\275\026H\315\274\2745^=`\366\212;i\022-\274t~\266\274I]t<@cf=as\234<4\030\357;\260\251\000\275\351\242\240=\t\273\036=@3\277=Z\270{\274)\266\232<SZ\241<\317\310)\275\232e\207\275J$\334={j\340\272\242\271C\273;\t\224\275Ve\354\275_\347\035=\010\324\243<]P\227\275o@\242<b\346\235\274\032\177,=S\r\327<\374\034\232\275,\236\007=\262M\241\274\355\333\223=\023\023\233\274\226<Y\274\203\363g\275\367\026\240\274\3046\373<\365\2366\275\nY\234==\326N\275]\333\302<\201a\030\273e\276\310=r\341H=\237\362\024=\227t\226<\334\232$=\3331\306;\013\247\246<\345D\334<\273\332\244=~iN\274\253\247\240<\376\207\202=\010\345~\275t\346\260<\310z\234=\217\204|<\306\034\224\275Jr\246<\364\343\230=\006\252!=\013\307\364\272n]\263=c\0076\275\271\253\037=A\201z=\217\215\004\275\247\301\'<\374\272$=T\202<<\205Z\221\275tj\303\273\317\210\317<\t\006,;\254\016\233<\232\222\221\274\346o\007<\t\274\246<\005\356\005\275\217\232\367<\246\250\231\274\372\263T\275\374\253\020\275@\332\207\275\344\231\001<\364k\212\275&_a\273i\001\364=\000u!<A\\\317\275T\337\232=\"\242\236\275\352^\034=@\221Y=N\257\006\275\215\263P\273\023\215\004=\261\262\206=[\276\254\273\267u)\275\002\230\221\273\010\321\261\274\266\243\306<\001\3360<fV\273<\237\347\360\273\303U\r=r\335-=\355\331\246\274O\270N<\007\225\271<P5M<M\025\241=\366\200%=\016\342\213;7\026\002;\217\233\320:\3036\255=\232\342,\275\274:w\275\310\220B\274\323Y\263<\327L\030\2757\215\323<\344\032g;\033`\203<*6\212\273\002\370>\275I\240\016<\241\231\355;{L\302\275\341\005m\274S\223_<M\217\244\275\337\222r=\371\302$\274\000\272[=\272\005\215=\223\027(=\3009\333\275\030\354\310<\274\354\332\274\355\315T;\340c\'\275\225b\032=H\266u=\343\027>=\\5u=\347\017g=\031\250\310\275{\010\032\275.\3566\274\r\177\"\275\317i\300\274\\\366b<E\346\227;\362\004\007<+\204\340<J\364\3708\226\277\217<\266&\351<i\206\270\273\327\345\270\275\220\204\312\274(\373\343:\357\200\216;\024\007\016=\336%\250\272\342\331\003\275\na\031=(\262\234=\377c\217\274M\371\204=\200\307\214\275XB\r<?j\206=\245Lm=`I\305\273\236[\300\274\335\317\371\274}\227!\273\232\3464\275\244\316\271\275W\315@<\002\212\035=\022\303X\275\366\2620=\355\311\324=KHj\275\323\230B:\266C\237\274SG\257=\006U\236\2758\021u<\210q!\274}\375\245\274\267t3\275I\224(\275\224:\024;*\215\023\275\246\226\373\274fv\244\275\355\301c\275\330\3470\272\003\202\224=Z\326z=\203\031C\274\314\035\321<\241\234\311:\014\364\037\275\254Z\254\273\372\310:=\361m\270=\326\375\217=\204\207\032\275\2716\272=\235\220\002\275\377\213_=\347\243\231=\274\371\023\275\031{e\275f\r\374\274E~\213=\240\311=\275\307Yj\275\202\005b= \003\037\275L^\037\275\022\243a\275+|\237\275\237\350\331\274\312\2433<hr\201=\205ko\274\216c\001\274\264!\n\275,,.\275\003\260\024\275\313\3323\274s\222\240=\347i\222\274\371\317T\275;\211\240=X\230c\274K\340\n\275\244\365\203<\017\342\246\274\212f\340;\264\315\017\275`e\005=i\033 \274\307\323\360\273\240\254\002==\306 =\343\257\004>\223.\036=d\254\315\273\247\313E=\270\264X\272\023\236\304\2743W\217<S\307\007\275\233\307\307;\240\023\263\273\0103\250\274]\026\200\275n\204\253\274v\025H=\373K\342<\364\205\224\273\033\356\206<D\230\216=7z\033\275\335$k\2753\307`\273jR\217=I 0=F\315\000\275\371!\212=\335u\\\275\206\"W\274\227\210R\273\247T\003\275\332/\257\274\334\005\036\275\325\334\351\274Y\274\316;\273\302\r<\340[\206=C\022\333\274\177Z\270=4 *\275\307$x<\311k\363;\200\n\253=\306\271\334<v%U\275g\271/=\371\372\000=\022\300\005;\220\312\305\274\363p\254\274\330P\361<\252\256\250<\364\301\032\275\035\311\017\273\r\326\357<\346Y\221<\243\265\025<\234\223a\275[\023\377\274\205Y\022\275\332HS<Nh+\274\230\200\226;\372\256\275\274,\013\217\275\211\356\230=\345p\306\272\224\370T=\014[2\2739\033\234\275;%L=\325l\006\272\305rU\275\236\305S\275X(W;\2557_\274\224\344\306\274k\213\002\275\031\341\247\275\242\201\304\274\275\020\003\274VQ3<?_\200\274\240\261\366\274l\215\311\275(D:\275\310\243\"=9@\003\275&_\307\274r\010\262\273\375\000w\275\344\302y=b\324\201\274\022n\254=\371\204\t>\2558O<\272\311\376;\343\243.:9\274\366;\304u\256<|\335h\275do\217=s\330\251;1\305>=u\311\334\275\2632\336<V\245\213\274\236\2312<O~\"\275\216\211\256\273\205\307\222\2757\312\261=\221\032^=\253\207\r<j\215\333;\356ia\274\232\022\370;\004;\030:\267a\025\275.\006\002=\306)T\275\320\332\362\274\344\370\227=V\335\225=:\322\320\274\304\353\333<\257\347[\275\315\005\221\274\266Br\272\272W:\274 \227\224=M0\224\274\025\260]\274\233\277\023\275\032\231Q\275\231\253\255<\330\275f=\271yV\274\371\0050\275\323\013\233<H\207\200\274\326tg\274R\014\024=+\317\324<_\226\2729v\237n=\245\"\3429\327\020\365\274\tl+=\325\275\027\274\255\204\251\273L\357\353\274\347VL\275\257\216\013\275\326\220P=\300t\345\275\272\246S\275\005\240X:m\232\257<#\356\221=)Q\177=\216\312/\275#\242\037<X\247\3169@\2636\274Tc\231<,\322\223\273\321\n\347\275\266nm\273\0236s\275\304\326_=B\222\340\274\246\013\305<H\375\006\274\020\006\245\274\034Qh\275\312\356\005=J\251\027\275\365K\256\275\013\365|=\341j\311;7\235\013\275\211M,\275U\306\266\275\2270\245\275E|B\274\235\341\241=L\232\364\275=\327\337\274\252\367\246=4\317\004\274$\022\223\274!\202\271;\016F\241\274\321rM=\301\302\213\274\030\267+\274\236rt\274\377&\246;80\013\274\020\214r\275u\264n\275\301;\030\273\215K\374\2737\305\032\275\030\377Z=tm\224\275\371\266)=\t\220\325<4P\253<\020b\000=\355\375\242=;X\206<f*/\275\nV9=\223\227V\274\003\330\014=\324\313\243<iPX<\202\205#=\322\265\214\273\263d\216\275\211q\272\274\301\236Z<\007\016\013=_\325\370\274\261x\036\275\027\372\314\273z\224\307\2745\323Z<\241\353J=\240-\025\2751\214\210<\017KH\274\323\327\023\275\326\033\202<T\231\221\274],\212;k;n<\353\005\234\274\212[(\273\344\021}=\032\022$\275b\277b=\307\255\027=\003tY=Z\334c=\275\002\224\274s\201\223\275I\340\200\274\244rF<\0161*=\304!\355\274eN\212\273\000\334\232=\031\211\017<\0330w=X&\t\274\304\260\234;\203+\244=:1\276<\254w\220=Ju\246=qy\261;\332q\311\275\343\360\016=\33481=pr\342\274\353\374\255<\226K\365\273u\035.\275/=\356\274\007\\D=\033\335q=D\324\267;j9\t=%a)\275\225H\231\275\361\014\216\273B\336\207\273\237\252\204\274\314\025\016>\310\222\341;_\374\367\272\336rz=\025\227\226\2755\017O<\022\275\237\274s\036.\274\374`\217\274\336Pf\275=\"v\274*\205<\275\"\222\215\274\355\315\031=\264:z\275\252x\352<\027\274e<\342\004!=\202\217\025\275\\pW=q\323?\274\313\276h\274\323\003\300=\242\0051\274gP\236\274_&5\275\233i\355\274\277\314-=\017\2213=\331\354i<tbo=\376\254i\275\'*P\274\345\'\013<\277\304\177=\307\335\270\275\313\317\267\275\277\377f;\\i\2028\262Y\265<J\037\030=q\356\363;6\236k\275|\303a\275\221\321A\275\247\221\234\274\257\335\222\274\210\253\366<\017\306\310<XV\363\274={\350<CK\211=\321\3123=\243-k\275\365)m<\264\317L\275T_i\275?\354\247<&V\232\275\216$\020\276\252\230\023=L\255+\275\204\237\203\272\241D?9\002G\326=\365\\\2639N\366\371;\"\354K=B\235C\275\331O\355\274z\322\244=\037\364A=\262\325\002\275\232T\300\271\201\325E\275\020\016\303;F\225\374\274c\243.=\2519\240\274\371\t\247<\027\322M\274\335k\320\273\332\247p\274\353\007\223=\226\304g\273\253\304+=\253\220;=\017~\324<\376\314\002\275+d\235=\307\274V=\217\261\005=WJX;\206\177\230\273\362K\022\275\211);<\256\254\367<I\233E<x\267\322\274b\335\374;&\364\206\275k\221K=\"_\023\275\223\217z\272\221p\246\274S\2201=X\347\024\275\025}\364\272\321\256\267\274\262\003\010<,\226\"<\323\261\305\274\360\270\005=\272\333\312\275\006\262.=\242j\310<\253\204\245\274\200\'\244\274p\013-\274\035q\214=\327\210\027\275;\212\227\274\376\322/<\246,\032\2751\"d=\2417U=I\210%=\35237\275\335\344\317\275L\251\024=\270b\223=\301\"\001\2756#\235:\217\3158\275\251\321\001\275\247z@\275z\305\030\275(\202G\273D\251g=Y\027\304<\2323;=3-\204=#\335_=\363\325-\275\344mo\275\377F\346\272:R\205;\'\253\251;zF\010=_e\216\273\324\206+\273\014N\204=\'\223\307\275g\'\224=\303\300(=\036\353L\273\376GE<\351) 9g\326h=\240\307C=\205\201\336\275\314\323\364\274kc\223\272\327N\346<@\257\266\273\375\271\322\275\337]\345\274\260\376\225=d\371\336\274.\274\"\274F\027j=2\247\371<\345\271N=\205\205\247=I:\207;\013D\253<Q\320\372<i\003W\274\357\334\376<v\337\201\275P@\222<\2628\307;\341\373\363\2734\210\261=\211\274\023;\225\304\001=\035\200c=Hn;=\361\365\001\274\256A\003\275\231\300S<\215\324H=!\361\227\274\264:\276\2741j\237\274\r\213f\273\247\006b<\331\n\216=`|\216=\276\320\345\274\206\270\270;\260v\320\274\353HV=\014\263\330\272\2313\277<\351K\215;\023\001\200=\332\021\001<p\370\206\274\345\240t\275\3464<<\\\326\267\275\374\305\201=\207\025\277\274\365\003J=\002L\221=W\214\035\275h\252@<\221{$\2756\330\262<i\336_\2754\336#=\252\241\253\275+\273\203\274x\353\335\274\0368F\274\n\370w\274\027\242\360;]\330\304\273\346m[\275\316\260\352<W\230p=#\213N=yX+\275\376\3730;\031\020\244\274\021JH\274K\255\022=0\335\375\274@\362\001<\242\251\3729\347y~\275\242\357\254<\311I\224=\347\217\002\274\330\006\274\274\362N\365\275(\374\352;\322Ze\275x\221\314\273\373]\306=\347!\334;R\177\006=\'n\204=\227@#>\3261\017\275\007\304\022\275\327\000\260\274\314\274\n=\3753\213\274q\273\370\273Q\363i=x\214\366\274B\314\356\274{\230M=\205eL\273\212\025\260=u\347\372<\255\314\027\275\305w\222\274\0276\246\274\233\031\r=\235\006\371<\346\355Q<\251\343G<ap\231<C\2648\274?\333/<Q\252s\275$Rt\274\3611\243\275\2343\242=\245B\027\273\300\334\210=\314\207~\272-M\037<\276h\315<\005\342\217\274&\256\202=3\247\201=K\320\376\274\354$\010=u^\225=P\334\211\275\005\221\305=\334nu\272\030\034\034\275\242\302+<\356\267\210=\366\230\244<\310\324\022<\207\224\274\275\207d\233;\2577\300<*\3242\275\212\t[;g\340\360\273\360\216+=\254K\217<v\361\013<\'5:<\"D\222=C\235B<$\2326\275V>\225<\301d\200=k_\264\274\241\270\2209\325\016\226<\263\206\206\275\222\267\254\275\363\236b=\253\276)=G\225\303<\270\036\261<\023\374\377\274\361,\233\275B\367\346\275>\025C\275\256\013n=)\327\267<\24265\275\007\315\022<5\363\001<\270\324?\273e\250\375\274/\200K\275\327\237\270\2737H\262;\323+z=\204\210c=n\221y\274\r\233\217<*\027\022\273\227\023\247=\207,\330\275\367\202\032<\243\337R=_\350\256=\317\202r<\000#(\274\370\314\206<\361\254\232<2\305\223\274\225\'\025=\253I4\273\034)J\275B52\274\353\204?=\201b)=7.E\273#W\353=\222\200\202\274`\214\230<\201\323#=\274N\206<\352\364[=\232\354\032=\301\177!;\222\211\014\273cq\354;\')O=}\317\214<T\220\324<\257\370\032=$bU\275hdv<_\347\210;(J\020=\276\" \274\"\312\243\275\235rS:\025\250\201<\3104\004\274\213,\242=\016-Q\274\201\327I\275\252\3640<\n\271{\275\334\231)=y\320\034\275S.\010\275\257\260\335;C\004\233;f\272\225\273\317\001\362\274\357\002\260<@\314\217\274R\202\243<kx\311:\n\263\003\274\320 \261;\002\2639\273\236\0201=u\270\311\273\250\275\261\274\354\227\r=X\t2=\\J\025\2754\302\376;\210\235\035=\0372\331<zx\r=\353}$<7]\2459)t\237<u\206\206<R\251\337;s\027N=\203\223\r\2739\350\213=JPK\275f\313\353\274\334G\361\275\202\252\010=tr\253\274\030\206~\274zp_<\267>\001\275\365\335\273<2\236\212<@\023\362\274\314\237/\275\254W\036<\241\312%\275\300\234_<\224F\000\274\"rZ<UY\246;\253x5\2756\014\205=q\272S\272,\246s=\030\026\265<y\224i\275\314\252$\274\372\034~\275q\376W=\352\"\"=\275\025\243\275\360\346\006\275\300\360\335\274\\N\335\275+\r\\=}\360\351\275F\010\214\275r\027\325;\\#M\275`\357Q=\007aT\275\246\361\261=\353\341\217\275\307\341\246\275S\332o\274\254\346\010=H\225\262;\254\207\200\275p\033T<w\351\327\274\267\\d\274\324\367I;T\220|=o\362I=\355.\210=\300b+=\306\207.\275k\243\313<\361V\340;\317\257s<^$*\275\306\275C=y\217\007=\354\250\252;=Zn\275k\207\027<\036Sa=d\234;\274\342\347\201\274(\212\356=\020\246\220\274\225\254\363<\3679\003\276h\257#\275\352\235\216<\260\323D<\232\361\265\274p\327\235\275\001\3046=\225\220\231\273#D\014=\277\025\333<\'~\312\274\337\356\361<_C\230;^\336\205=Hy(<\263t\301=\251e&\275\247t\233<\226\022[\275\002\215H\275\336\222\343\274\020\036+\273I\300\237\274\324\320\334<\350\256k\275\247\"q=\231\007\250\274\205\364\341\274D;\372<\300\207\030\275>\261\310<\361,\005>oJ\372<\321<O=a\317c\273\004)\023\274E\347\"\275\271\375\225<u\373\317\273\022\177\247\274[%);\205\334\254\274\250\220\001<\331m\367<Z\337\264<\373\024[\275Os\376\274\033\370\027\275\265y\307<8G\231<\337\217\003\274\236\207V\275m\241\312<\246\271\351<\334*\350<s\310\305\274f\214\203<\366R\265\274A\357&\275*I\024=\357\322\277\274\3712\027\275D\314x\275\2507\240=/{x\274\304\202\232=\267\240\331\273L\236\214=s\264\032=?\233\360<\246*)\275h\2010=\207\343\265\274\244L\223;}\314\364\275\0100\216<s\223<\275\372G\251\274w\002[\275\\\242\353;a\267\215=i\240D=\005b\272<\271\307]\275\276\036\261=2\335\265<fH\247<\264Z\240=P\241\037\274+_E<FP\"\275\3761\t=8I*\275\2350\225\274Dr\035<\250\317\332\274\343\3166=\272\354\300;:9<\274\014\360+=\367\355B=\260xy<\370\273#=\350\220\024=\003S\355\270\000\325\376<\243\310\023=\216\031\357<\325Z\004=\353\217\335;\336\355i\273M\210\224\275\370\216\211\273\266AA=\323\222\223=\222W\026=QdI\272\311\000\306\273=\223\256=\324\234q\275C[\217\275.\201\376\273\323\255n\275\313\343_<;\203Y=\211\0372<\333.G\274\3118\334\273\270\273};\257s\200=(\334o\275\336\020\t=\365\035n<\006\235\2469d\266\234\2733GA\274\274\025\261\274k\t\007\275GIJ\270\034\272\211\275+\266p<\023\307\275\274)##\274\0358\367\274p\014\332\275\022\227\000;\260\253\252\274\213\272\010\275\024\221M=\323\256t=\257\201U<2\026\367\274\346\032\371\273.L\235\275\273\316\006\274n\210{\275\026\016\262<\021\357\352<\311S;=\366\314}\274\263\2637=\263\236.\275\37230\275\266Y<\275|`9<\013\307N=p\302Z\273\2157}\274\036\220\202\275\022\262\005\274\201\201\251\275\211\363\314\273\324G\301\274%8\340\274r\224:\275\340\205\212\275X\271\301<\003\022\227\275\236\035m\275C\367\204\275L\351\202=\243Ed\275Mv\262=:\t[\274i\257\317<\231\323}\275j\210\037\275J\352\255\273\233\351\001<Y\235\261\274\270\231>\274R\225\\<\335\211d=\374/\027<\324\026\027=`\356\031\275\021\365C=\336.\350<\n\236\000\274\211C?\273\233\326\277\274\265u\005=i\262y\275#\022g<\000\272\277<\022\323K=v\300~<\264xG\2750\203\017\275\314\245\247<\2757/=\005\366\221=\316v\034=\rr\202\273#r\212\275\r\'%=\276\017\010\275M\203$\274\220\222\211\275\266\370y\275\211\020z\273Z\326\224<\216e,=*7\337;z\013\341\275\240\226\360\274|\213V\274\36760\275\331)m=r\204J=Y\320\234<B\t\360\274\034h\306\274a\246L=\251HK\275\244V\200<u\327\332\273\355\260\221\272r?l\274\213\214\344<eq\362<\254\362\262;\251\324\233\274\217i\343\274\207#\313=b9\273\273\355m\030\275h7`\273Z\261\342<%\027\217=\223[\212\2750\3128=\325\314\n\274\025~\276<\322a\354\275.&d:\023Q\331=\337\373\246=\215\271\005\274jO\370<\245KQ<\305g\004=\324b\033=\307b\225\274\370\346\024\275\340\312F=U\201\316\275\346\007\206\275\372st=`\266==\000\036\255\275\234\031[=\202`\227;\367\375Q=\031\235c=\212\243\301\275\223\363\225<\315F\247;\272B\307=\235\327\037<\264!/\275Ns\244\273\233\212+=\220\315\200\275\324\230\247=w\276\304<J\315v=\346\253\316;\272?\336\272V.\234\274\333\334\322\275?\347O=oFs=\367\224\206<\372\250r<Ey)={k\337;RS{\274\345\365~\275(\007\036=\031A1\275kn\360\274\020\254\221\275jOq\275y\376N<\311\264-\274\371\352\025\275\332A\233\273\032\2245\275\252W\235\275}\222\345\274C-\217\273\0266\317\27425\316<jQ\200\273\357!\225\275f\206\217\274p3\324<\024\217\207\273v\310\022\274\315c\005=\233\017\320\274k#d\273\273\300\331\274\333^<\275k\n\211=\201{c\275DH2=\273\312\007=E\232!<ZX\010<$s\223:\201}\347\274A3\006<\315\271\231=\177\276\t\273\037\200}<\2245\244\275\340\302\213<\006?\245<\246\034\356\273c\216\341\273\224^\373\274G\365\"=\326\255w=\177?\017\275\220N\021\275\204j\234<Q\267\312;\365\024)<^\333X<\004\271\260\274\321\037\265\274&\234\225=M|\233\275\247-\212<\224v@\275!\246F\274I\025\243\275`|\214<Fm\274\274T\355%\275\304\200m<LJ1\275\215\204\277\274\213\020\204\275Fy\245\275\334\232\373;tE\227\275\312\t3=\032r\304\274F\2315<\350\302\333:\362u`<\223\206\022<\356&W=1\267\305\274\360S\251\2751\301\316\274y\027\253<\331f2;\207\235\341\274\306>\250\275\330\261k;\245g[=i\031\224=mh8=\201\377\350<\377\214i9\027X\375\274\307\"\313\274W;\3119\021#\220<1\'c\274\243\363r\275\303\204F\275\"\333\023<+u\207\274\323A\014\275\nG\255=\231\231\037\274o\254\265\275Q\333\353\274\265\202\356\274x\377\274\274d\'\352;p\240\030\275\313F\201<\23679\274mE.:\366\222\273\273\3465\262\275\222Ao\275\002\264m\274\315\202l<\035u\022\275\351\',=\200\341\017<\371\232\206\275\252KR<\211>\326<{\250\357\273VG\272<@\206*=V\266y<*\252\033\275,H\240<,\220K\275\356]\204\273e\007\020\275\245\246z\275\346\327\267<\221\007\223\275\227\263\300\274N-\215\274\034G]=\\,0\275.q\364;X\327q\274\330\016\203<\202\207b=\276\264X\273H\n\005\2769j\213\274\255eD\275\253\021\342\274\2038\236=`\234n=\340\254\247<\2702\252=\nI9\274\003\246M;\036\272\225<\273\n\t\274G\344,\275\261\320l\274z\205f\275<FA<\006\262N=\366\342\275\274ZC\201=\2230\033=\266\005\030=!\354\014<!\310\201:\264\221k\275\233\374-\275nb&=8\372\241\270\331\240\004\275{\035@\275\240\263\326<\226A\222\274\200\323\220<\343\1779<\243\371\337\274/nP=\345\360=\274\315\301D=*\030k\275a@\334\274\027\204\036=\354\270.\275P\273h\273\236\022\357\274\207\351\276\275\013(\246\274\n\362\310=\314=\020\275\033%\205\274\327n>=\252\331\260<@\031\334\274\010O\002\275i\003\265\274LN\303\275%df<\246\"\310\273/\3543<\214\2435<Db\244\273\267\204$=\r1/\2731\314\235<\260X\224\274\027\231\000<o\242\316<;\317\007\275s\371\206\274\027\263\371<\036*\205<3e\360<\276h\r\275%\004\212\274oC\023<G\327\246= \3549\275ky\000=\342\027\324\275\217\237\255\273\263\334\225<\353\322\354<^\352\2709\303\215\242\275zC><\255^\255<Q<\n\274\317\351\314\274\036\257e\273\324\025&<\215\250<\275;\305\233\274\221U`\275\331\340\013\275>+\033\275\216\322\215\273\313\240\256<\344\221^\275\221T\010\275\354\266\010=\346u<=\364P\272\275\346B\000<C\304\213=%\010`<X\305\216=\014\206\341<\027v\001=\200\365\354\274\214\317\335<\263S\212\275E\352|\275R\331\007<\210\243{<\212\253\316=\374X\003\275k\325\275\275S\357\225\275\024\326\035\275f\376\274\275<\206D\275\010\327\261\275\325*\345<\327\247\254\275\022\326\321<\245\372\336\274\266\364\253;\216\271\217=\323G\344;P\014\243\2756>\016=9\020\033=\214c\013<\270\314~=; \025\275\264\205\242\275\306\217\225=\261\310-\275\r\315[\2757\036\240\274\245\220G<7N&=8\\\265=O-\313=\213\000X<\001\220n=\2433\007\275\337\273\366<\037\022\253=\005\2113\275^{\313<\256\233\005=J8\332\274\035T\244\274>(\\\274\r\272J;\277^\017=\343\266\220=\357S\240\272/\353\312\274b\037\336\274-\260u=\366\006\233=\302\024r;\014vv=,B:<\005wL<V\277\271\275\033\253\312<\004q3\275x\324%=\257.w\275\265\375\016=\270] \275\033\000\352<!!\317=\303;\3379\266tu=\340\214#\275\257\332\247=\2040\000;1\226\033>+\233{\275u\330K\274\241\312b\273\207D\311;\347\341\216<\000@\372;\347\235\262<\263\343\336\274\215\2452\275\301C&=x\320\245\274\317xm<\340\343\"=\007\010\335<,\322\r\274e\034\347\274\265\201\227\2744_:\275\332q\021\275\035K\217;\215|a<.\3165<\320na;wj\211<\222\221\212\275q(L=\227\222w\275\233n\225;B\237 =\375\376B<}\257\210\275\2606|<sA\303\275\302B\260=5\'\277\275\002@\002\275\317@\375\274#\273R<?u\252<\006C\274\275\343O(<\320*m\275\204\261\006\2759T\254=w\362\262;Nw#=0\220z=\364)h=4\200\201=\027\253\325<\022\216\242\275{K\236\275>i\212={jD=i\265\246\275\262\023\357\2737\232z<\274t^<\216\201\'\275\235\377.\275\2216S\275\256l\246<\n2\255\274\037\233`=\337?O=\300\210k<N\305\312\275\362\272\333;\224\252/=\223]?=\000vU<\'\216\247<\022\231\220=)]_\275\010\227\205=\245 \241\274\316u\305<\245\260\276=\304?\277\274\330z\255\272\023>j<\017\317\215\275\233\327\017=\374\225\304\274\365J_;f\213\237=]%O\275.\345\273\274c\3708\275\365\334&\275\025\250/\275X\000!\275\"T\351<\021\267\320<\0260|\273\034\226F\274Gr\232\274\205]a\274g\217*\273\325\355\020=\365\200%\274-\243\200\275\304\020{\272\276\t\377<}\345\000=\367e.=O`\301<F\002\305<\255\265\322:\001|\016\275C\205\'\2752\030\251\274i@\217=98R\273!\006\373\272\216\"\322\274k\356\367=\252\223\333\274\3406\247\274\022\nT=\252w\261\274U\r\343\274\270\241\214\2752\257\223\274\366\211\234= \234a\274me\364\274l\366/=\032\000\232\275\207z\203\275\252h\233:\314\004\237<\305\370\250=\220\223/=\177\034\325\274\371\362\021\275h\314u\275\312<\260\274W\336\016\275\255r\245\274\365\221\345\274gil<\021\357\272\273I\374\206=\366\037k\274\334\"\314\272\30581=:4\325\274e\201\014=\025\335&\275\317T\346\274\216X>\275\337\021\t=\307\200\007\275\032n\216\275\366\220\005=\275\016r;\202\315\004>\004\th=\037\007|=\356e\204;\231y\220<\332$X\274\277{\220\274\036\035\313<\366g\\<\2270\375\274=\220R\274aE\244\275O\021!\275a\303\254\274\007\270\205<\343B\204=N\027\215=1\263]=\377h};\255c\\\273K\203\311=\312fG<O3\357<\216\226V=\203\313\035=!\261\252=\000\371\200\272\352=\214<\276,H\275[\274\210<\301\374\326<\250?\002=\341\226\374\274P\214c\275\023\335K=^\245\031<\350\336L\275\227o\233\273o\366\201\273\205\366\205\2758hF=\203b\321=\215\241(<S\233\306\274\026\310b\275\263\312\013\275\211M\270\275\344\r\352\274\237\306^=(^\037=0}\361\273\267wB\2758=0\275\361u\211\275)/%<,\345-=\205\210\031<KI\223=HPQ\275\251g\342<\235\375\316<\362\307\n;\347\034\320\274\372\212\033\274i\226i=\203\377\303<O;\273;\313\026]=$\252\207\275\361T\324\2759\013\032\275\355( \275\242\030\315=\345\312\354<\320\216\241<\344\352\347\274kC%=\300\346\237\274[\016\241\273VS\346<\307\336\336<\351r\242<X\014\332\274D\242!\274\247\351)=\225^\345;\245\336P\275\325\263\245\274\177\345\355<w\002\313\2736\027#==\310\002\273\3550\326\274\2201\223\275\217t\t\275\036\354\374<\255\310.=+${\273\231;\006=m\322\244\274\tr/=\3410.\275\247uH\273\027=\342\273\373*\357<G\200\302<\243Ah\274\302E\027\275\035\314\260<\371*L<\376X\205\274\0260\217=\347\376R=&\367q=\315\000f\274\3154\265<\252\325\r\275T?\373\274\020*\005\276\235\325\034\274\355\032R\273>\226\335\274X\277\222\274\203\350m\275V\345\220=J\251Z\273\273\240W=.\033L<\371\317\335<N\022\216=\300&\021\274\014\036+\274y)\310=\366\223\342\274%l\225=\333\202W\274\271\234\302\275\216r\352<6u\002<\211\276J\275Z\330\225\275nN*=\302\026n=\010\260H<\363|\230<\007[J=\3723\302<\2647\336=\343R\036=fL3\275\371tg\274>\034D=@\373\314<U\301\351;\274\364\366\273e?C\275\347\357\303<U]\246;\255\230\326<\271\300\021\275\341\024\035\275\364\271T\273\347I\016\275\350\\\223<>7\025\275\307\200R\274Sz!=s\370\226=\256D\022\275\355\306\254\275\345A\030=R\3156\274GY}\275]\210\307\274\377\257k=>\263*\274\204\025_=Y\234\365\274\370\326/=\tZ:\274\220\252;\275\371\"}=\361G==\335\313\213<h\322-\275\333\271\204\275Z\345I<\376]\357\275\273y_\275\370M\014\275\177\003\241=\306Bm\274\035\2720\275\241\316\373\274\313A\237<\251\270\203=e\357\243;-\3478\275\312\243\271=\235\213\333\274$\003\274\273\034\315,\275\354\224\313<\\\341X\274eM\001\275\377\317S=\261\306\022\275]\270P=\261\216\206<\007\032\334<>z\313\274!\302\345\274\007\231\233=\301\217.\2747z\371\275\204IV\271\214g\254\274)\211\021;\214\273\220:\351!X\275\010\325\211<#g4=\373\005\027<\22765=\370W\262\273UE6=\001\271\021=o\324A\273\255F\253=ts\222\274Me9\274Yx\002\273j\263\037=\215\020\t=\t\270\374\273\375k]<\305)\317<\031c\022\274wq\261\274\3512\034\274\267\202n\275\014\364\333\274\332\274\203=X9\323\274\367\230o\274\0104\277=\332Z\200=\310\275I<\216zD=\037;\266\275q7\251<F3\315\271\3028\353<H\017\245\274\250d\003=AI{\275\305\265\245\274\2274/=\262F\201<\327\207u\275$\260\317\274\361\223\332<\004\223*\275\376cM:dP\265\273\334c)=\220\016\252\275\273\325&=\241\035Y\275\001\013 <X\376\024=\271\r\205\273FJ%=\201\345\016\275\203\370\030<i\202\274<\014\331\357\2749\177l\275,$\275=\010\216\250\274\000\243\367\274\364I*=\316e\031\273\217,\025=\206\373\200\275\213\000\372\272\224\r\004\275f\260\344=KE\031\275\033$\253<\220\301\026\275\337\000\205\274\036s\006\275\331`\231<\267\312r;\037\227\257<\021 \306\274\003?\326<\266\n\205\274N\033\204<\341\323R<\322\366W=\327\010\236;\234\021\231=cF;\275\366\231\263\274er\332\273\213\353\207=\014\224\336\274\335\261\370<,r\006\275\267h\006\275\024\332\307<>^\236\275WD\310\274\204&.\275\003o\013=-\010\334\275\201Oo\275\"\253\304<J\332\332<\370\002\360\274\347\340\345\273\304-\353:\321\365\014\275\375k\310<$X3=\227\343\303=\304Cp\275Hn]=\323-\032=\273\263\253\275\350\355\004\275\217j\370\274p\034\350=VrO\275\031\242\244\273\364g\004\275\370N\246\275\005\221\243<\032\255\002\274oy\002=F.\203<\325\374\366=d\025\354\274=q\230\273\226E\267<dw\232<\306zz\274S\350\316\274&\017`=\276R<\275\213\343/=h\221\307<\006\207(\274\005\205\332\273\376,h=\322eY<\375n\241=Be\017\275\"\004\221\271vTO\275\276\262\"=\2464h\274y\347s\275-p\267\274\022\240\002\274\001\227o\274\232En<\0023\204<\376\261\036=\034W\022\274\346\203<\274\304o\016\275\\C\031=\337\362\037=\030\261\303\274D.)=\221t^\274\372b/\274\357\200:\275$\250K\275\374e\351</\346m=\004\313\320\275nu\327<\374\001\351=a\301N\273\276\35217\206\270\005\275@\333\334=\243$\226=,\365b\275\202\232\2069\324\300\315\274\2441\000=\002\233\373\274\211,\300\274k\361\237<Jr^<\033\305\220<\010\177r=(\275\323<\261\355\313=\003Pf=\002\366\003=*\202\255\274\rrr\275j\316\343=\336\365~\274\353IP\274\212u\227<\246}.=\252\250J<\005\313\347<%\006\000=ia\351=\351\307\250<\202B4=\001B@</a\010\274\005T=\274\233\344I\275\202\246\211\275\275\375\010\276\207\004\345<\321W\005=\212\375s<\334\204/\275\"2\245\275\274H =3\313\252\274\014\255\225\274KR\023\274\347\233\250<R\177\323=R\360\277;\030Ms\275\020\234\035=\353d`\275hi\203\274\307\\\007=d\254)=\213\236\211<\0267\227\275\343\361\371\273Z\246%\275\022~[\275\3303\316<\352\340\020=\r\356\350\272\353\214R=\301\367\310<Q\317\010=\036:\240\275\3546\264=\032\322?=}\217X=\023\001\006\275\246\2050\275m\254\007\275\237\360J<dRg=\3552\031\275\304k\312\274\270\303\270=\310\272\206=\342\025\230:X\300\260<~\223\203\274r5\232;\275\266)\275\354\265\321\275\205?\377\274\316\'+\274\027\000\367< b\260=-z\376\274oWv\275\254\"\221<+\341\312\274~b\035\275 n\324\273)T`\275}\253\211\274\313\374\352;\n\303\223=\375I\036\275\036n\005=\316\356\277<\200oU\274\201\256\004\275\035\257\001\275\202z>\274\344\302\352\273S2W=\335\314\204\275\017\030l<\374\307\000\276\377\024\222<\'O&\275\300\344\002=\353\343\006\274\317\332!=o\260\276\274\242o\224\275\242=\374\274\237.[;q\r@;\315F\n\275\337\314<\275m\324\205\274Pn$\274\260\324\373<\3521\212\273J\\j=\207\306`;/\004\030\274\221\315\177=\200\311\253\274\2545@\274\000\017\310<\365\346\345<\300a\"\274\0302p\274y\320\206=\022\016\005=\3516l=\354+\223\273Q?\004=\325\332Z<\3408U:\205LO;sH\337\274(Mo\275\304\243\327\272\332\234\311\274\302\336\004\275H\220q<\307\203-<\366\351\220\275>`\273\2740[\177<,\3051=\253u\023\273K0-=z\306\363<\270\023/;\316k\231\275$\022t\275\356\262\355\274\302\370\267<8\n\215\274%\224\246\275N\226\017<E(2=B\335\252;[M@\275P\332(=`\306\351;\253\247A;\032\345\221\275W\333&\271_\016\230=\301fj\274$o\264\274\262\304(\275\303v\245=\"\236\221\274\304\254\342;\371\345S\275\201\350=\275$\323a\275\375\310\206=\327\335@\275\254\355\263\274r\007}\275\342\206q\275W\215t=\005[t;N;.=\251\246\3279\r^\022=\014\023.<\235\017@=\225\366A\273 \255|=\361_5\275\300\217\257<(\222\375:\277\251\236\274B4\324\274\255.\343:6fr\275\205?\222=s\307\306:\340\217^\273\013wM\275V?t=\363y\211<\322\307\234\272%\346\250\275\226\0336\275\000\224\r=8\036\275\274d\022\020=\255Y\224;^\304\025=\033\212\334\274I\222p;\363\233\311=\'\\?\275c\227$\275\360V\232<>\024\250\273\351yR<\312;\t\275\030Be=u\022\202\275\376+:=\253W\270=\020\330\204<\331&+\273(\030!\275$lA<\377A\036\275\232Vu\274\3573A=/\000%=`\377X<zNI=Jj\222=\212\246p=\030\243\304<\203\014\026\274\255\\\226\275\370^\225<\332~\014\275\370@\032\2751\023d=\375\200\226=\331\330Q=zD\270<\331\306\013=\325?\355<\252\331\253;Y|Z\2751W\255\274\031\303\023\275\265a\332\275\301\016\221\274\263b(\275\230\020b=\235\210\033\2756e\335<\356\321^\274*\240\004\275h\317\014=sn\373\274\257y!\275G{\204\274\2618\026:\324\357P<\034\373D<\207\026\224<<\002t\275\001\371\310=\214+y<sx\243\274\315G\205=\227\264;<\353Z\313\273!\356\234=\3027\023<b\330S=Q*\216\274\332\256k=\227\"\\\275\271-\307\273\267\302\245\274\217\320\277\274z\204e;6\203\213<\006\353\273\274\302\215$=[\205\037\275+vx<r\"\030=\341\025\211=\226\033\002=\013\237I\275\014q\374\274\014\205\022\275,\007\256<#\210$<\245\305:\272\202>B\274w\373\261\275_J\333\275\t\005a\273!@\361\274\335\213\315\273,\225\267\274\316U\n\275\347 \010\2739\331\004\275\005\354\356\274\236\204\203;;;\367\273\236\254?=\336\266:<t3\310<\245\235\030\272\220\242\274<b\\\327\274\n\260w\275\370\317B=j\337G=+{c\274\262F\020\276USC={Z)\274Q\210\261=h\344\002\273\2032\316<`\021|\275\002\224\016\276\364\323b\275\266j\213<\355\tT=\037\263\036\275\225\222\n>\247C\023=\352\376S<\204\262\005\275\244\321\210\274\014z\000\2756\326\025=\032\261.=\351E\377\274\321\201%\275\276G\275\274\352s7=\016\0170\274\345\001\364=\251\301\233\274\263\352e\275\205`*<\311-6<\206\242\257=\033\315\377<\031\342\262<\374\323\326<\330\212\237\273o\002\311;2r\243=:\233\313\275\346\036G\274\251\250\006\275\374\216\226\274\330\350\224=4K\327<\304{+<\346r\226;{\320w\274\244\226\t\274\356\\%\275:\234*\274\277MY;\024\035\224=T\316\006=i~\212:B\226\245=T\273\'\275\225*\"\274\235+\232\274U\'\034\2740%\243;)&P\275O\352\2619\342\305\355;\021PA=\213\252\333\274`\221\220:\001\365{=\274uU=\372\206\214=/\3306=\203*\322\274\267\0200=\311p1;\2636t\274K]\001<\222<99\335\20089\371f\247\273\037\270O\275\276f\265<g\316X=\213\267\270=\346\373\256\275\202\010\356\274\031D\303<\246\374\307<\311\tY<\303w\371<g=*\274\352\344S\275\275a\242\274~[\244\274+\026\304<\330\365\274;\372\3472\273FX\211<\006\004\277<\344\226\207\275\223\347\264;\203\344H=\016h4=\240\3642=y\231d<\322\335\224\275\265\270\210:Z\240\227;m\360\205\274\031\032\341;\205\014\212\275\375\315q\275\254?\036=\014\001\207\275\244vj<\375\310\257\275\037_=\275@\352n=X\226a<\337WE=\30029<\r\021m\275{\254\334=\352\305t=)\274\255\274\223\221\212\273\020\031w\274\177\236\202\275\235PQ=\300xT\275\316\0163\275\205T\026\273\231.?=kM\221\275{\217\313<\205\247\247\274\313\344(=\307\373T=\035\204\273<m\242\354;\261\\9\274\342\372\361\274&\331\243\273{\340\003\2747D]<\350\303\224\275\016\355\354\275\257`#=i\033\364\273\356\201\370\272\316I1\275\226\"^<>\247\204\275\351jT\275YZ\204\274\360\201\030=\374\007K\275Dk\300\274j\365\265\272\346D\010\274\021:\230=\221\317\003\267q\353\207\275\3625\351\273\235P\222\274Cn\227;\375\354\n>\366\030\272\274\306\340\2459\301G=\274\035|\201=\201\"]\275\210\220\243<+0\237\275hg\216\275T3==4\005\256<\017\223\032\273I\365@<?\200\300=\272\316\r\274BPh\272\307\240\302=b\316\254\275\330\016o\275\"\260\311<\030v\234=\307R\332<\023\000:=\314\224m<\254\262a=\252\303\021=\326,\006=#\021\375\274Z\336\037\274\240\243\265\273\247\216\303=kU\243\274\252`b<\366\235\361;V\373E\275\301,\207=rf\336<?,\013=!I0=\020q<=4\245\237\275\240\034\220=\254\260\021=(\273;\275\034\016\304\274\263\346y=\210\010\346\2741\222h=S\214Q=\224\305\314;\351\231\203\275lc\n\274\026\266\265\274\374:e\274\244\242\302<\024(!\275\020\355\013=\340\360\303\273\351^\264\274\230O:\274\035\364M\274\304\023J<v\373\324\274\351\r\365;4b\036\275>\204K<\026gC\275,v\207;L\022z<\255\226^\275\036J\237<f\270Q\274c\n(:b\300\222\275\343E\237<\311\352\020<\014\233&\273\227\016\345<t\242e<4\034\226<\243\306\330<t\2626;\321z\242\274\016\340C\275\207\"\007\274\212\000\001\275\332\007T\275\273[\366\274\3319c=O\250\302=f<\"\275\240\307\227<i\020]<\343\253\247<\341[\253\272\000d\207<\006\225\344;\310[\251\2744\327D\270@\3561\275\326\000:\275\003\340&\274\207\244\024=\324;\243\274\233|\372\274\026\265\233\273Ty\023\275e\216\330\273%\254\207\273=\221\306<e% <Y\242\004\275A\010y=$<4=\244\352`\273\\\340\013=F\356\250=\366\336:<\373\220\032\274\014r\030\275\031\333\022\274!\3166\275\r7\306<\220\356E=\377Y\203\274\315G\213<;\005\247=\021\264\201=O\205\332\274:{r\275%5\265\274\365\215\222\275\'\021A=\004\356c<\343\374\025=\203\354\025\273\355\211;=+\344Z=NC\232<\201\213T:\235 G=\230f3\275\261$\365:Nlq\274\304S\266<\322N\300=\334\020C\274nsl\275ll\203\275u\237\363\274Hb\331\274\367\256\227=\264\025\315\275\207\303\256\273V\3563\2759Yg\275\331\032\273\275\306\371\237\274s\353\027\275N\360\251\275\204O\207;\275~z\275l^\317\273r\315\221\275\232[\213\274\3732]=\231\005@\275\226\013S=\013\221\001>Q\256.=>\361j<\263\235\331=\257%~<\374\035\213=\371\267\034<\250=\251\274\227\254f\275B\316\211=4\273\211\275!\032\326\274-\211\275;\311Lw=Y\326K=(p-\275Bl =\277s=<\007\262\367\274g\334\236=\351\322H\275A\210\024\275\244~\255\274\275\201b\275\340n9\275\263#\221=>\204\032\2751\355\000\275\332v\252\275\245\365\264=x\310<=X\373\311\274\257\023\323<\220\014\002\275rX\226<\373\343Y\274\320\034\025:OW\007\275}RQ\274\336\200\310\274\3312\316<\334a\256<\364\261\227\275+\232\365<\331\303\"=6\225s\275\0355\274<\rX\350;\222\226)\275\267\312\252\274_\374B\274)\nR\2758\227#\275N\331s\275M+\200\275\261\203\257\275I%?\274\214\241\310\274\313\215Y<\240\237s<\216r\005=\3031}\275^*\307\274x\350\227<\005}\007<P\265\002<c=O<_-=\274\022a\346\273\327\276\220<\007X7=\237\272v=l\217\032=\26231=\031\371\225\274\270\224\004=\267\237\273=k\262Z<\320B\033=\306*\242=4e;\274\340rK\275\331\347\225<E\037\263<\\2\276=\233\273\210=\005\\]<\362E\024\275\376\333\205<\230WD<\244\230\232<n\251h\275\325R-\274\242)>;m\2621\274\356\021\004\275\311O\216=\211\376\251\275V\177\207<\241\276\357\274\276\275\032\275\331\252\034\274ET\030=\326\206L<\241}\206\273\031\323{\274\003p\315\274\322B\256<8\351$=+\252\330\275C-I\275\032\213\200\275\rb\205\275\t\3505=}\nO=N\377\023=\332\367\314\273\373\216\n\275x$W<qIM\275\221\200 =\212\242n\275\214\013>=\022\034\210=NH*\275F\230\201<\315\273\263\274\261\205o<+\250W\272P\337_\274f\354:=\035\227\245\275\306\354\030=\027\335\274=}F9\274\273\275s=4\354\020=\367\205\200\275\361\336\236=D\217\202\274\326\360b\275\323\002\227\274\371\212\354;lv\035=\236X\316\273/\033!<\026X\267\270\343G\010=\310\022\216\275\237\324\010=N\344i;\020\3015<\3058#\274D\210\003=j\311\354\274\316\310\021\275J\317\227\2759g<\273?X/\2751\346H=\301\266\264\274a\240\235=\001\307H=\313\350\001\275~%\204={\rM=?{E=\272\237\211\275!-\326\274|\035\222\273\245\255-\274\217\216\217\274\024Z,\273V\023\244=\300\347\232=<\205\213;\301\377\264\273\222)\035\275\262;!=\235\373\026\274\225\362\037\275\313\337\002=\026k\305=\214n\246\273\254_\311\273]\n\205\275cc\004=\313\031\310\272\031\231\305\274\267\216\023\2736\336w=\353\247\374\274\315\2432\274\035\320\000=/\020\272<{xV\274i\246d\274\262\315v\275\322,2=wWX\275\343~\217\275\242\256j=^\255\214\274\375\272\030<\363\004\307<\373\257_=\250\013\025=3C\247\274~\300\026=r3\220<\220\"\263\2756I\254\275\347\244g=;\244(=\243\034\267<\356\347\245\274-^\225=>\322\261\275E\314\320\274\270\205\257<R~\317<6,b\274\261#\\\274X\306b=4&\316\275\305~\000\275\352\0053=\324\303<<\372\261v<;\217!<\230GG=#\344\320\273\373\365\003=\025\257j=.d\357<\234>\210\275\325H\304<\365E\277\274\007\260$\274KN\311\274\274@8\274\005\357\223\274\267\036[\274\340\\\231=I7\346\274\260\350\242<\320\310y=KM\322\274\300m\240\274\010\255B\275\234\263\017\274\302\n<\275g\207/\271b\332V=V\363\010=\251\232R\274\205\023\344\275\314\223\275<8s}\274\322\016\204<\364.\210\272r\356\311;\033\264C\274r\337\304=A\332\322\274\263A\237\274\207\237k;]\323C=C\366\032\275\262\'N=\231\021\221=9\003\222\273W\204s\274r!\003=\205p\014<\274S\256\273u\024t=\304\231\027=\374\214\014\275g\324/\274I4\306\274\254J\227=\010\021\335;\020\252\335=\340|P\275\0349\274\274\27453=g\234<=a\342\224<\202\3062=h\230\t<4\230?\274\254P\336<\361Z\310<\365x\223\273\3017\234\274\231\224A<\315\306\333<\343\366\246<\327\231@\273zI\317\274N_\215<\365\000D\275F\233\357;Z\304\277\275\214\363d=\301\273\364\274M\234t<8w\251\274\311\237\027\274\333\r\347<\243\241\317<\312\336\220\275Nv\205=\3064\363\274->\265\274\335T.=UER=3\225O=\376\003\305\274\334g\314\2745\2533\275\233\307\300\274\270\263\020\275R\352\314:\025ve=\246\003\204=+\314\225=Z8\222\275\210\205\217\272\244\276y\273a\016I\275\357\244\264<\251\234\227\275Ky\203<\337\222m\273\2067P\274\206\032\274\274\214u\241\274J\261\301;z\303\346<\014El\275vp7<}\312\344\274*\240Y\274\335\025\232\274I\212\010\275\366\330\013=g\3165\275\366\222&=~\351\004\275~\366U\275\371S\344;\303f\022\276\373\271\225=\307\221\027<7\1778<\360\035\224\275Q\000\t\276\225lh\275\010\010\\\274x18\275!T\261=\'\2428\274\n\354Y\275\312\001\025=\r\356\256\275\356\323\323=\343;\304\274\233\336X\275PcS\275\376\0175\275\205\215o=\333_\004\275;e\226\274\264\240&\275@\316\020\275\211\201.< \355n\273\211\'\213\274\013\200}<^\265H\275_\311\375\273\371@>=g\376\316\274J\037,\275\3605\031\275\201j\250\274\022\302\027=\245u\240=\351\366\232\275\326]\246\275\234\341&=\003;\200<\257^\204\275B\"^\274h\342\261\275#\341\313=\321\213\266;\\p\226\275\372~3=H\034X\273\271F\323\274 ]\034\274\315L\271\274s\r\177=\270\336\225\274\240\024!<\345 \177<\364\245p;M\365\177\275\t\302?=t\223_\274\366\304\231\274\261[V\275m\244\311\275c? =\330\333\252\274\236x]\275\377\276\265<\212}?=B&B=8I\247\274$H0=\360x\001=\337\022$=\014\267`=\237\252s=\354\n\300\273t;\303\272\\\276r=\200\374\324<\020\274G:\024\264\304\272\236j\000=c\254\000\274\234\356<<\t\004Z\275G\010\343\274F\203Q\275\341\213\211=\246\271x\274\025eO=@\260\263\273x\303\335<\300`E\275\275\020\003\275\352\024~\273\326\032\033<,\031\374\274I\351\340<.p\"\2753\202\250<\320P\026<>H\316\275\317<\271;/\305\213\275\t\317C=J\200\311\275u\032\000\274ZD\025\274]\277\252=}\302\036=\257\304c\275\016\326`\273\020\035\366\274\322\3053\275\363\276C=\332\014\350=\321k\035\275t*\212\274\036\026\202=i\236e=\353\261\021\275`\203e=+)\255=\353\211\334\273\361\2572:\335\347\203;\225\352D\275\004\231\000\274\001U\"=\343\014\233\274so\242\275\353g\251\274\017\356\217\2741\014\035\275[\375\n\275\372r\256=\222\2461\275Z6\201<z\370\337\275\321\350|=%n6\274v\360\213=\376\323\312\274\270W\250<\207\250\'\275\210\276D=}\007\177\2741\234%\275\353\265\312\274\023\364\305\274B\346\355<\016$]\275t\363\256<\303s\002\275b\013h<\206\330\216;\233f\214=\230\252\001=\274\034c\275l\312\311\273@\362\355\271C\267n=b\353\247\2742<\253<\375\266\327<\322g]=K|\340<\3527@\274\346`9\274\261\350\216\2755\r\212\275\3768\210<\010\333H=\205kR\275\323\003\023\275;\261\322\273\366C\252<_C\022=\244\335\026\274\034\245\037<\257Y9\275B\034\232\275\025\033\006\275\3545c\275K\234\352<\363\251p=\334\211\234\274\276\244A<\226\255\372;\321\324F\275\025\213\313\273g2\300=5J\262;\322,G=\213G\035=\236rE=\253\221\330\2741\327\006\274\372-\303;\364:7<a\272i<E?\345\274(\220z\275\367\312\337\275\350\315\010=\230A\225=k73=t7\364<)\223,=\267\273H=\242\377R<\312\317\340\273\221\n\254<\273\247C=\210b&\273\242$\223\274\273\207\242\274\315\014\266\274\317\220%:\030/\343\272\342\267\202=\005I\006=:X\206=e\216\240=^\017\346\273\372\211*\275\245E\220=\265\331\033;\254\350E\275W\030=\275DI\262<\023\272\222<\226\304\317\274\255V\275\273!\277\327=(\244q=a\365\203<\341\344\002\275\276\177f\275\305-\212<y\301o\275\243s\3629\347+\336\274g\3312=R3.=\205\307\221;\021\323\271<\203\322_\275\246\2567=,\342\357=\347\221\201\274\244r\347<\234O\257\274J\333V\275)*\261\274J}W\275\020\210\237=\021\244{\274\241\263|=\277\014\325\271R5\366\274\021\006#\275\005\267\333\274K\371\313\273\247\373\377\274\347gC\274\367[\031\275\237\351/=\207B(;\254$\230\275\014\230\274<\372Iu=\204\245.\274G\314\336\273b\351\346\2753%N\274\370\213\233\275Q\260\220\275\205\021\033\274\330\353>\275kE\204<\216\300/=\337\'\332:\240\264\247<\3347y<P]\214=\n\331\354<\354$K\274\020\3625=\316\007\277<\257\320\t\274\305\364\217<fQr\275\322\0055\275\353e\363\273\3536?\2751\311\035\274\240K\360;C\n[\275\013;K\274\2218W\275\375hX;-\301\007=RS\233\275C[1\274Y+\305=BP\367\274\270\315\247\274\211\260\356\274\354x\242\273\257M0\272\336\274J=Yp\222\275#!\206\274g\336\240=m)U=\'\351\325<0\3117\275\376\353\330\274]X\007\275\244\203\021\275=\243#=\375\377\232;\016[D=\331j\245\275\316A4=\244\233G\274\177\372\371<Qv\272<\364A\244<\330\362\033\275P\210v\275\252\323\225\275\014\334\234;K\233C={\310\005<B\371\030=\335\226\262=\314\375\320=\3229\346\2757|y;o\351\252<\372\036\322<6\374\\;y\002@\275\310\307A=\264\254\377\274\310\345\234\274\260\021\210=\273\372`=b}[=aPk=\223\373\203<N\3759\2754Z\300\274\360\275\364\273j\353\350\2743\231\277;>\307\250;\331\226==+\354R\275\256\020\360<\'J\221\274\364\007];\273\253\036=\360\334\034=\352]Y\275\277\241\006<}=(\273\345\252q<b\262@\275$\'\217\275S\234\262\274C\201\037<W\037\312<\'\325\276<lN\250\274\271$\237\270c\2520\274\177\261\224\274\313\007\212<\2665\311\274\nmm\274\366\205\364\274\255.\027<RGv<Q>\305\274\003\371\261\274\316\260B\273\234\324$= A\032\274\014\274&\275,i\250\274e\211\326;\242\2418=5\374\233\274P+)<J\363\213\272a+\206\275U\004+:\205\301\024=\301\251\206\272<U\001>\001\241&\275T\361\344<N\207\273\275\360\341\005\274\177!l\274\253\321C\275\220?\022\275i\334\215=\361[B\275/X\316\274\027y\357;8\311\207\275\033\354\331\274\243Ww\273\220\\\351\274qA\030=Ga\355\274\207\263\007\273\260\275\246\274\270\256\336;\231.5=s\"\241;t\233\223\275\2527\205<\372\031\252;\3723_<vhG\275E\310\334<.\347\312\274\337\345\271=\366\306\177<\001\201\224\275*\323\221:M\222\230\274p<\262=\007\321\355<\037\0336\274\340~\270\273q\337\010<\004p\321=\t\014\351;\275\036\276\272\014hd\275\021\245\205<\237`\026\275\330\260_\275j\r\020\275v\347u=\n\223\264=p\3338<\210\016\"\275\304\333\263=y\246\222\274\215\017\007\274nFE=\271.\220=\341\223\306=\2334\316\274J\206\n\275\315l\017<\307\234R=:\367_=\215\245\250\274\274\030,\274,\006v=\350\332\200<\341\220\230\274(\2377\275\355{\314\274\214d\r<\207\2138\275\007\260\305\273->\243<\231c\360\273?_\243\274y\362.\273z\225)=}Z\255\275\310\030F\275\346\210\236\274~\371M\275x@7\275\227\277\263=\n\251\024=\177\340\033\274\2352\034\275\037\355\022=~\307\226\274)|^<r`\003=\231\017s=\313\247\344\275\234\252\242=]\215T\273\302\201\310\275j\372\321\274G\246-=\207\227\006<)D\263<0\300\273\273;\261u\275\234\347\262=31(\275\361 \224<\260\320+<y\306\356:8\266\036\273\262{\227=\253\222\320\274S\256\332\273\302\3227<\031\256M=\246\274\237\274i\336\023\275\001\304K=\200D\037\275\017\265\372=/4\327\273\217\301s\275\273\226\020\275:\300C\274\266?y<*\246\361<Lc,=\177\356\"\275\352\220\246;H\033+=<Y\247\274\275\234\222\275\303\025Z\275\260\321\324\273@\210\233\274\303\325\246\274\212b\222<>3q\274\212\201 \274v\207F=\335\333\307:?\346\320\273\240\374H=\315\343\r\275\221\374C\275\331l\177=\255\256\311<\243\330\354\273u,L=6$W=\307E\004<S8M<\276\357+\275\340e\006>V\356\037\275v\251\350<\035_\202=Df\376<\222\322,=\362l\236=\304\332\253\274\021h\201<\263\356\307:\303 0<#wE\274\026 9\274HQ\256<\247J\224<\324\003\236=\014\251\320\272\305\375.\275L\361b\2744\317+\272w`v\275gF\220;_\006\314<%$\215\274\004\310\031=\344\301\260=\002S\366\274\n\355\356<#I\004\273\277\226\346<\030\364\255<\371\206U\274\272 \262=\325{\207\273\207\303b=L\2544=\316N\302\275edU\275\252\"y<T\007\211\275C\035\344;\375+\256\275\023\031u\273g|V\273\312\002\233<*\303\354\275\224\014X\275jX\032\275\347`\276\2753\375\242\274-\300\311\274\213\220\370\274TS\304=j\301M\275\204L\263=G\023\344;\377\221\235;\314\243S;=g\245\272~\233\334\274X\251w\275bi\347\274\273\3225=~\024\360\272\346U\032\275\346\244\036=1\027\242=\002\242\353\275\264\360\244\273\212\265\326<iJ\004=(\237\207<\360\216\024>\377\t\375\273\305 \216=\302\207\311<\377\017\303\274\324\211==\206\032l=AD\004=\252\270\360\274G\177\021=\224 \316\274\030\357r\275AE\n<\206\010u<\362\"\303\274\207!&\275$Zk\272\260,\272\275\340\310\335;69F;\372}f8\203O0\274\376\000\275\273\264U\336;\271\307\264\274\2570\014\275\273\032u\275\322P\007\274e\374\316\272\003\234a\272@N[\275\313\302o=\370\352\246\273x_\251=\010\327e=\355\037\215\274/\235|=K\345\274<\377\033\364<\026\327\200<&\263\306\275|\214o<\324V\205=#\335\034\275\014\366g\275\261\363P=5r\010;jU\006\275\221\n\203=\031(\374\274#7)\275UG_\273K$o\275\251\023\307<i\320\\\275\370HJ=\201z\002\275\007u\214=\005\234\235\274\001\030\211<\366\001\207= \224S=E`\341=&\';\2756\366\017; \300,\275\362n@<\220Nm\275it\345<\235\211\214<\215k\221\273\361\242\203<\304G\350<\325\263v\2752\\g<F\305\205<a\nK\275\037\020\305\275o\3671\274k\261\343=\217\327\325\275\311U)=/,\270<\336\201\300<\260E\276\275\022#\377<\263s\242;\275\210&\274~!\244=R<\206<\315\361P\275ld\233<l\244&=\270\2550=Q5>=\312DQ=<r{\275\304\'\035\275-\024J\274\034\250\273=\241\3312\275z\313\013\273\357v\017=\226\010\025=1\320\022\274\245\373\201=\337)\356<\314\023>\275} \346;\300\264\322<\224\240\215\275t\224\374;\032\365\201\273JJh\275\321\001\205;\025\351^=a:C=\212q\035\275\273\321\365<\211\344C<~\305\211=;\t\342<\217\2550=\350\253\315\274\310\244U=\227Nz\273\300T\332<\354\375\346<(S4=\236\215\253\275m,\227\275aD[=\350$\260\273\344\256\242<\334\013\262<\3137\264;\006L\214=.\335k<C7?\274\021\300\234\274tc \273)\346\000\275\224os\275\223\260\020\275DP9;\307mb\274e\233\301\271\343\2361==?\t=\377\343\256\274\362\367\303<\025\241\271\273\351+\243\274\343W#\275\304\276c=9\345\205\275\240o\020\274L\237\215\274\227\002_\275C]\027\275\327\334-<\322H\267\273\240\367\334=8}\207<\377\257\306<\2521\000\275K\2511\272\032\224\264\275\3774R\275[\204G\275\201\021\213<A\261\257=\253;\322\273>84\2750)\033=\305\306^=\256\214/=\353e\217\271@Z&=5?\225\275\0203$\2759\017\332\275`\354k=\366i\251\275\376ja\274\277/\372\274\235\237B\275s\356\313\275\020\0168\275\270\"F=\341\2551=\214Kh\275\315\255\004\275C\223\260<8\3251\274k\277\266\273\263{\204\274)d\033\275\227\345\240\274\2219\027\275\277T\214<\371\372\276;\277\204\367\274\014\242\033=)\344\225=\272\275W=\266\326\36686;\264;H;\335<\257BZ=\210\006\234\275~\377|\275<\030\324\274\016\250\013< \260\226=\262F\212\275hH\317\274\237\023_=\245\247==9d+\273!~\004<\003\006\266\275},\216<]\"\312<\035U/\275;\n\222=t\350\027\275J\317s\274\275\241\220=;c\251=\032\024r\275\323\304\017\275\353\"\033=^0.=o$\263<\223>\246=\033\005\347;\331ZE\274\023r6\274/\307Z\275\275C\306<\246i\221\275\305 \201=\344\211$=\302^\014= mS\275\023\"a=\276p\233<\331w\247=\304\203q\275\235\253Z=\032t\315\274J\3053\275\362\343\315<\2271\215\274\215G\023\275\006b\004<\203C\022\276\006WL<J\210\322\272\215\r6\275\303$\377\274.\366\004\275\316eT=\230\332I\274\002z\337<R\003\326\274\207\2230\275\271\244Y\275\213\233e\275\352\276\223=\013\030\255\274\272\367#\275\375\205\214=\251uY\275\000.\213<\240\362\312\274{\327\214\275\253\361\250\274*R\016\274\374\313]\275\272V\312;\225\263m=\344TB=\331\361S\274A\224\251\275\273\010\235\274\271s\177\275S\354\343<\233\231*\275\247\320o=\032H\035=\212v\315\274\256\346\314<\273\221\233\274/\365\231<\216\260%\274tv\277;\027\227\250<F\3240\275\231\033\354<\277\316\014\275\352\334\276\2747,\227\275W:\331\273)\376.<\333\246\024=\017\001k\275\000\340H=\376`\225\275\362\213\222\275G\'f=T3w<\350F\344<\317\222\364\274\005>\315<\357e\022\275;w\313<\252\205\205=\240\244\177\274\312\337x\275\357\351r=\276\225Z\275\274\376\305\274\035\270G=\375\362N\274^`\226\274\315t\271\275\330\242R<\005\225\357<\225wf:D\256\352\274\322\021\032\274\354\0354\275\220\002\274=\316\273\266;\037,\314\274(\337\356<\025\262\265<\222\273\267\273\027\236T=[\343\177\274cgJ\273\325g\374<0n\025=2}\235\271\024tb<^\024\205=\200\363w\274\t\246\373<j\014\222<\242_E<\272Z\266\274C\325/\274\330r4\272\014\017\261\274\301-\324<\002\273\235=\230\242Y=\2601\004=\256\317\206\274\t\323E=\255\367\222\275\222A\207\273{\032\315\273\341\214\205\275a\013\260\274\225\223\231=qB\212\275\205\031\375\273+.\335\275\237\332\305=\327\001%\275d\'V\275\215\324v<\210\231:\274\\\325\205:^\241\245= \246k\275\256&\230<\322\204\361\273V\2636\275\305\2413:h\3553=\325\211\327:\254\322g\274\'\265\377\273\305\330\205\274R?\3569\017a\014\275\307\231T\2756\3261:\016j\025<e/\026\275\021.}<\002\275\014\275B\234]\275i\323\270\274\305\220\020\2755\014\334:\030\243\013\275\302l\\\274T\3076=B\377\332<\373\247\030\274\310I\377\274fJ\310<\322s\022\275\t\337.\274G\212\010<\022f\312<\357\257\351;\004\366\243\273\302\205\034\274\265\3106\275\356\206\264\271 6\027\275j\361\344=\236\321\330=\030q\253<oK\3619\323\334\010=\005\344\317\274>\273x=ETA\275l\037\031\274,\307\002=\356\226\267\273^\237!=\265>\207\273\345\377\001\276\310|K\275\256r\304\274!r\276;\001\034\032<\'i}:\252\375\007<\353b1\275\362\265\211=\0134~\275G\253M=\351\022\207=M\\i\274\325\207\374<+\265\333\275Rw^=\365\026\034<\255\\\025\274\216\034\270\274A\006v\274\241}\"\274\024\301\002\275\372\227C\275\003\252\030=\373\2225=\220\272\220\275#\026\036;\022g\032=\342\224\337<&B\315\275\204\206\375\273 \211\302\274\222\310.\274i\003\207\274\325\337\t=\020\352\036>|\373\222=\255\274\001\275w\2122=\341m\265\274S\326<\275j\024\270\274-\214\n=\277\272\206\275a\035\244\2743~N\273\255\211\022\275\332X\315\271@#\016=F\214\005=\245\217\316\273(w3=\261\362\354<P\242V\274Yx\230\274\375\274b\274\311\010\200=\226\001\200\275S\341\376\274{\261\t=\337\263\271\275\256\002\206;y\315\314<&0~\275\256\316x\275\373\270|<\224E\336<\377vm\274F\377Y\274\330P\355=\211\223\263\274n\300\245=\241I\370\274g\233\020<=\223\201<\231t\027\275-/-=\255\232\361<h+\320\273\322\224V=\317\215,;f(\215=R\253\021\275,O\001\272\036\t\022;\243\307]\275u\237\372;\253p\323;\373\302Y=\346\205\264\273\301\037\376\274\n9\220<\275\007a\274\246\235\371<U\016\004=\267\037\013=\312\232o<\326e\257\275,\277\205<\357PE\274\337u\340<\250\016\256\2750*&:Y\343\\=m\372\251<\256\002\361\274\305\237\326;\345o\372<\246xa;\207\001\023=\242\034\\=pY\207\273\214\321O\275^\004y<6\006V<V)\222\274}\024\365;\236\355\265<\206\264\214\275\325\216\035;sK|\275\242\224\251<\322\272\373<\367c-=X\351\343\274G\245\260=\240\213\334<r\321\323<\010\231\365<1*\320<i\3435=|\037\372\273\200bx={\177\370\273\253\236};.\323\255\273\354\335\243<\\x]\275\234\375w\274\365\265Q=\026\251Y<\310-\005=\325|\023\275m_\337\273Wz\230\275CVs=\277\347B\275\357\206_=\307\344\264\272E\327\261=&\276:\273T\210\027\275\014\311j\275\333\302\227;1/\205<\336\026\334;\301\345\224\274\013\354\210<\227DD<\3249?\275\033\026\351\274q\030\244\274\233B\312\274\027>\355<8\272\205:\236w\206\275\220\206y=\264j\255\274\324\355\023\275\204\344g\270\005\226F\274?\354Y;@L\027=Ji\233;\266\270\237\275\200\352z\275j|/<\272\367:\274\234\025\030={\002(=\232\364W\274\221\240\030=\314iV=\226E\202=t\0061\275\310K\210\275\315\177\030=\010\3172=`\337\312=\221\376\246<C\3077\275(G\221<Q\277t<\273\331G<\2576\315;\270\340\355\274&\262g\275\035\310e\275\272\255\276<G,\022=\237\320\265=<\026f=;\034\'=\314\255\252\274qLS\274\252\303Z=<[B=.\255@=\336\374#=.\360Q\275\302\336\005\275\361L\213\275r\201\356<x\2442;\272M\351=\036\323\324<r\350c<\335\341\007<\243\340\277=\374\252z=\201\020\301=\242*N=\334\272b\275\305A\206\273\262y\365\273\245\005\202\275F\345\315<\036\035\007\273\260\325\232\274J\334l=\'<\261\275&)\242;\007\201\346=\331n\005\274\357Z>=\0001f\273\006\267\306<\337\250X<\233\316\226=\214[i\275\t\000\357<Q,\212\275Y\344\273= [\257=c\240X\275\312\264\363:\025X\337\2744\347\344<\264\031\016\275e73\275f\213\210\275\362.@=\272a6<\374g\237\275\311\367`<\247\311\242<\253\022\342\274\327gK=V$i<\244\"\372=\327RI:\2625)<`\354g=\226\220\252\275\341\276!\274\251\037\363\274S\'\023\273\021\227\"\275\370\007\227\275\004\254F<oz\021=u\230A=)\007T9\207\357v=.3\005\275u7\244<-\225\333\274\216+\253<\030\372\236=\000\335\t\271\203\307\203<.\301\305\273\300*\254<t\020]=>2\032<\255\214k=tN\246\275\311J\265;\311\352k=x\350\r=\213j\323\273\005=&=\037\351\346;\263N\236\274\3268\231\274\224\001\303<\266\346I\275\265\375\330\274-\0177<\271\017\217\274~W\224\275\242\232\017\2751\244R=\267K\223=P\036\267<d\257\255\274&A\232=\276\313\274=\n%\335<\301\253\227<{)\307\274\266\035\n=\246f>=\271\027\370\274\310\225(=\372o\316;q\242T\275\034\364\r\275\276C\240<\235\327\215\275\362\327\020=/\273L\275\021\001\026=k\365q\274\236\275\212<\267\315r<\036G\314\271Ke\243=\271\2156=:M\225;MM>\275\002,\010=\266\274\010\274\030\020\327:\350\334$=\253\333\004=\254\017\237\275M\016\355;\346\333\274\274\377\375y<\250\202b=\212O.<\360\244v<SQ\261=\206r\353<\344\225\364<\356\221$=\016\257\315=^\217\211<\344\271C=P\3647\275\344\307\024<2\344\250=\214\334\240\274\307#\225<\204\242\224<s7v=\352\010#=`D\307<(\006\231;\323\251\004\275\337.\333=W\3025\2753b_=g;\306<\307k(< \003\212=\201\"\332\274\2573\2359b\253c\275\321\241\005\275&\351\016\275-\220\373<5\310L\274t\\\"\274o\302v\274\353\256 =\212\216\001\275h(\021\274ax\207;W`\243\275\231\211\017;\277G\223<\020\345s\275\027\374\r=4\242\024<\266\006\017=\026u?\275\241\347\002\275\367\263\264\274\252\201>\275K\205O=$\272\372;\260\254\336\273\242\340N\274%l\251<\tW\247<\262C\027=\350\014#=\036\270\022=\227\334^\275Z\353L\274\215%\241<\225\020\325=\356\245B<\ni\0219\343)\375;p\003\301\2756\273&=8\233T<^\314(=\n3\215\274ax\225\2752\364\013<X^\241<:\034\340\274\013\341,\275\007\257\227;&y/\275\025\364\236\274\363#\322;u|)\275\007[2\275t\232\t=Wx\035\275?\323\301\274\353\225\205\274z\204\326;\030yY=\264\324\354<\035\201\261<\200\323\223=\340\007?\274\344\310\001\274\265\226)=\261L\234\275\230z4<L\234\036\275\004\327\273\272[\373+<\203\315*\275\321\261\300:\277LA=}T\210=\274\344\376\273q\315q=h@\037\274\\\342\335=\362\233\224=\374\231\351<|\354\201<\217-\213\274\275\206\231<-y\211=}\3449\275)\013\312=w%\320=\r\307i;\333E?\275U\250\221=K\217#=H\314\230\2753R:\275@\340\005\273\'2\334<\226\032W=\035/\323\275\266\316\241<\201\231\214\275\227\306\232\2730\023\356\274\314I^\275+\327`\275\322XM\274\226\335.<D\334$\275\317p\264\274]\314\247=\001F\237=\016\234\354\275f\363\337\274\322\020W\273\"T\334<\017\265W\275\024A\275=\257\007\356\274(\265\257\275\262\370I\273M{\337\273z\301\271=\256C\345\275(@\037<\007t\340\274\300C\003\275\330L\277\274\365\333\255:\226\371\247<\2406\254<\252\256\006\275U\234;<\237\370\002=8\017\245\271\267\341\003\274\336\'N=c\2768;7\310\257<5\002z\274l\260\307<\320\372\035=3\030\222<<5\005\274\032\241~\274\033\300\267<M\316\006\275\236,\366<\027i\220\266\315\231\261=\367 \227\275%\317\235\273\356w\307\275\260\241\346\274\245=\347<\341e\214\274\031t\241<\253w\317\274_Q\212<\355\351\221\275\246K5\274f~d\275\375)\332;\034\377\300;\365\223H=yX\033;Y\211j\275\003+\223=\363\204\253\274\372\301=\275\245\371\302\274\003\326\216\275\002^\263\273\364\264\224\275{~\215\274K\033\004\275\006\200}=\r\333:=\362^\020\275\360\206\000=\004\225H=\316@\361<\027\023\017\275\001\037i;l\271\225\275[\374\313\274u\3132\275\215M\024\2753_\"=,\356L\275\016e\335\274\316\222g\274\343&;=]\336\2179\033\253u=\022\nC=\316\321\351\274\336ci\275\367l\034\275\366\345!<o)\023\275\2027\003\275:\301\365<9%\367\274\250\274\214;\314\334\031=t~\032\275]\372?<k\230\310<\246n\033=\275\232\177=\374\306\000\275 /7=\320\n\004\2758O\251;\332\201\346<\323U\354<\3266%<_LE\273VM\033=\2279\272\274\005/\214<\363o\037=\002\025:\274\366>\000<\274\035\240\275\277\336\272\274\004g]=o\323r\275h\354\276\274\376h\210<\243*\335\274\324\331\274<\204\013\201\274L%\000>\035\3256\275\314Z[=s\310q\275\270\215.\275\262d\237\275t\257I=\030\253(\275\344\3056\275I\246\024=\357\277\032=\036\274D=\250j2<\r\202\345\275uop\275\360\312\327\272\355\201\204=\256\335\251\273\247cl;\231(\366\273S\"\357;\216U\213<\221\211\367\274\037\2754\275k\330\334\274\257oK=\312\371\277;f\277$=\375\275R\274\201\030,\275\343f\316=\244\324&<\220x\360\274\240\341O=\310\275*=\2571\325\274\"\312\207\275L1\010<SH\222<\225\205n=\365\374\210<\350\326\303<7\346\001=\006\234\310<\355\021\010=MZ`;k:\003<\217\200\016\275\306\354\202\274\205EQ\274\361\206%=\0320\240<\344+\t\275\274k\225<\361r<<\344\275\366;\233\333\310\274\215f\021\273k<\r=\034\307&< \325D<\324]W=\217\3154<j\300E\275\226E6\274S\373O\274\353\300\'=\270\247\303\274k\007>\274~\262\335\274\361\363\003=O;\022=\237@\003\275\365k\267=Zp\006=g\271\202\274\217\037\226\275\223\350\360<40#\275TC\307;\316\032\237=\036{\263\275\256Sh=\255\260\215<\237\000\202\274\000$`9\"\244\030=\244\377\220\273\322\315\264\275\265I\275\274\344\020\201<\3114\365<_SA<\303\233\"=\334\364@\273\322>h\275x\030#\275:\301\374=\320!\302\274d\307\245\274>%\355\274K\010\333\275\261\357\020=\323\371\213=S\365\027;%\205\024>\022|\215=\021A\242<\210M\014\275\211\262Y<|j&\2741\201\241=\307Y\036\274J/\322\274\214\221\\=\241\267==\223\026~\274\331\227\200\275\030\234\222\275\360\014\350=P\355\031=\236f\003\276\237\t}\273\220\267\200<\023D\333<\361\377:<}o\200\2759D\255;\326J\205\274wT\202\274\025&\360\274\026\372\"=\327\250\035\275\221w\033\275 \025\203\275\027\026\'\274\030E-\275vB\363<\360\020\353;\313\350\224=\325{Q=\221\342U\275N\016*\275\240\331\263;\210\3522=>6\233\275\2537\002=7\234\205=\007\213\230\274\305\004,\274\363G\016=1do=\272G\220\274\331\243)\275\006$\233\275\361\204&\2753\036\246\273\350\212P=L\367,<\300\234\320<\007\303\353;\244P\274\274\000\333\"\273\354\334\271\275z\274\245\275\235H\345\274/\274\002\274P\000\242<\205+\243<\"\235\314\274\031M\374\274\324\331\377;\262&\336<J\314\220\273\tfn\274\310\205N<\221\324\001\275b\340\320=\322\373\262:\373\371\224<\265\205\236<|\372\207\275$c8\275\314\215\265\273\'_a\275`\245\016\275\\\343U\273i\026\276;n\304g\2748\206\234<\361\303>=;\343&\2759\367\214=J\325\245\275\362\302~=V\337\311;p\373\334\274OKr<\247\276\360\274Ut\243\272\227\310?\275\227\n\247\274]\347\377<+\344\206\273\334\242w=k\343\031\275\251\357\305;NL\221=<\263Y=_\014\251=\320&(=A\023.\275\214I\237\274\246\r\255<\035_8\275Oe+\275\005Z\"=\266\020\203:Q\303\367<n\327\031=\"\356G\2755\005|=\010l$\274\213\301\313<\376\272~<(\221\033<\231/\017=-\201\214=PE\027\275\2665\360<\220\214:;\005\271G\275\"^\350;\274\275\207=\001!\271<*\207+\275Du\336=uP\000\275\210\222\276<}\302]=\030<\241\275n\262j\275\326\206S=\223%\330<\244P\032\275\242\374z\275\266\3368\275\024\207\216\275L0\244<}\224s=\253\355\024<\371\312\027:3\3773<\234(\315<wK\256;\373\373}\273x\013I=\224\373\027\273\372\216\222\273\334F\264\275kT\315\274%\t\001\275\252\356\234<\371&]:\322YC<\364\212\377\274\253A\301<\306,Q=\"\334\205<$;\362\274^\256\213\275\305r\275<\275kv<m\372\211\272\326\026\266\274\0052\t=\3606\301<\023m\265<\244\212\247\273\333t\205\274\3638\261=\353f\253<L\257\006\275z\341)\274\276m\024\274\031\006\034\275\233A\t\275\377\322\231=V\315\250\273\016R$=\322bX\275\2144\007\275u*\t\276D\325\210=\324\353\377;o!\177\274@\003\032\275\035\253\200\2757!1\274\272\017[\274\266&P=i\034\370\273.\243\014\274\256*\026\275\312\034Q=[7\323;m\242\315\274\227\205\267=\204{$\275\361\343C\275\007\270\360;\211c\335<\311\253\256<7\023\205;\340\313\266\275\246t\234\274\256\315\207\275K$\210;w\3556\274\r\364t\275z\010F\274\326\321\227<n\356\222\274\362\252\330\274\232\223O\274dda=HN\244<\317V,\275\236\0177\275C\273\262\273\332\372\024\275\n\266\227\272\237:R=)\234\2518\242\322\330\273\024\211\230<\302c\007=1\346\213\274\344\"\342<\021\216[=\256+z=c/s<\324\273\263\275\035\010\236=\020|H=\255\017\326=*\304y=\001\024?=\253\013\256\273CX\035\275^\361c\275\007=\347<\224\034/=\332rG<&81=v[}\275\034a\205=\274\343;=\306\325%\274g\035\200<3t\270;\337j\321\274\263E\273<\305\207\202;\222T\323\274j\\\034\275w\326\217\275\266\361\271<\261\266K\275h\351\256\275_\304X\275F\233\240\275J\025\'\275\254\000\344;\031\345\033\275\374E\206\275\310*r=\025\201\211<8d\226\275]U&=\260\034J\274P\221\005\275R\341\340\2742\206\r\275_\264\223=\224\250\210=\'\244\262\273i\'@=\307WB\27323\221<\330\221\021\275\302\373\373<\021\032h\273\211_\303;\"\304\233=i\221.\275^\367\366=m=\326\275\024\276\010;\351\362g\275\334\025\231\275\346\313^;\343\032\240<\241M\235=\253\306\006=0vE\275\257\265\221<X\244i=<\253\037=(\027\226\275\200\230Z\275s9\022=\'\256\205=RXW\275\325\270\214<\242\010E<\305Y#\275\035v2=\200e\026<\016\336s\275\240\214q=\260\006\201\274W\304\255\275\327tM;CD\313\272\243{\263<\010\000\201<\232j\214<\017St\275\307\3041\275 ;/\275\001\374*=Z\317\305\274\326M)=\364\034\230<S\332q=Z\224\216<$\334\332<\364\315l\274nT1=[\003\233\274\333\251\016\274tYI\275?\365Y\275\330\306\241<KJ\033\274M\377\n\274\351\374P<\232\325\027;3\243\030=\314\227\300\274\3768\227\273\356T\032\274\245\254Q\272\231\345\030\275\226\373\236=?\247\016\275\320\215H=\023#\277<P\357\363\274\202\307s<\363\251B\275\003\325\026=\032\262\201<\202\346\372\273\247\354\361=\"\n!\275\217%\237=g\267\253\275\320I\3509\363\"\254<\252(w;\014\226\"=\020\027\210<N\241i<\226A\211=\356?\317\274\224\256\023=R\342\016=\311zC=\005\317\242;\036\256\264\275jY \275\337|C=v\201;=\312\326\207<)\342\235\273\313:\037\275\253\345\244;\347s\254\274d2\225<\214v\033=\312KP;\270I\216\2741\313V;\236\315\023\274\236Jp=\234\262p\275\3339\212\275c\356\245\275\321\240\031\274\227|\005\274V0\013=\345\177\363\274\016\r\356;\240\241\001\275\036\r\220\275\2516S\274\330h\231=\255\245`;\333\352X=5[D\274\017\033\316<\330\246\225<\236*^=\264;\034\274\335\357\364\274\2144\003=\340\245Q=\\\332\273\274\317L%\2726PI\275\337\343\334<\034D\224;\250$\n=eG&=\310\201\376\274\233~\375<\010g\314\274V\300U=d\237@\275l\345x=g\315\266\275\305\226\033=\030\332*=V\016\222=\217k\016=B(\206\274\374\021\277<R\0240\275y\265\272=HU\231\275o\315\007\275\230\002\376;d\317\002=\316\201\'<b\356\306<\320\010-=\215p\206<\312\246\376\274\250\t\200=v\006e=S`t\273\013\266\312\274\240u\210\275f\021N=\230\031\r\275=Y\217=\031\347\363=\253\376\363\274\r\244\347\275$\347\241\275\235\034,<\212\270\'\273\213\032\200<\244\014\025\274#\255\214\274\004\177\304\274\204g\224\274\350\204\325<0\344\205\274i[\247;\017CG\275\262\271A\275\214\236\031=\322\214S\275\214<E\275\330\017\257\273F\361G\274\271\010.=Q\nb\274\245u\016\275\374b\351<\302\335\230\274\234\300\353<\240\217\236;J\253F\275\254\n\231\274B.\232=x\366\312\275\350bM\275\324\256*\273\311\347@\275}m\001\274\323[\000<\325\365\325=zB\247=\277\240\200<\201\366_=\357\202\226\275\244\211\211<\337\263\263\274\027R?\275Y}\207=\266N\005=\221\013\342\2731A\277<\340\304\026\274p\340\036=\334\2118=\357jq\275\004\023\237=\027\206\235\275\305E\307\274\207\033\207\274\204h\022\275\247z\274<\310Q =gW\326;\364\372\315\274\201\025\353\270:L\215\275\342Z\203\275\022-f=\321\345H;&q\356\274\320r\212<\266\r\340\2754\030><M`\302<\253\231\t\274\316\274\316;{J.=\266\325@=_1R=\027\275\201;\027L\035<\021\177\302<p\204\002\274v]\325<\002\026\007\275;\354\264\275\032Bq=\233d\233\275s2\311\275Y\261\322\275\231\001\005\274\252\245@=\037Y\206<Y\024\272\275\320\t\242\274\030\376)=E;\233\275y8\027=\031\277\315\271#=\016<No\214\275\211\352\365<Qa\214\275\312\306\255\274\272\357\035\274*\252\351<\\j\217\2754\235\214=\372\272;\275 \264\\\275\342\227\016=i\263\002\275\374\342i=\330\\1\275\006\374M=\365\357+\275\020Y\246<\310\275\262\275\350\375\353\274\247\027\027\275\373\177D<\350Z\252<\373\322`\274\226\333\323\2736\256\007\275\300?\227<\010]9=\352!\305<>\230\005<\374Ar<\307I\250\272U=\264=\033\333\273\275\372\246\220<\213\277\344\274\010\273\353<-Y\327\2730n\204\275\007\256\016=\034+\005<\320\331\r\275oG\323<\037Os\275\240\205\373\272\036\035\022\275/\356\326\274W\357K=b61<G\214\364<\371U\214=E\037\302<\342\347\336\274\236\346y;[m\227\275U\2550<r\322\267<?\223\256=\204\373\236<\001\027\357=k\311\007=\363\\\274<,-\306\273\266\3044=\315\240\211<\2760n=\227\231F=\202\355\226<\3051\025<\204\233\254<R\301\271;d\264A=\235\214\013>sR\204\274\362\276q\273v\232\322\275\266\356w;\200\357P=\247\035\302<\334\334\354\273\353\300\260\274Re\000\275D\007N<\372\2369\274W\003\336\274\333\276\t\275\035\344Y<\250\245\214;RC\221<\004\262\256\275\033\334 \273\327\243\014=\215\340\014=\314\324\230\275v\224\277\274\326`w<\355/\037\275\327\201\002\275u\256\204\275\334,e\273EP\247\272Nl\270<;\024\375\273\326I\004\273\014\257\376<\263\341?;\240\276\372<\244\372S\275\021z$\274\017Cs\274\362F]:\356^\025=\204\244\353\273\tt==d\243\263\274\010E\224\273\240\341\266\275\027V\333\273-R\223\273\234\007\000=I[:=\373x\210\275\265\001\210<5\325\305\274\210\365\032=\304=\326\273\274(G=_\276\037=Xnw\273\310.\217;\363\306\032=\321\252w=5qT<n`\321\274\177S=\275,\362\242\275\"(\210\274\242!I\274\243\021@\274f\3239;J\346[;3\341\312<6\014_=\251\014\347<%\2251<\036\335\314<t\3355=\344\3609<za8<\224\2061\275\025\332\325\274\222/\017\275\016L\226\274\352\351\231=X\215\2529\324\263\"\274\246\334&=\316\006\360\274\026\017\201<\277\324\250<\332Oi<\002|\241\275\n7\360\274\261\251\251=\3600\237=\016.\202\273Y\320\013<\234\231k\274d\221X:l\240\202=\023\265\240=R\000.\2741l\203\275K}]\275\347\"\n\275\3542\313=.\'\366\274\270\223\300;\210p\025\275\214n\216\275\217M\220<\033\235\225=h1\350<v\336\"=\235\353\220\275\370AZ<\033\345\346\274\254\232i\275>\236\323<\317\222\232<#X\252=\030\252}\275Tb\307<-\251w=\274\213Q<\314\254;\275\177\361\237=\206\003\350\274\275\313\363=>\n\303<yUV=a\267\026\275\304\002\006\275>\215\026<\t\244\311<\241\236\003\275C\262V\273m\241\007\275\375C&\275]\332\246<\022Kj=&(\213\275\200\242\020\273\324\000\250\274<L\201=\271U\352<\002,\003;\203\261e\275\370\271\330<<p\214;;O\316<aj(\275O\274\363=\367\177\255\273\361J\365\274\306\331\265<\253$\036\275^\353\243<iM\230\275;Tm=+W\030=\354iu=\253\335\321;\261\353\245\274\205\322\334;\341\347Y\275\226}#;\323\250{\273\344\006\251=E\324\006\274\367\366\004\275\037\354\351\274\030\236c=f\207\226\275\333\333\324\275\276p\257\275f\201\236<\037B\224\275\234[\231\274s\277U\2737\361\"=\030,z;\236\361\205=\302t\003;\"\345\376<\235\306\232=\347\013(=X\335\244\275\331\234\'\275\206\261\017\276\030\303C;\nL}=\353\020E\274\270\345\r\275T_\274\274\303\001\347\274\037\366\273\275\033\243u\275\303_\205<\005\177k\275\222\001K=M\022\367;[\274\365<A\352\350<\376|\330\274}\203)\274\211m\207=\3366\205\274\304\200\222<%k\301<\247\272\223\275i\370%<\035\026\014\271\243\031\301=\321\234\217\274\316\034L<\'\3409\274\035\250#\275\034\253\232;\240\262\215\2734\303\304=D\307&=\247\n\027=\246\242P\273\255P\376\272qK9=\244\314\035;Gf\277\273\260\353\022\275n\1770\275I9\022\2743{\235;\240\263)=\203\340J\2742\337j\275h\315\t\275\321T\023<2[\377\273\n\246\'\275\252\030\270\274\rN\333\274D\306?\274YL\370<y\241F=\010zu=8\261\326\273\276\234\n<\2465k\275D\276\221\275J\025\245\2751\225\004=I\3132\275`\312\270<iQR\274\255\321\005=\266:\264\274x\000\256=\206\374\200\273\"\325\243<a`q\275\376p\251\274 \216\264;1\002N<z8@\275\213\033J\275r\370:\273/\302c\273\277\002\032=\350Li<fn\006=;\301\215<\243-\231\275\006\274\206\274\342Q\212<2\223\"<1\370\022<\245\364\241\273^\"H\275r\352\r\275\'\277L=\267%\240\274\361\0255\275\334}\257\275\372(>\272\030M\001<\005\332\314\273\262^?=\266\016\371<\352\244\304\274\354\027F\272W\030]=\335s*=c#\212\275\273!&=\001\273G\275z\222\034=s\273\313<.D\326\275U\232\223=\t\376\003=n\312\021\272Z\037\204\275:\251\347\274\010\245M\273^\360\301:8R\252\274\010\016+=MN\360\274e[\013\275\272\030\264\275m\276\333\272\256\216\321\270\017\r\212\273\364\003\340\271&\335\221\274%)\313=~\237\253\275#B\025\275g\314\230=\n\003:\274\205d\027=\327\247\243<\347\206\261<S4I\275\237\226w\274}\364\001\275, \231<\265[ \275[\342\273\274\345\\\025=~\177\242\274<e\334\274F\204\322\275\343\360\230<A\025\351<\326\241\207\275\304\365\244\275w\205\002\275\277\300\316\274~\034.\275\016\303\023\274\375\3528\275\211\260>=\031\270);\373\216H<\344wN\275x6\t<\305\253\351<]\207\326\273\322\352/\275\375\200t\275\036Y8\275\3501\272<|\034\0379\3223N\275WyK\2753\002\n=\024=\342\274\276\311d\275iA\277\274\261\304F\274\233\354\033=\311\027\327\273\277\213\217=\236\021u=\215\272*=~7<\275\213\343\201;\224>\035\274a\313\357<2\025Z<[\262\260\275mK\'=\035\\r<\350\204\033\273\344\\\245\274j(Q=\022l\243<o\244\036=&\366-\2742\275\023=\0347\277\2758a\305<\222}\333<\233\356\023\275\320\021<\275$\310C=\033.\313<\0173]\275\256A_\274\014$\270<c\235o=?XN\275\033mg\275\333\220\005\275V\222\310\275\\\327\354\275\032\260\033=\302\370\237=P\221*\2747\310\256<\201\257v<\335~\353\274\":\320<\221\016V\2746M\245\273]\035;\274oz\'<\310\324w\274\377*\036<\247\303\035\275*2e<\231\310\201\274\314\276M=\277.=\272{\003\223\274t\343\010=\325\260a\271\010\006\t<\270\334\023;o8U\275A\242\255=S\037\000\275J\214\277\274\032\355\257<\217\"\225<\362g\034\275l\\\202=\352\274\213\274MM\335\273\376\003\241<\327b\234\275d\001\223\275\220\272\271\274o)\205\275\2201+\273\210\207\306=Gb\306\275\241\006\342<\021U\352\273\361\225<\275\2532\310<\372\345\010=qz\204\274f\234e<~\321\027\275Mt\003\275_\013\264<\327\006\317<<\226\341<\324\006\224=\265}\204\273\357)\002<\203\310@\275\204\367N=\317R\020\276\261\344\030\275^2\260<\234\211\363<s\233N\275\034\271\257\275U\215\222=9\362F\275\257[y\2725\232\320<A\014u\274J]3=\247\203\274=\265;\030<\243\346\226\274\334=(\275\377\210j\275w\034f\275}/\210\275==\347\273\302\225V=\222=\311\274B\223\210\275\214\\\240\274\211\007Z\274,7==\363\3507=^*\331<\"/\354<D\216\3578\205\366\025\275\260\356\035=]\333\362<\303%\370=|B\250\274l\372W=\212\010\300\271F\325%<\037+\250\274Ej8=\315\325\303\274+\304m=\022\221\224<\273U(\2755\356d\275\332\324\206=\316\316~\274F\251P=\252\203\356; \244\200\275\001Oh=\227\350W=b\252w\275X\232@=\271\253b=\336\t\335\274L\253\370\274\347Y5\274:i\353=\222\374\332\271\200\177\205;^\307=\2752\307\231=]55=\245_\226<\254\247I<\327\207\251\272\350Z\356\274\353)-\275T\357\035\275)\374\352\274\030c\035\275\324\323\224\267er}<\203\342\200\275*W\021\275\004n:\274\003\267\377\275\255Q0:\036\250\250<\002\223\342\274\3115k=\r;\035=\277\330\305=^\361\344\275\r\211\247;\013\2026<\342\234Y=\370\266j\275\313)p\274\003\257.\2757\016\323=\033\256b\274\255\321\215\274<\312\243=\010\245\217=\225(\013=\363Z\230\274f\352.<\332v}\274^u\223\274<}\210\274-\361o=\372\321\320<\002\312\200\275\343\013k=\3714\334=\201\321\264<d#+=\0205\276\274\255=\000\275>\347\245\273\n\334\264\272@\213\343\273\014\202\350\274s\235\342=\221V\261;\231w\353;\352\005\'<\222_\233;E\253\021\275\274\354>\275]\362<\275\361\010\341<\314\3332<l\314\204<\370 O:3\306\212=#\205\036=\255(\312;\275\224\030\275\272\334U;\237\271\240<\235$\360<|i\004=n(9\275\272\023\"\274\233\360o=\336r\366\274j\261\203\275\306 K<\025\334\235\273\347\207\032= \226\336\274r\212\001\275\275l\356\274\302\262\003=\264\250\270\274\366X\t\275~\302.\275z\027.\2754H>\273\340\r\214\275\001u#=\004\275\030=\276\236v<j\370F<\270\033\037=\024\032\210;\374FZ=\246H\226=?\227\324<C\245\246\275\026\270\024\275\213\034|;l\353\203=O\364(\275*\254\006=\022\323U\275k\307\n=\312\261,;8\350\177\274\376\342\273=v\236r=\312\0169\274#\233|:\203z\204<\235c\242\274\225\362E\274\014\035e=mN\247\274\256\306\260\274\347\3207\274<\324q\274\236jR\275f\363\005\275\237^\205\274@\024\362\274\333\004\245\274\222?\t=\341\337\206\274e\372\271=\021\005\375<\266\260\212=\330\321q=\004\247^;\360NS=u!\306<\226_\306\274\365C\207=\361\033\366\273\367*\210<\371\217T\275\342y\266\274\2537)<C\226r\274*\357d=\01008\275\320\201\003\276\344\013f;\310Q\272<@f\310\273\327\223\026\275\272\\\220<\035X\317;YV!<\323\335\200\275\251d6=\364#\320\274\305E\240\274w\223\020<\n\276&=\270\036\250=&\273u\275\'\247\233\272m>q\273\316{\247\274k\234#=\031m\207\275}\314\333;\225e~\274Iz\371\274\030w\320\275\310Ez=1Y\351\274\016\232\034=\3011\020=k \r=%\001d\275{p\231=\207\364\272<\222\260\230\274\365\3224\274\222\215j<\226\331=\274\312\221j=^g5\275A\357\031\273\351/T=N\335<=\336\370\'\275\260o}<\337\007J\275\355U\226=\274J\306\274\346\206\376\274\033\n\277=\026\002\t\275\017\212\371\274\203\341\n\275\337\367a\275\373\227F\2753\214(\273\335\317\221<\t\244S<\262v\376\273q\367\251\274\037\025\330\274)J\262\275j\303]<Nd\277\275\302F\243<\355Fr\275\254R\356\274\221\236Q<-\232\032<\324\032\275\274\201\303\216=\004\\\251\275\214\233\202\275\244C\260\274\372c\306\273\nZZ=\362\247\350\274\340h\232\275\244%\345;\217\304#<%\025\017=\022\'\377\274\355\267\227\273\205,\314=\353IF\274L\377y;z\253\260<\273fK\275u\2413=\007]\364<\021\275\017<\345\254\316\275Yn!=\274\356A\275\356&5\275\r\205<\275\335\330\250<0\374\261</\334\266\274\037\270\207\275\256\t\315\273\272y\027\275\376\\ =\023\300\332=4Q@\275\330\336\235<U\344\244=u\335\362<\002\314\273:~\350\274\273jW2=\276\255\202;\re\305\274\265\275Y<\261?\005\275Dl\240\274\377!?\274w\226\247\274dI\233=\311NO\273\252\350!=\372\241\266\274t\253\\\271\210W\013\275r\251\277<\347\r7=X\300\251=\231\251\275\275o\221w=>\326\207= \355\234;|\321P\273\256\212\232\275p\251\213=O\205\267\274Nd\031\275}\311y\275d5k\274\304\231M\273\005Y\352<\211X\324<\303h\t\275`<j\275$\3159\275\004\t\270\2751k\251<\2133!=\330\352\231\274\322\313\225\274\310\341\212\274\003;X<{Io\275\373\223l=+\003J\274|\020\n=\302\343 <\341C\275;\222x$;\007Y\266\275\037\341\013\274\274u\251<1\336\217\275oPL=\375\321\223=\242\240\242<\276\257\251\274M\t\216:>K\275=\331\250\277\274\350\325\017\275\221\275z\275T\372L=_\035\356</\314j=\317\260\006\275\342\327\213\274\366\034\036=\360Qi\275\266\216\360<\217\026i\274\035\324\236\275\342\332\245\274R\245\361\274z\210\'=\3610q\274\3511\037:<C\355<\316\n#\275_Z\016=\375\014\365<\220F\253\274\270\275&\275\223;\t= \031x\275N\035\305<[x_\272U\003\006=X\265d\274 n\245<RI\235<\377\\\256\275\252%]\275\t\360<={{\020\275\006\332\212\275\325\211\225=\265\261\271\275\314k\273<\r\347\201<d\372\021\274\2353S=\352-Z<\023\007\003=\237_\270;\021g\312:\017\361\300\274\220\244\211=\344B\247\274\265V0=e>-=\240\360\033=\263\026R=\240\t\274\273\343\322\246=3\340\245<}Ds\274\3628\001\273\323\251\206\274\237wm\275\026\311U\275 \036\346<\r\351W\273O\3070:\376\205\215=^\326\315;g\323\020=\nT\277<\221xK\275\235\205\274<V\277\031=\266y=\275\225c\300\273\230\333\313;_@\004\274\276\020\t\275\006\304\251\274\016\032\265\2731\250\311=\000@*\274\026\330m=\201\006\\\274\303\250B<I0\312\275<v\035=?\3733\275\372\311\014\275?\232\234<\302\354\350<\201\333\206=\373\234\202=~T\303\275~;\244;\236\254#\275\035\2211\275\336\262\\\275%\227\244;\211\266\030\275z\016(=\354\026\350<-Vv<\006\024_\275\001\0264\275\301n\205<?\252\361\2730J\375=6\334\365\274A\314\343\274\231\303\004\275\217\377\026<\377RC\2756\243\320:+\272\345\274\274\005\225\275\321\n\356<B\374\365\272\036\003M=\245#w\275\3558[\275\365+U\275\371\017\330<\242\237-\274s\262\223=\313\\\271<\321e\302<\355\310\246\274\373t\200=-\004\335\2748\363\251\274\232\316\327\274=\300\017\273\006n\036<\264\310\341<\360c\242\274Q\346u\275^\305\032\275\022\363=\275\001\244\207<\263\271A=\317\261\013=\034\310\252<E\226\014;WT\324<\373\315t;a>\003\275\035S\344<\275\'\217\274\367\242\013=l,\207=r\374\021\275\245\262/=o\257\021\276:W3<\335A\231\274\002\236\260\275\023\352Z<\365~o\2750O\000\274c\234#\275\315\342\276<3F\206\274Ap[\275=\023\233=8\227>=\334?\230\275\035tX\275\3405\377\274\204\361Y=\270B\214<\230]N\275\321\234,<\347\227\213\274\245\232\016=\237\363I\274\014y\242<\013\021\234\275]\240\275<\360\230\242=\344\304H<n\332\224<\036\326J=>kS\275p\024D:\373\370\024\275\336D\014<yJL\273\001\343\221\275\027\2578\275\003\244w=\'\352n=\036*U<\037!{\274\366:\332<\332\316\262\274\256}/=;\037\'\275\264\307w=\013:\367<\007+:\274g\320\221\274{\301C=Pk\327:\t\333\202;\340\235\202\273\026\335\301\274v\311\037\27533?=r\\\021=D\\\207=a;I\272\275\254\335<*.\273<\240^\267<T\324\257=u\350\245=\313\362J\275W\231#=\304\350\374\274\333\211\205;\032/.<\223\307\";\253\320\310:\356\270 \274\177s\035\274\005\257\316<.?\354\274\337\242\364:\311\201\271<\275?\'\274\336+>\275\177FI\273Bi\207;z\335\323\274\367\375\371:(Zm<\217N\003\275\355\037\";\364\033\355\273a\357\306\274\255\372\224;<\374\272\274\221~\251\274\366Q-\274Ufh\275`Uq\273\334QZ\275R\311\210\275\376%\323\274\251\214%;}\237\014\275\223`Z<\215\336O=\344\314\251\275\214+\223<,E\227;\377\271N\275w\231]\2752\362P=\215\025\'=\335\365\367<D\210P=mx\233;\261M#=\366\301!\275KGG\275\264\226\372\273u}N\275\343\245\240\275M\235\277\274:%\230=\261%\206\275\325K\372<\334\272\260\275TTo\274\271\253=\275\314\232\030\275\036\030\210\274\303\206\214\275\372\177\313\275\025\353\226=\311\013\035=\021\325s\275\024\026\017=\250\017\264;[*\243\274[\030\243\272sL\367\274>\205#=,\372\025={M=\274\267\310\006\274\260S\n\275\205\325\243=\266L3\2758nL\275\324\313\355\273\365o\233\2741\334\217=_\362\376\274\264\225\236=\347\215\362<.\333\235;\336w\220;/\274\220\275+\372]<\336\3018;\274\242\237\274-\200K<\\\021A=|MC\275\'\010\245=\345\346\313\274\253\0001\273\355\376\235=\275ix\275\274\276\360\274\037\347\363<>\276*\275\2754\001\275\223\212\"\2752\352\237;\274\271\216\271E A\275\023\303S\275o\334V<\'\013\201<05\025;\365{\343<-\255\305\267^\3210=\211\212\362<\224$B=\213F\261<\217W\327\275>\032\311;\356{%\275\202@\226=\372z\300;?\243\362\274\375\321V=\'o\262<j\361=\275m\332\223\275\226v\333\274\313\251#=@\311\021=:\370\211\274D\'^\273]\263w\274\027uf=\216\226\216=\342qN=\246\355f=M]\031=\006\345\243\275\212y?\275\031\307\252\275\2117\363<*<\013<o\253\031\275-~\376\275{\321C\275r1\313<\0008f<\315\376\361<c%\005=\266/\224\274.\231O=\303<\025\275?B$=!\323\237\272\264e\224\275\002\237\200\272\264N\n\275\241\307\253<\'n\224\274\211\264\031=\340\t:<\203\243\310\274\"\375\"<\340\2115\275\333\242\n\275\306\034\001=\034\232|\275#\321\266=()\010\275\006GJ=\n\177\212=\276\375f=\303s\343\274\\\3777\275aEd=\212^\005\274\265\267\210\275g\262\230<\215}\247\274$Cj=\000\223\020=\007\225\342<V\200/=\363\214\343\274\'\317\362\273\310\312\356=\025!\006\273\007}\250=\274\310\023\276\205V\254=\301\336\271\274\322\023\000<\263\030\352\273\237\r\351\275\360AI\275\026JX=\177a*<\322f\337\274\260\021\266<\337\302\263\275\020*\226<\270\016P<8\305\370\273%\313\'=\341j&=s\333\004;\303\035\025=)\3403=\322?\251\274\274\'\340<\231\240\215=\231\020\221\274\254q1<\037%,\274\322\027\343;e(W\275\n&|\274\270:@\274\326\232\205\274j\320\350<\336YW\275r^\267\275\247\306\364<E\020\216=\251U\236=\307v\n\275\275\353\307\273\2736 \275\247#l\275\017\024\337:\200\'\374;\331\351\213\275\334@\001=#\240\302<\331%N\275,\357g=M\264\023\275\213\020\'\274\200p\376:\234i\274<x\333\026=\202\222\037\275\372x\212\275<9\213=5\342\n=\300o~=\310\263\251\274\242R\267\274U\245\274\274\024<x;-\260\336=D\312\210<~\234\306<\276\363\'<\243\n`<\022b/=\007Iu\274&I\024\2744\271(<`\265\352:\271\311\251\274\223z\206\274%T\301=\302\252\317<U\002?=\376n\034=d1\232=\364I\245\274\314\316\250=\005\r\370<\326^:\275\327\302\036=\021{\363=\036\233*<\227\234m=\330\217.\274\'\037\232;\001~n=u=\374\274@Sz\274\303+\267<\255\035\237<\353\333\003=/\033\322\274\237I\337\273;\310H\274\025g\310:4E\205<\344v\333\275\217E\325<\240\336\270\274+WT\275+F\356<W&\373<\270\0336<\200\\g\275\314\302\310\275\377\333\026<\003\306!;9Hx\275#X\210\273\341#\000=o\314\353=cpf<6\325\223\274%_\215<\250a3\2741S\002\275\356:\301\275\377\355\022\275>\022\001<A\234Q<\212\340\330\273d@\200\275N-\005=q\025\210=\201\370M\275\213\214\2446\022\367\220<\262\310\200<\306KS\275\315N\301\275\001pT\275TV\207\273 \342L\273\214\0273\275\033\242\312=\244\213\001\274\3070\325<\203\206\234=\267\221\304\275\240\004c=\0175\362\272p\210\243\275\2477\346\274G\034\013=\272\376I<9\375\014\275\031\363W<\2135\367\274\'\372\027;<|\036\275\020\250\231\275\204Q(\275QD\036=<\331\202\275\341;\264\275\222\034<=<\371\361<\332\351[\275\257\357\233\275P\240M<\374;V\274\346\304U\275bS\236= \325\253\2748\'\253<\251l\262=\275\366e\274\021\261\023<\006\316F\274\350\244\025<\035\312\234\275\247r\304<o/\314\274\240\2569=\\\340\200=\360\r\'\275@0}\274\247\232<=X\276==\303g\223\274L\022\222<#\001|=I\232_\275#D\242\271#E\302\275\034\004\207\274\233\202\202\275iaG=\350]5\275\213#1\274\373k\034\274x\211\226\275r\305\344<\235\357\n\275@;\231<\017\t\222\273\334P@\275yx\213\271\n?\245\275\004{#<\'A\200=\023\330\275\274\330\305\310;\003\251\177\275?\317\235\273\344o\233<y\230X\274\'\214X=\272\247\306\274\345\000\215\275.\002\336<\314\302\200\275\271\037W=\233\313\207\274\267k\213=@\034\016=w\3410\275\007\342j=\347\223\271\272\177\304\227<t\201h\274C`\241\275\252yi\275\315\356W\275\223\314\227\274~N\230=\327\342\261\274\217\007\220\274},e=f\260\202\274\316\351\020\273\223\345d\2744\241\315<\251P\207=,\214_\275Sg\340<\343\037\021\274\330\354\357<\2037\237\275c\032@==\351i=\246\373\320\274\256\0034=\032qX=\3452#\274\253\272f<\243L\237<\210\276\035\275j\311z\2733z\017\273\275\334\256=|#_\275\037\005\342\274US1=\336\261\025= \t\300\275\2314\307\273\322F\275\273\343\344\000\275\320\2544\274\354\337\006=\222\037\364<T9\213\274\217\257\313<\273\331\277<\277\004\220<\364iM=f\325\304<\367a\242\274\336\235\371<\324iV=.2|<\265\t\300<\033\377\306\275\312V\324\274zN\203\275\021\020/\2754\216\222\275\031G\021=\367q\r\275\335\247:=\200c\340=|I\245\275\367[\024\275{\344a\2746k\221\275\"!\244<\331\345\276\275\313\374\253<\303\333w\275\2323R;\300\214z\275\233\207Q\275\201\017e\275D:o\275\307\3411\275\226\005\n<Dj\255\272h\242\206\275\320m<;d+k\274\315\331\236<\354\232\r=\273\254\302\274\035R-<\377H~=\366sw=\345U+=\013*\021\275\314\001+\275\336A\017\274\375\202\203\275J|2<\300!\223\275sZ\251=\035\210S=\007\241\315\274\024)\003<\245\370,\274\350\212e\275\332\271B=\222h\307\274\200\\n\274x\373O\275\327\003\256<^\032\213;ilC\275Q\034\001=\302\037_\275!=A= `&\275i\217\004=Z$\010\2755\036\330\274i\353\000\275P\332C\274\253C\300\275\371\231h\272\232\323\365\274\327r\t\275\304\216\014=o\376d=\247\277\277\274\342\277z\275\211\237M\275\014`\211<\366tp=\260\017n=\263\221U\274\'\000\250=\017\220\213=\224\222\017=.\357\310\274\234Hz=L\310\340\274\227\220\033=A\035\377<\334\305\256=\236\314k=\\\242\n\275\356\306\'\2742\351\032=\022\005\003<?\331\245\275\265\223G\275\271n@=h\372><\300\007\030=`\210\223<\230<\253\275\213O\337<q\326\357<\323\031\210<\375Hh=~\375\213=\007i\232<\300\256\247<L\033\260\274\020\320J\274r\241\027<\200\257\014=\020\215\244<?{\036\2740\352\237=\210_m=\357\323\n=\215\032\206<-\245\337=\214\357\242\273\221(A\275\031a\367<\\\r\007\274\306\262\204=\305\252\230=*\364\262\2741\362\372<\224\234h=\034\254\224\275v&\216\273\004\354\021;:\347\302\273^?\033\273\ra\315\275\037h!\275?\027-=\002\036\237\273\256\2203\275uR\223\273\254\274\233;&\267\252;D\265)\275\001\273\266;\274\223\002=\320\373]\274\337\237\022=D1\317\274DL\331\274\257\373\002\275\261_H=\3518\211=1\272\233\274\314\214\235\275\333O_=!\341\230;=\302\001\275x\311:=\263\377\275=\3165\307;\024\255\216=7\245\214\273\001}\322<\377^\202=3:2=\346#\271\275\311\317\030=\335w\020=\032\341%=8\010\\\275\306M\261\274\227\366\025\275\'\325\010\274<H\022\275\305=\004<]}\367:\222mG\275\275\235\345<\034Vu<\211\226\267<\277\3343\273L\360k\275\337\006\t\274\207\363\271\274trT<\362:\023\275\362\336R\273C\310?:\265`@\275\014O\355\274\016\035\206<;G\213<\315\032V=\341X\264=\324%\277;\215\304j<\005\227\207;\256C\257=\332\350\321\273\002\224\016>\372\242\340\274\222\322\275\274I\251x<\274\204\273\2751V*=\344p\t\275P\221/<.\360\220\275\254`&\275\311\347\261=\031\226\022\275{k\\\275\222V\225;\034:k\275S\372\241=\354\277\244\273\266\214-\274>\273\215\275A`\321<\3245\013=l%\017=\006zm;YL\013\275\302\333X\275\r\006\300<j\324\236<.\376Z=\006D+\275\033ya\274P\360\214=\031\024\036\275\301\220\3739\004\356Q\275h<l\274\032\200I\274\231\343\207=\375\344\370\274\214\355\265\274Mf(=)\233\000<\372{<\275\211\311\317\274\314\340p\274\2535\030\275\227\203\354;\210\'\356\275\210\370Q=\267j\261;+*\327<\214\360D\275\004~\375;\332)\360\274\236\005\227<\353\353\321<\033&\353<\330\207:<\375\374\320\274\364\264b\275`o\357\273\245\310\n\273\372W\275<\250p\036\275c\r-=\302\0016\274%LJ=\"\3526\275c//<\211C\374:\316\242\272\274\206Vb<\270\363\\\275\246\350\344<tp\304:\272\224\203=6\224l\275c\232\234<\223\316\032=\353\373\003=\264\261\252\274Y:\337<\250\0040=\233\342\311\273\233\260\004=Ad\272=k`\242<\220a\242\275Es9\275}\203\255=P\251Z\274!i\365\274>}\031\274>\"\'\275\'\377\031=\214\373\216\273\371}?=\3546\325=\254V~\274P\236\212</\317\337\274[\336\235\275%\207\332\273\334\242r=\350\331\r=\357\252\246\274\377Vx<\263\022\206\275\216v\220\274\231\003\230\275\257*y=\214\204\237\275\250d\001\275\013\353\000\275p\363\324;Q\227\032=\305g\257\275|\313k=\322\234m\275a\354\"=\032{\274\273]\214@<\202\377:=\032,m<\224/k\274\252\304\244\274\010U\370<\301M\210<\2631\337:\033\226\207\274\253@\007\2759\204\027\2745y\214\275\253\363\021\275n\310\346:\260\361\006\275K\367\036=\345\303\036\275\276dA=\2353s\275>6\317\274\300F\320\274!\007c\274\002\276\031;j\204\014<\366\314\245\274wz>=\254\323\340\274j_\217=\300\263P=Yc\003\275\363\201\265=#\346\006<r\326\373\274\t\215\"<\337\366-\275?\236\216\274:I\350<\344\260\002=\361&2<\307\206\007\275_\037(=\372\356l\275G\r\376<N\005e\275\374\250\231=\377 \373\274\260\352\242\274\203|h\275t\031T=~\262\026\27526\224=\243Y@\275Qa\014=s\270T<\023\3008<\275\017\007\2759\330\002\275-w\026=\307\376\207=\200\360.<\325:\373\274\363S\263\273;\313\000=\177\023\275<\260\240H\275\371cs\274\177E\366;\010\213\"=\1775l<\371\312\207\275\357\351D=\256lC;\301\236h<\327\335\302;\247\370\220<\035&e<\265\247\232=\216\213\324\272I\235\217=\270W\014=\335\230\211\275J\200\261\275\334-\020=\017\372\257\275@\304\233\275\026\222\242\275\021\270\030\275\252-\220\274\252O\t\275\347\202\305<\034\335\007\274\274\3111<cE\332\274\306\365\003\274A5\235<o\326\030\2756P\322;\205\307\205=\024\213\222=\331Y\032\275\371tJ\275\002\3674\275\016\363d<\2636\203\273\363}\022<x\274\303<\202lg\275[\244\243\274\321u\\=_\235\251\275w\235\332\274\244\334U<\360\222\033\274\333V-=\2131\221=&\207L\275\225\252l\274\2311\214<\2627\254<\2419\332\273\261`\205=c\304\036=\037c\332\274-\035\007=\000\\\023\275\251;\316<\010\326\034\275\244\357\025\275\327\320\232=\\\216O=\216\361\236<p0N=\274\036\201\274\031{\013\274I\330\371\274\213\366\035\275i\301\204=\216\3640\274\314\232\211<\203@(\275\351\266\026=L5\250<\304jT\274\206:\275\275\'T\037\275\320\2149\275\246\356\304;*\273]=s\002\321<\007\327\"\275\221\342O\275\n.,\275\301\305\265=\363\030O=eY\267;}(\367\2744\266\332<f\017,;\343|U=D\025I=\271\230b\274MV\312\274\033lR\275\223\331\223<a\032\242=e\370J<\364L\227\274\355\316r=\370\224}<\301\271o=H\227\256<\201o\351\275.\255G=\031\357\232<fP\233\275\032\2334\274\340\376\010\273\335Y\331\274L\330\223<\t\357L\274SL\213<o\303A\274\000\311B\274\\\027\013>\342\355\325\273a\004\302\274\250\r\224\274;\305\032\275\334\300\376\274\337\035\241<\370\265e<\236@\031\275\206\010w;\007&\307<\274Vk=+\2137\274|e\344\275\270\370\203=\3430\016=\313\267];F\345U\274q\002\017=\305[\r\275\025\204\036=\370\312\312\274B\222)<\305\377\n<\351\351\354\273y\335^\274\343.D=\373\322\337<<\317\023\274iZs\275\377\0320=\037\370\263\274\260l\202\275i\206J\274\340\206Y\275D\304{\273\3441A\275l&5\275\013Q^\275\"RC=\332A\341\275\247\027k\275rkb\275\224\327\245;;-\226\275\\\260\267\272kc\256\274\034T\223<\324\375\225<\227\325v=+\322\353\274\315\213\213=\210fs<\314\261[=Of\351\275%IL=7\212\022;\264\022\212=-\304\364\274\210\331!=\366\'&<\346\021\t\275\"E\306;Y\232\232<\215S\251=\241GQ;\205\004\304\274g\326\324\272@\213\221\274n\240\025<D\310\265<K\025\200<1\3648=x(\271<q\352\272=K\004\337:\272\271\260<\321\367X\275(\234\227\275\276)\272\274\200V\370:@\352A\275\367\277f\275\2114D<\003D\277=\204]\010\274\244C\245\274\3778\341\270\375\nu=f}B=OR\035\275(\200\213=\\\000e<`]\000\275F1\240<!\344\003<\272\200J\273i[3\275\344\304\337\275\2462;<N\312\216\275x\265\177\275h\340t\275\323\035=<\213\023\227\274\027\324\313<2HH:\3440\010\275a\223\271\273\322lk\275\220\275\336;\363d\337\274\223/\023\275_\001G=\3513\375\274\242p==\331\033k\275\031f\343\274Xh\005\274\360\223\335\275\223\363\004\274\342<V:\301G\221\275\016h\224\275\366\202U=\001N\256\273t\230\234\275\262>g=B\210?=(\366\230=J{1\275\233\220?<\211\311]\275@\004.\275XZ \275}\314C\275\035\300\213\275\311\202\220<\350Y\316=N\236\032\2759~\255\272\"\252S;\025\225\272\274\271\322#\274\255\266\310<\205g\016=\226\343\302\274z\225&\275\223Jl\275Sp\226=\256\364\216<\r\306\212\273fE\252<\016\224}\275z\374\254\274Q\336\247\2750\005\321=}!B=Z\207\203\273\n\255\327<`\005\211<9\272\370<\0057\341\274\204\342\n=E\016T\275\355Xa\274\014\212\310:%\252]=Y\364\307<\360Sk=\202\347\007\275\207\207b<\252c\245<BG\230\275\226\367\256\275\310}\373=\353Q\242<\233/\303\274\326t?\274\001\2121\273\332\025\215<4\312l<\232\000\356<\346\t\237\2756-\264\272\201\030\360<\202pn\275\201|\244\274\307\315\302\274\370\344]<\345\035\003\272\312bT\275\032O\265\273\347\201H=n/\036=J\230E\2757v\232=\337\353\331\274\332\250v\275\362su=b\267\352;\025p9\274\014\331\324\274Z\351\n\275n\303\256\274Y\010\215<\020\317\220\275\211\256{\272\031\\E\275~kH\274\377\016 \273\340\020\206<\3074v<IO]\275\320\354\246\275e\232t\274O\231\371;\244\275>\2759x\021=(\254\251=}\204\007=\230\3251\275Q\361==\020\347\271;IX\205\273g\214\206=y\331\351<\323\3244\275U\311]=\3562\226\274\037\221\243\275|eQ\274\024\3468\275\200\357\272\274\010hV\275\021\246L\275\027}.<d8\021\274W\037D<\032\330\002\275\247\353r\2740\004\305=l\334\320\274a\271\232\274x\"/<\'\350\325<\331\200\027\275\366\345O<\213>\262\275\216-\331<\337\272\340\273E\t\221<^^\353\274\3234\212\275\350ME;\riO\275\277\0225\275#Xd\274C\313E\2750;\331\274n\356\306\275Z\034\341\275\013\231\233<\347\016\357<\027<\210=\265\331<\275\004\330/=\2122_\275\300a\215\273\006\326\371\274(Y\211\272\267\034\373\274\304-\315=\235]\250\274\347\240\030\275\355\207\320=\361s)\274\377\336\003=\032\241Y\275\266S\266\275\356\337R\275\225\354\273\275\222\307\305\273\324k =\006)\214=Y]\234;7v\323;\255\nk\272K\370\325\274\257\311m=\002\207\374\274\342\372\313\274\026\253\353<(j\037\275\254\252\344<\"\315\331<\316W?\274\227Y^=\307\006\235\273\036\300\212\272\260\264B\273pC\301\275,J\030\275\346\301\027\275~N&\275\244\266\001=ee\203\274\345Vt=[&;=\330\204\r\275\355\214\357\274~\250\205=\227{\031=\333\220\256=\231\314j=g4\003\274hI\254=\274\004\374<\265\315\273<=\370\256\275wQ=\275\212{\024\273?rj=\035\014\240\273\273\217\215\275#\342X\275\360/\250<\t\001\020\275\021\223J\275\323\301k\273\263\237\214\274r\303\347\274\016@\325\274\225|b\272~\274X\275e\2655=p\021\215;[\247I<\232A\007=\276\313*=\032\242v\274\362r\250<\004u\243\273\245\322u<\344G\343<\242\r\212=\200\232\203=\241\333]=k\236\035\275[I\013\275\210@\033=X\204\000<\325\201\206\275L\302\317<q;:\275\263\032\273\273p\360\314<_\357\"\275\034\'\355<\276\242\023\272Dc\333\273j\225O=\212Z\275\274vk-=\340\010\020\275\331|L\275@\260\247\273\327Hl\273\261\027\351;\010\265T<\005\370l=\261\037\026=\360\226\241;k\t\214\275\322\215(\275\"\303\220<\226\324\217\275\016!\241\275\305\343\237=\363\032\002=\031\207\207<\300F\207<\020\261\033\273\350y_\275\215\207`=\2447Z<v\312\357\272`K\314=]\036:\275\035\272!\275\235\t\001\275\310L*=?\325\245\274rS\351\2750\345\227\274\212\316\'\275+D\254=s^\306\274\216\204Y\275\357G*=|h\024=p,j=\367\2652<\262~\340<u\251%\275C\030\027\275\005U-\274\353d\241\274~\026C=zr\236<z_\360\273\370~y\274L\035\375\274\305\274\232<\272\206y=\200\262\240<\346\034z<\020\277\344\275\003Y\214\275\177\251q\275\200\364\005\275\352PV\275_\362\006=\201\205\262=\301\275\263\274n\305\037=;\337,<@\023\265<\207\3566=\245\333\241\274\354\304\364\274\344\355\027\273\267\014\226\2745dq\275]\202\243\274<\247\235=\305o\211=\234\372\205=\374\246\317\274\274\352\342\273\212\221\033=\315\342p\274\361\017:\275\021\346\327\270\355\272\210\275\177\352\233<\330\2631<K\275#;wg\301=\310\240j<\317\324g=\253V+=&\314\036>n\376A=\234\321\206;\364\002%\274\265[\232=\365\373W=\301K~=\335E\253;\214o\303=\032\322A=~$g\275\211\016\343=\364\257\332\273\244T\311=\017 G\275\030\353\237\275T\327\272\274O\361K=\221\237,=Yf%=.\367\341<7 \336\274L\351\277<\223\214\004=T\267,<~\307A=\323\003\305\274\247\232\302\274\353\317\004\275\006\223:\275>\034\233=r\014\364;\305x\'\274\3515\021>\350\253;<g\0209=\302\316\017=om\027=VUw=\035\006\214=\216\347m=.C\300\273\203\317\010\274\200\350&<\\P\373;\254\246\220\275v\360N\275\204\205N:\375\240\305=\220\336\241\274>\301\254\273\346\232\267<f\366y=\001[\327\274{\244\026\274\371\177\232<\275\206\224<\231\250X\275\331\243a=$\013\253\275s\003\201\274\253B\365\275\255N)\274\3014U\274\250\223\"\275\364?;=\001\025\034=-k\r\275[kk\274T)D\275\236\254==\333\347\315<ld%\2723\227\273\274\344\374,\274C\357\255\275F\007x\275\314_\324\274\333k\217\273\204*\323\273Vr\317\273=\230u\274\210`\013\274\335\033\024\275\334G\007;\017\004M<\205R\207=sh\n\275z$\301<h\336/=\335ts=~YC\275\250zf\275\237\333A=\352/\031<\3625d=\242\354}\275\307.w<\224Ps\273 %5\275\010\232\037\274\261\006\017\275<\032\307\274@G$\273\224\346\366\274\247\210w<\352~h\275\007\333\342\274Y\202e<<\202H\275{k\266\274\277^\247<L\243\006\275d\302\326\274\033\324\245<\301\223\355\274\2431\250=\016\334v;D\375\026<\212\340\334\273\\O\r\274q\247H<*@\212;\374Q\217\275C*#<Y\001\004=)\241+\2753o\202=\312\245\324\274\032\264\326<\242\037]\275\034-?<\273y\241\275-\273n<\251\241U<\337\227\027=1j@\273?\237\351:\215W\032\275\377\232\"=\r\234|=\\\003\243=\220\351\206\275\354B\232;1\374\367\275#\302\333<\210l\356\274\327-7=\374\300\377<\322x\242\274o\364\203<qw+=T\3574=u\375R=\315f=;\273nn=\220y2\275\311_d\273V!D\275\310?\222=\007\007I\273^\321\326:\370\253\257\275\314tq\274\352\332-\275s\2718<\3130Q\275\337H\340\274\345.\305\274O\020D;\231\345m\274J\273o\274\371<\216\275T\206\214\275\320-\344\2741\237h\274\2760\346\272\252\313r\272\312\317\224<\245\237\234<r\221\340\273\345<3\275\204\227a\275\035-\034\275gt\270<31j\2759\346\244=\272t\021\274wg{=\361i\243<>b\013>\035\223k=*\t(<:8\031=y\244[\274\021\237\016\274\373\257J\275\013\273<;\265\nR\275\034k\370:\'\304\354;\325\302\034;\027L\222<\337\256\262=\240\354\263\274B\367\017<:\007\031=a\276:\274_lD\275bzi\274\327\270\000<\000sJ\2759Ra\275\023b\242=\332\342\300<\002\007\335<J\014h\275\362i\246\275tt\374\274\334M3\275\364U\352\273\221\336\354<\n\034\316\274\350~E<O\254r<\336\356a\275\247\373\203=n5\351<5\337\260=\307v\200\273d\217\216\274HO|=}8\366\274N\312\311=\204\251L<\003k\270\2750\323\200\272n\347W\275\355%\036\275\241gE;\273\200\242\274\200\037|\27501\323\274@\234\345;\031\316D\274\375#\021\273Gv\033\275\310\276\245<\216\363\020\274\312\006\341\274\014\300&\274\3578\205=1\253-\275X1\032\275\'\246\302\2747\343\004\275\026h]=\224N\235<\000\311\007\275\376\222\r\275%\227\177\274\2251\260\273N*\017\275\236\260\310;s\231\210<9)\021=\362\317\267\274\247\275\275\274\322\021\"\274\367\310\000\275\242\272*\275\314\376w=n\221Q\275P\014\245\274\275Q0<\362u\237\273q\345\260\274L\020\315<\320&\"\275\324!\354\274@\364\321<Z/\217\274\262e\230\275\"\344\242\275uz\243\275\310\3263\275h\022\215=P\245\200\274\236\021^<R\037N=\2570\210=(\355\373;S$\001\273w5\371<\3551\213=ko\255\275MO0\274\344\n\377\273\3472\221\275\221\032n\275\023{\237\272\324\350\312=\241\237G\274\356\234\213;[9\227=\357B\376;\236\256{<t\310\274;\0062R\275\305\276\311\2744:l\273\22066=+\n\201\274\267\204\241\274\34256\274\301\225\244\273Y\331!\275pk\226\275\321^\023=\207a-\272\364ob;\377n\214\275\344\267j=\211k\202\274\033\020\n=\273\320\346;6\255\347=sE\323\273\312\374D=c~\255= {\241\274\032\367\014<\214\245P\275\006dJ=\3122w<\365\201\035\273\3622&;\3044\376\274}\352\010=\202\263c\274\037\033\246\275\206\226\236\274\004$\342\274\355\362L\275S\177`\275\363^G=J\024\277\274t (\275\204\223\354;\254<\331<\265CV;\340\000m\275k\212\306\274\026\377\246\274\253\234\345\274/dl=\334)\177=\365\032\327<\017\004\202\275)Q\205=\350\353\3019\347\236\374\275\256\024\323\271\\\344b<\311\306\020=\0176;\2755\216q=\204ZO\274\207\212!=\225\2109\275\216\234l\275\030\263\253\274\367\317a\275_\364g\275\212\351s\275\324\033$=\330\210m\275\205BG\274\304\320-=\223A\241<\032\t\312\273`\212b\275\312\200\272\275/\302\336\274J5~<\022\200I\275\002(\230\2737\006,=\227\276\317<\370\273!<\2210\262\275\034!\206\274Q\356\341\2746\017\252\273/\tL=\010n\375<>B\n;\3642\026\274\275m\362<\205R\202\273\224!\"\273*\200\216\273\377\211\341\274\322\3152;\177\210N\275\262Ae\273\227\304R=\363\321==\363M\200\275\266j\230\272\277\305\200\274\256\253\343\274h\265\204\274q\207\212\275\241\317n<\020\235d\272\365jf\275\214\356~;\3559y;\2228\333\273\351\357+=\215\3070\275\364\354\335;@91<\205\3756<J\006W<b\206\206=\311rG\2755\225\037\275\226\266\374\274e4\014\275\241\r&\275\236\306\327<\007\003\2449-\220\263<\341\003\251<\007\030\264;`\341\n<\224\323\361\275\177\373\017\275ux\314=\005\267\t\275\304\2747<n\354\370\274\357O\203\274\020\331W\274\314N\321\275:\214/=\322tk=\303+%;\tl\271<\370\1776<\264\321\260<\200\306\204\274\017\032\245\272\231\234Q\275>\036Y<5m\014\274R\336\004=\014\270C=8\371B\275\216\277\332=\25643\274\350W\306<@\232\212<\365)\032<q\032\223\275,(\037=\377\263\022=\271\023\022\275\332\252\345\274k\255\207\274X^\367<A\205\007<X\273\207=C\020\373\274\026\014\205<\n\303\036\275<\224\033\275\320\000\316<\"\343P=\351\360m;f\314:\275\304\321O\273\032\312\230\2744\013\014=Po>=\017\256\027\275\244<_=\020u\212<\335\200U<&\376\271<\001\225\362\274\2755\225\275\375\232|\275\303\245\r=R\336\325<\376\t\212<\210y?\274\270\331_\275\233\265\n=\014\346Y=7\000\265\274\005\277#=\262\r\315\271h\200=\273\374 \351;\307\305\370\274\351\000%\275\202\275S\275\304\267[\272&X\314\274;D\254\274U\224\203<Z\0236:\373\371z=\037\346\201\275\2002_\275\222>*\274Y[\006\275\202\261\217<\346\342\211=\314\207\035=\252\317D=\372\003\271\275\224\375,\275o\374@=\276;\331<\221a\266\273\221\010I<\224\320\277\274\347S\016=\314\263<\275\360sB=Z\322C<c\020I<,+T=Y{\021=8v|<?N\364\2724\246\004<\371\263d\275\353l\206=\210\356\325\274}\025\270;\256\263\205=T\021S\274FH6=\370\264F<^\241s\275Y\217\343\273FM\235<\036mP=\250\016\037\275{Q\025=q\236N\272\031\032\\\274\216L\250\273\347uV\274>~%\274\234[\300\275\024\032\001=\205\321\030=\276\356\\=\0019\324\274\2716\353<#\316\034\274\n\021\317<A\2405\275=a\231=\023\337\344\274\374A\303\274v\334\024\274\363\375\022<&\245\257\274\033\002!=\366\343\311\274/\t\022\275\356p\341=\240\021:\275\341`8\274\316\346\004<\177\222\256\274\220^\323;\001\204\243\275Ah\230=\022\336a:\223\314Q<\276\216\202\274\241\301\036\275\\\360\033\275q\3204\274\323\337\363\274\262\371\214\274?\002\246=2\322\257<\324\336\221\275\245o\37690\312\274\274\0253\245<\367\347\201<\267>\225<HH+=\031~\252<3]\203\274\331h,\275\324G\202\274:s\312\274\216|$\275IMt=\025\200\014;\230\365\354<|\037\352;\334Z+=g\274L\275v\303 \274\031\224\024\275\375\341\247=\352\277\n=\334\301\275<KW\330<Z\335\210\275[\333\231;N\255\232\275\313\306=\274L\314c\275\333\376\204\275w`\031=z\317\014=e[}:\314pY<\307^v\275\224F\261=\367\256U\274|\311e=\326\221\210\275q\300\303=9}\215\274\276\244\341\275\332\316_\273\363H\200=-\247(\275\325\003\030\275v\205x\275m9\234<\364\233\277=\014H\036=yw\244<\254\373\203\275T\340\327=\322\002\000<\323\337\251=\273\246\372\273\300\311\262=\202\006;\275\2724W;~\373\267=G\254\246<= \226\275\0228\254<8\363$\275f\227\'\275b\335\355<|\216\302\274\277\263u=\224\350\312\274\314%\321<\220\001\003>\355\235\303\274\264z\016<\334w\202\275\224\242\216;\032\333\274\274x\217&=\3667\231=F\305N=K\361R=\226\205T=U2\266<\036F&=\240\312\240\274\007\277e\275\203&=<\263\2663\275\343\362&=\'\371\230<\347\034O9\004]O=e\203>=\365\362;\275\222\"\310<\032\032N=\212@H\275J\004\202\274\257\271\242\273\223b\t=S\010\026=\200*N=\306\316;=\216\2702=)\273l=\364i\033\275\205\005\234<b\210\363<\267H{=\365\307\211=\321\244\227\274\332[L\275\252\014u\275\267P\210\275 \234!\275G\364\342\274\035\223M\275\017\305\276\275\312\263\200=\0238\203;\330\002\216<\375\270\333\274\312\376,\272\317\022\214= \016\230=`\300\251=!\221\301\274\251\014\227=\nl\030=\354\270\230<\326\271\306=\270\345\270<\375\275?\275@\376\263\2745\342\007<\207\360\034=d\257\340<\217\254\344<A\371_;\36232\275g\260\210;\023u\r=|\307\223\273\274Vk\274y#\002=~\372\263<\342\315z=\0365\212=Wq?<\235\037\311;+\003^=\255\271U=\274\234\021=\377\222\013=Ra\264<C\177\031\275*\210\204<8v\002=\345\274\177\274\324`\n\275\335_\003\276\263X\203\274\235\354\032<\024I\026=z\207\313\274\313\340\343<\225di;\204xS\274\310\210\272<!\376\264;a\313d=\023\306\027<A\313\362<j\310\001\274\264\343\023\275*\036\334;\301 \232\274c\032\333\275q\320\217=\030\323\300\275\302\324\345;\2725\376;\010^.<\201\270,\275:\177\005\275\353=Z\273\024\010\023=\322\235}=\253\202F=\032\256N=\266_\000\275\034\372\352<\250\343\270\273\211l\000\274\353\302\253\273\'\352+=\336)\223;\300\033\333<\032\2728\274;\000\275=\347\005\356\274\216\243\003=\374},<\250Ov=D&\264\2747\330+<\306g\026\275\345\3656\275\320<I\273\352\'\342;\215\231d\275\300L$\275\247\032\240;j\343\\=p\226\000=\023p\254\272\'i-=q\212\016\275\224=\306\273zbB\275\250\304!=S\231\243\275Fi\372<\306\204J=\223jx=\351\223^\275^\337$\274t\027\317=\347f\032\274\377\347\356<\237\232.=\326v\007=\270\024\226=7=\024\274%f\222\275e<\003=\344\345A\275\352\267\004\274\010\213\n\275\323,)=\324\200\267\2752;3=-\366\346\274\371\351A\274\251\303\022\275\032\335\025=x?L;\005\234\341<\240!\004\275\2165d\275\020b\257<\343\010\031<\202\257\014\275\232\"\223<,\021Q\275(\337\274=\220\017\267\274\030L\321<\247\215\377\273\314\377O<\232\222\256\274\214\353V=L\017E=*\rV=\310o!=\026z\332\274E0\255=VT\035\275x\356Q\275\277\205\001=,\007\026\275\322\023\323;np\276=\205re=\301\000\232=l\211\027\274\253\266G=`T\223<\202\236,\275\231\344\355<\340h\305<\347&\210=\274L\2049LJn=9\3210\275\377\262\031\275T\335I\275gk\210=\245\027^\2747E\267;nU0\273A\364\207\275Wy\302:\335\027\225\275O}\200\275\360\331\206=9\247\036=\212g\\\275W\242+=\376\302M\275&6>=\205T\337\274p\254t\275\177\246E<\026Em=/\023q\273\350\022\224=o\231\264\275\002\022\025\274\241H\215=\242l\366\273\336\247\350\274;\031v</\037\333\273\352\215\251\273\014\343E;q\025\345\274k\274\375<\277\2461<\371\023\260:\005$\027\274\273{6=\330V\363\273\301\266n=c\376-\275\245\237\203=\342\315\232=+)\363<\321\247\032=5\263X\275\327\237L\275\2048==\344\0335=\301\302\250<V\034\330<\336\324\214=\351.P9\2466\260\275\006k%\275H)}\275\037\254\"\275\377:0\275\223\3457\275_\214\207\274\267\027\224\275FY\273<\366\276$;\250\261|=\366=\250\275\334\265\317\274\240\356c=\245A\332=\245\260\001=\334;\n\275\376|\251=\376T\202<\315|\331\275\3410\014=\370\367\324<\004(\321\274\236\215o<\211\010\214\271\257\371\265=\352(\'\275K\364\034\275\273v5=\231\204\177\275\215Z\311<\230m+\275\177a\257\274Uk\212\275\335z?\275p\216\353<\022\322E\272\216\237}<\234jg<\340\376\307\2746t\316=g\251f\273\264\225n=\351\366\217<\032\233\212;(q\271\272\231T!;\231\023)=\010l1\275\334\010n\274\023X\274:S\252\243\273\215\267\263\275\265\324r=\237\211\244<\237<J\275pN\211\274\001\320 \273D7\277\275\242]\371\274}\255>\275\010\240\310\274z\235\276<\311\332_\273rD\002=\347\233\233<\360\343\022\275\376\364\224\274\210\327\211\275 B\321<\340 -\274\003\353I;\253f\021\274\037\332\202=\317\213\275<\236\302\203\274\034{=<\007\372<=\033}\205\275\032\372\333\273B\0203;\036\'\251\274\220v-=k\035>=U\224\340<\245/#=c\231\370;\0358F=\005\010g=3=4<\243U\240\275\343\240U=\346\360\342<\274\351\014=\337#q\274\262\237\004\275\023\205\211\275\016o\247\274\036w2\275\256/\007:\020ee=[\223\327\273\022\261\246\274\231a\351\274\356\365*=\370\205x<A\251X\274\231/\200\275u\262U\275\371fq\274\304\363\300=+\022\017\275;9I=\310\274\307\275\251\214J\275\273\3517<\333\343\n=\307,/\275Oj&\275\233C\210<\005\300\354\274\334et\275}\215\257<R\224\205\275p\354%\275R-S\275^\221N\275\345\227\033\273\233}/\275\353\255\301\273\021\021\250=K\232B<\342\311\000\273\356\327\006=\274\345\037<\301!\334=\'\025X<(\021z=Y\311t=wr-<\306\302==\322\205\304\274u\322\301\275\223c^=\233\227+=\316\006\r\275\034\326\207\275G\304\352<\350n7<\230&\225\275\276\307L\275\027\030O=3\367\336<\207\265\247\273\013\201\016\275V\235\313=\250\222\035\275J\257$<r.\217;\270\264U<\276\3356=\216\226\353<\207\3231=c%\004=\010J\215=8\3448\275l\215\357<\251\312\203=-E\252=\"Q\213\274@\274c=\367\207\214\275H\346D\275\013\032\201=\243\251E;\205P;<\370<\242\275\376\277;\275p\300\316<$\306\214\275i\330\244<RG\233<.\236\313;Zd\031\273\\\316\206<K\201\270;\031?\220\275\200\030t<q\364\300\274\234`d=\363\222z\275\303\027\254\273\231\253\213\274#M\317;\010\026\371\273Cz\010=\365{\241;]-\231\2733dn=yP7=\000k\207<l*\227=3\225:<\310\363\005=\335\244\236<m\301y=<\262\010=hbX=\364\322k=Pf\302=\010\345\277=\236&N=Y\212\310;k\274\235\274\345-\234< \355k<\016\010\215\274\273\2520=\346\ne:xy\253=V\212\250;6\370\331<\205\313n\275\265xl=\006\250\027=\376\363\232=\310\242\307\273z\252\331\272\305[.\274\257\027n=\355?\r\274\202G\200\274\033\241\027\275\303\300\234\274\254\260$=,P\304\274\315\tk=Aw}\275\225C\236\273\"\322&=\2763\337:\237H\217<A@R\274\254\305X=\336\265-=\330?\367<\335F\206=h\274\376\274\010\315\">\036\276r=\\\\4=q&3=1l<<\307\331\203\2755\265\301\274\212;}\275\3639\204\273\224\344|<N\223\326<\203@U\274\356\350\242=\n\306\304\274\375\377\032\275\277\200\230;\312\321(\275\320o`\274p\344a\275}\300&<\302\337\035=\276\272\350<\336\226\035<5\030\326\273(\033\246\275\247\217\025=\207\255\253;\332^*\273\254\262\036\274\236\252\004=\273\250\037=\355\217~\2730\370E=\025\352\204\273u\315\213\273+\341\335=;\213\"=\212\275\241<Uu\321=\376\376\265=\333\274\020\275H\024\315=\241_\230=\031\031`\274\232\217x=\244C\255\275\2134\206<&C\252\275\225g\215\275\203/\035\275\355i6=\321\000\374\274\251k[=sj\323; \237\250<Z*\304\272\205\246w\274\253\013\210=\322\216\300\274`\211\200\274\305\034\031\275A\326\017=\276z6<\240\323\211=\312\005\\<\216vB<m\304\005\275\265\370r\274e\252>\275Y\r\335\274\375xj=\333\226o=\027\315!\275o\031\242\273\t\310\030\275\320\004\2659\033d\264:\247)\256<\022\031\277=\341\210\247\274\342\302G\275v\222\016\275\367\253\302;#\177\177;\247z\014\276>\307\227\274\034\322\3229(\304\023\275\234i\277<\356\260\\={\322\256\267\211\010\307\274\014\344t\275\022~\031\272\311\253\213\274\025\242V\274\033\353\251<os#\275\021\321\340\274\247c\214\274\0255\217<$\201@<TP\243\275VD\374;%\221\203=\300z\331<\332\216\205<\274O\006\275\306\250\273<1\0007;,h\222\275i\302\010\274\362w\307\272\257\266\244=\252\305\032\275\000\302\035=y\314\257\274qls<\354\'\241\275:\226F=)v\020=\221\261F\275\022\221\235\274\377J/\274\244\276*<\253\334\\;\022&\261\272\r\036o<<I\346<\351lW<*\346\234\275\307\376\276\274\022\240\251;\250\334\350:&\255k=\356X\016=8<\345<\216\364B\275\307\376\n\274\356\273\r\275\231\203\316=\256x\354=\367\271G\274\355\215\217<\211I\315\274@\245\236=\275\273R=%\315\025\275\004\272,\275\205/\360\274Q\356N\273\265\234\236<\362/\206=\242\351\276\274\177\204w<2\220i\275\365\267k=\300q\\:j\271\205=a\247~\275\203\311\300<\236j\215<Xr\310:\376\014\303:\315\236\206\272\226\224\025\275uu\372\274\352\321$=\003\017\346\273ex\374;O\001T\274\274\017\032=\365\246\250\275\215.\206=\217\3321=N\375\275\274z\336\244\274+4\031\274Nv\243<\226\207\361\274~\261\201<\256\217`\274\013\312\222\274\010\311\312\275\362V.\275\0214\250\275\035\241\215\274\355\242q=f&{<\027\347\017<[.A\274\316\267\031<`\253R\275\251&\300\2755j=\275\246\352\341:\316\363\252<m\033>=\302V\363\274\322\030\014=w|-=$\355\367<D\333\240;r\317\247=h\345\006\274e\253\231\274\365zz=\n\363\037=\215\340(:\\5M\275[S\234<\333\223\230\275\035R\235=\r\374j=\373({=\227\017^=/\317\365\274\334~\002\275\300\200p\274\243a\267\2751\371\326<\272\355&;\201\3133=\017X\224\275W\237D=\254\253w\275Yz\353\273*/.\275\375Q&=\305\232\351\273\243w\353\274l\\\331<\215h\212\274\203\376\271<\347O\003<\241\265O=\345\214>=X\r\366<Bu5\275\274 \260<\335\027;\274\341\332\206\275\215\230&<\355\370\212=W\303\234;\335:C<\334J\024\275KN<<\270#\277\274\nZ\025=T\225\2379\016\013U<~v\257<`\3764\275<bF\274\371Nt<U]\023\275\231\030}\274\367O\333\273\201\234\332\274`\207=\2757;<=\307\254r=>Y^\274\277\314\200;\366j&=H/_=\322\0068\275:\224\304\274q4\346=\\\200\334=\rR4=\000\340\004=\300\002q;Z\314\326<_\330\325=\235\303\316\27497p\275\342\020\306<\240aN<`\224\t\275\235\323\365\274]\325\031\275B\315-\275\275%p\275@v\333\275\231\037\256\274\351+\301\274\320\244q=\374\351\030\275\201\3618\275\263!\357\274\235s(\275\207\364\307\2730\\\225\275\211R\036<\030\275\242<\212\360A=\332\270[\275\3341\213\275\337\243y=\350\310m\273\273\337\244\275n5+\274=\201\301\274\221\033\001=|,\270\274\254\227\315<,d\036:\303\323\177<@\025\316<TmY9y\337J\275\010\232\212\275\3532\226\274,\273\245\275\251\002>\275\203\271(=\343\033\223<Y\300c\275\325<\211<\0326\202\273d19=.\261x\274\231\315\026\275\006{_\275Z\254\221\274\276\336B\274\003\306A\275x\221\240=\305\270\337\273D\034]<\364V8\275\272\023\272\274\210\301\320\274\241\202\322\273H\200\250=\205\352\\\275:\022\206=\333at\275,\260_<\242\177D=2\263\320<\257.3=wF!\275aM;;\366\017\327\274\355,\326\273k\335j\274\333\265\014\275\263\327\306<\3622\246\274I\2146=\340\330\371\274\027\276|=\321\360\276\275\330\036\260\274`\246\031\275\227\367\254<t\377\007\276\240\026\306<{\375\310<7\265\342\274\020\021\314\274M\336\276<&\356\324\273\216\273\255\275\220Ud\275/\345\313<\204\242\217\274\211\367&\275\321\310\\=\324`\205<\177N\036\2753C9\275]\177\027=r&\024=\326\\\316\274+\207^\275\210)\270\273\301o\225<\365\3256=hCf<}\177\366\273\242\245\315\2755\036\206\274`\327\221\272\264 \203<L\0272\2745\264\233<\223\321\252=\252V-\275s\315\022=(\027_=b\266\321\273\255\017\023\275\031*j<[\307\030\275\305\322\004=\001~\213=:\276\223\273\001Fe<\t\326n\275\243R\216\275h\330\210=F\276\234\273\314j\027\275\3658\034\276\221\016\003\275ZU\307\274\026\377\232\275\030b\371\273i\236[\275\220\207\023\274s\205\001=s\224\213=\337\020\"=~\217\002=Q\304Q\274\374\372\200\275\230p\340\274\220S\255\274\303E\304\2752\016\203\273\222=\307\273?\257\251:\305\024\027<w\223\261=\277:$=\001\343\036\275\274d+\275\326\214\214<\232\261\330\274\334\366\240\275\370\250\264<3\331\023<\263\307<;\271J\310;\213\027\226\275\222h\224<\236\014\254<\\\226t\275\247\032!\2740\372.\275\022]\336\274\274K\275\274\345\203\343<\323T\032\275&\353!<\235\005|\274\344+\"=\200\344\206\275\001\205\270\274]3)=\272\372\217=@n\326;5\265\032=\330\312\214</J\027;\016\301\002=O3\202\274k\311?=\255\364\204\275hq\022\275\254\016\346<\002\005\203=k?\330\273V\371\017=T\3319=\306\036\357<\215W\232\272]\014\357=\213?\224\274Q\003\214\275\325\250\377\272\375\261\246\274}\275\350\274\311\352$\274\250\013\257\275i\221_\275\005\004\031=\347i6=4\305T\275\257U\243\274\246\035\204:\250\003\016<\266\210L\275\253\234\250=Q\2575\275%\026Q\275X)\216\275\031\032@\275A\211\245\270\326}H=\261s\251\273\202]\'=\177q\275<\023\005\303=\240\212\206\275\010\343\337\275\342\037\3009GD\021\274\261\232z\273`5\212<*\316\213=\031\027\212=\366(\362\274}\216\345=\247\325s\274\247\234E=\225\021*=\371\352g\275M/Q=\2230p<\306\032\231<O_\213\2757\213S\275pP7=\r\305]\275\360\231\323\274L\323\210=*\016\202=\003\tr\275\264\340\245\274\276\241n\275[\231\227\274\007\371\347<\250\263H\275\352VI\275E b\275\221\265\244<\372\034\242<c\346\266\274\352\316z=\302n\204=\375^\240<P\340\260<\\\014\014\273\r\344?\275\230\327\357<\241\344\355\274<\337\312\2730|I\275d\313\257<\024\231\350\275\023r\240<\367\035\352<\325 \354\275lH\006\274\0274c9\251\261\231=\335`\035<\362\305|<\310\361\003\274\240\274\315\275\226\302\364\274\203\262\321;$r?\275,\002W<\r\252\233<\261\325)\274\266_\034\275ge4=\3075K\275\r\261v=T\\\303<~1\202\275p\256\023\275\2755:=B\365\016=\r\205\205;2\215\352<\240Q3\2753\223\020=Na-=\360\2503=K\374\223;\340h\273=v\003\214=n_\"=\3352\346<\270\277\033<\224\326!>7W\326\274_\236l\274\3122\250;\340/\367\2740\371:<<\260\025<s\366\240=\361\317\315<\216\325\332<V\336|=y\2144=\312Q\013=\342\245\263;\321\271\233=\325G\242\273\030\033\245=NZ\332<(\010M\275\226(\254\274\016R*\274\300\305\246=C\266b\275\344\307\355\274\365\323\347\274\031\021\360\272\231\377B\275?\263d=]\024\022=-\257\236\274q\344\222\273\255vi\275\031\362\372\274\230\371O\275{^K\273$\212l\274|\360\231\273\030\351\017\275\266)n;k\000\007=\3308G\275\264\355\203\275\263;\304\274\221\340X\275\234,\327\274\236G\250<\027<\201\275\320\255U=\326y%\273\323\352\230\275G\334\345\274l\203\236<5\206c:\300B2\275\222U\247<|\223\305=\305\002\301\273V0\374:\241\250\231<g\244A<UM\224<\272\211\251<%x^<d\273\313;\212\003\364\274q\007\006;\220\213\307\274y\340u<\264Xx<\317\320\014=][-=!\362\223<\337p]=2Z\243=\216^/=\365\262\224\273\017\245\234<+\254\207;\315G2=n\301_\274\372\034\026\275\373\267D\275\246\316f<>9\023\275\214\361\254\274\220\351\225<\345\337\004\275,L+\275%\214\230\275\273D\332\274\213\310\275\274\017%\224\274\313\"\020<\007\006:\275\265\262\265\275\016\376\027\275I\202\262\274\330G\001\275\340\325,\275!\266T=\025\217\312\274\375\2651\275\312\214\217\273\rYm;\360\311\363<\241\211\246\274\303\334\236\275\353s\336<\335\303\354\273\322\310I=\236\312]\274\310g\316\274\201-\214<(\213\016\2753\311w\275\224\345=\275\037\247L\275\032\001\225\275\273\005\t=e8\344\274\n4\337;\226\t\230\2759\024\336;\342\356\361<\256/\276\2744f\377\2742\340\361;\320R\336<\2366\252=EPe<\266+\334=\275L\222=\231\266A=\232S\006<\363\022\271\274W\024f=\032\036\273\272G\0265<w\222\004\275Z\255B\2730\034&=!(\206\273\260\324\204<\213\251\246\274\213\265}\275\"\306\212\275\017\242\342<\376\272\234\275w\345\305<)F.\275x6T\275\nC\345;\t\177\253=0\366@\271\254\362\371:\363\365(\275\343\343>=\311\301\206;a\023\234\274\313\226\230=\274eo\274M\304\317\273\"\034G=*[\274\273P\006\315\274\326A\225\275<\344~=\342\226.\274H|\330<\206u\211<\255[\224=\233\177\254\273\374V\204\275\030\204%=\367:\234\275\257\324\361\2749\377F\273\3321^=\031\033\016:\243kl\275x\301\t\273vt/<\026\357\242\275\215\326\005<\031\225\024=7\364\360<u<p\274\352\372\354\274\206\r\025;D\276\030<\211AS=\376\320\252\273\021\261\002\272\260(\013\273\313m\207\272e\211\214\274\356<\240<\031\244\274\275\211\0353\275\341\364\340\274\\\325\317\274\"\347\207=\312\206\373<oC\261< oK;\010\313\t=\276\003\322<\204\225\244\274\001\312\t=\352\301^=B\206\017\275\256\363\243\274w\331\300\275*e\273=\006\303\203=\350\313\232=\334\333\277<p\254\213=\307\362\221\2741\255\237=O\216\252=F#\356=;Z\217=VI8=\001\177\226\275\212\213L\275\017,1<\027}\336<<\213T=3\234o;J\035\336<\231\301_\2754\317{=\354\301\247\273\364\307\023=\210\261(=\261<\370<GZ\305\274({\'\275-\262o\274NF\252=\\M\021\274\"\004-<\275\"\232\275\327\273\250<\214\010\270=;\214W<m\225@\274\033\252\367\275\003\314b\274\351\001\334\274-?\345<\245\317\334\273sn\215\274oiE\272\257\211r=\234\357\353<`#e=Z\255\226\274\203\034\204\273\364\220\336\274\236ZI\274\215\r\247;\234\276\016<7\310\177\275 Nw=\216\346\":\"N{=h\2156\274pFK=h\214M\274\212\204d\2758\336\203:\027\207_\274\235\251\317\272~F^<o\344T=%\323\033:\242\035\034=\016\243L=\244\t\246\275swS=\244\221[=\332\265\031=*&<\274\330R\000=\233B\352\274O\276\314<\333\266K=\326\301\237\275Bv\204\2738y\201\275\016JH<$=\033\274\342\326\223\273x\306\313<\230\347\227\275\003[\347\274\332\274l\274\354q)=\251&T<\327\334\330\272\033z\224\274\200\322\346\274bQ:\274\343\004\261=\227~\306\273\203\032\271\274\021AK\275\326-\310\275T\\\211\275p\250!\275\341W*\275 \342\344\274\224\376\207\275\037KH;~Z\377\273\352\221(;<!\240=Q\365\032<\366\245\177\2734\370\036\275<f\333=Y\013\313<?\343l=W\300\377<sQ\247\272\344\246\010\275\362\003r\275\342l\007\275w\315\223\274S\231]\275\246\313\267\274\332\225\365\275\344\242`<iD\306\274\361,\266<\323\230\243\275X_\353<@\250\224=\006\231\177\275E\323 \275\017<K\274\232\233.<\352\007\344\274_\231\311=m\264$\275\234\2332<ki\204=\203m?\275\204\222\242=\305\2748=\216!J\275:\3706=\327\333\215\274\260\273\357<\262\304\330\274\344\334\260<A\315]=\300N\037\275\r\365\260\273/\226p=\004\033\007<\351\034\261;[\367\005\275z\262\277=\"\343\343\274CJo\274i\3706<J\241B<\272b\260<\270\223\204\274\272\n\333\272\211\276\215\275\010\252\002=\223\005W=h\202\275\273\337\333`=?\tt<(\227\352=\341\267\342\275\204\031\337\274\342\333!\275\220\215\215=Gr\343;\220WN\275Df\035<\nG\r=\352\256\353\272\324\220\r\2759\321\342\274\225\300\010=\306x\002\276\025\340M\275\267\017\242\275\361\323H=\374B\275=\232Q\222\273\004}&\275s\003\207\274>\025\007=\224\026\344\273-\006\006\275\250n\372;\335\302S=\2444\227\275\205\271\255\275\006\237\350\274$\263\005\274U\213\025=\2434\202\273\314\247\212\274\207\354\375\274\225\251\263<\276\203\255<\237?\211=\026w\226=\325\313\300<}R\302<\213\347e=7\370h\275s\213.<e\205\341\274\211\301\225\275\035:T\275TF\336\275\257\316X=\023_\025\275Vk\352\273\354s\325;UU\013=xd\336\270\245\310\031\275\253<\026=\374\320`=#\353\257<\n\374G\275Q\250\233\272\226n\251=\315\322\334\275\214\347\243=*\307\265=\210\'Z=\3072t<fj\332<\315\377\033\275KJ`<\323\243\270;\306l\220\275\366>\211<\356\3049=\232\315\342<\212D%;\315\024\031>\'\323\274\273\332\373\010=\3312\266:\036\226d\275x\333\223<\372*k<\233\227-\275P3\034=\337\010\247\274\207KT=I;l\2750\217\203\275\326\177N\275^\277\374\273\346\306S<\326F\252\275PC\353\274\201\326\255\274\227\340\n\274\277\370\\\273\245\237\001=m\324?=?\267Q\274U\246\263\272\363\255\242;s\361\245<\271\324\016\274\240\251\006\272\367 \370\274x\021/<\016\035\003\275\251Ys\275W\207$=G\243l<\363\363/\274\005c\312:\223\256\224<\245\321?=m\027\207\275\361C\247<c\361\010\275 \372\201\275\177\010g<F\006\267<\267Ry\275#\022N\274\344\3465=\2361\271\274\360\202\020=#\014l=\202\313\213\274\2453P\274BLS\2744\271\301\274+\366\000\275p\003M\275\332\340K=\220\216\324<\373\300?<)V\334;\272`H\274\365\366\252<u\2049\275.\266\365\274\177 /\274\252\334f\273\253f+\275\332\265]\275\267\353d\274\030\356\322\274\030\252*\275lZ\320;#L\235<\003\224\004\275\013\203\367<\237o\036=\244D\374<X\350m=\235t\240<v;%=\364\314@;\344\235\256\273\020r\033=M\310\341\274\311\341\207=5Y\002=\232#\036\275C\226a<@\2015;:1v\274G0]\275\200\030\250\273\\\341\211;[\004\\=z\252\304\274\3140\206=\200\340\245=\003\032&;\222\177_\275\253\355\250;\234\204\037\2756u\252\275\025\004\025=Tf\226=\361\010D<\356\273l<\363\230\037=h\376%\275aG\207:\246/f\275d\007\t\275\246\026\021\275\ry\352<\020\241%<\307\355\005<\022\316\306<y\246O=5\017U=\347\366+\275_y\276=_3\224\274\247\001m<\311\216\332\274\000\243v\274\024\032+=\246\'\242\274\223\356[<\274E\327<)cK=;7?=\017\331\032=\232\373\222<g\301\215<\307\312\261\275C\360\346<\346\211#<6dP\275\322W,;\n\245.=G\235\030=\320/\304\274p\267\304<\007e\211\272\227\360\023=F\336p\2752\n\177<\203\317\220;_\270\207\275\033\023\221=6\276k=\200\311\235=\014\224\353\273\213\206\353;\026\366<=Ys\366\274\207\305\264\274\305\260R<\021\207k;\220\206J=\334\214\"<\r3\235<\367W\322\274K\005(<\377\261\024=#\211\233=\256\255\262\274*\260\027\275-nS;\261\267C\275Q\261^<\277q\204=\314\311\232\274\366\365\315=\360\260><\036\302!\274\273l\201\275\265\321\312\273o\220`<\225(+=k@x\275pb\343;c\225\326=\316eN=R\"\261;-\211?=\004O\n\273UF\360\27249@\274\334E4=\031\263\335\274\265\256\312\273\365l=\275\033\201\001\274\350f\254\275`\235\017\275+?\216\274\257\270\327\275\205\312\351<M\337L=\214!M=!\331;=\265\242#\275\006\370\301;P\374\211=\247\231U=\226\013x=Q\201\321\274\002\261]=!\235{=\325\256d=R\237\005\275\267\267\273<g{&=\2571\216;nJ\177\275\214N\023=%\315#<e\037\211\275\311\203&\275\266\362\344<\\\311\031=\240\264\251<\000\272\312\274\234\246a=\254\365\244\275\215\340<;\335\030\267=\323\212\000;Zh!\274xT\024\275\333\316\214\275b\312%\275\333%J\274a0\022=D\342\016=\024Jk=r\010\222\273\251\247g\274S\n\347<\243\347\025=\361<T=\333HR<\034\"\252<\307\253\202=\202\314-<\205\244U=\r\226\020\276\350\272\236\274~`\200<\230\027\207\275\300\361\220\274\345u\303\273\220W2=\342X\"=r\355\016<\325GG\275\305\235\374<\272\211\"=\303\351\023<\300\032\356<\013\364\330<]}\324\274\323\024\265\273\203\002C\274p\342Q;\251Ma<\251\232\376<}\312\336:\031\312\361\274\246\3178\275\337\337\006=\325\302\323\274J\364\222\2751\307\235<\346\330\001\274\305\303&\274\001b\311\274:\262\236\275\001\214m<\310\266\017=\001\034\220<K\342\222\274BQ\027=\201\207\243\274\204\275\326;h\343\004\275b\320\215\275\r\221>\274(\"+<\234w\255<\024\237\361\274\261\0256\274\024\332\017=\341\370\272<\226\361\"=\361I\227\273*~\232\275`P0\273\372;\236<\276\003\023\275\333\300X;\243&\014\275\214\335\336\274\020\361\032=\226\032\200=8\260\333\274\332%g\274\3502\021\274\035s)<\346\250\273\274;\276\373\273\340w\014\275m\242\252<7/\226=+R\220\274\222\332\r\275\023\257\233\274]q(\2749W0=cG\023\275\357\002\246<\242\202\r=k\331\205<\221\305?<r,/\275\335z\211=\221l\336=\260\256\351<\')\254\275\371\003\350;\303\240\223\275W\025\257\274\340Dp;\034:C\274\330\353\003<\214\024\232\275\032\031A\275f\330?\275\221\034?<5\344\202<\024\324\236\275}\261U<\036\227\323\274\377Ti<\216&\031\2749\203\320\275\223%\321\275\352\375\232\275\345c1\274j\372)\275K?\211\275\222\314\004\276\227\225\331\274\037\370U<\3169\202=\373R\203\275\013\222)\273\215M\303\274\001\355\245\274?\216==\267\004\r\274\323\024\326=e\206=\275\253\271:=\213jN<\321\270\231;\236\231@=\211TW:7-O\2752\252\302;l\225u\274\327Jn=\224\233\221=2\353D<\353\005\004=\324\020#8*e\270\2750%\317<\333\013^\275\'\347*\275\036|\223<\304 \003\274|\301`=B\370\345=FI?=\205\223\221\274\026)\306\274\264P\243<\252\333D<E\331\216\275b\035\311<0\203\262\2742`\031\274\027\203Q=\253\351%\275\323\'\006\275.\212\277<^\037\271\274\2163\036\275Y\220\340\274E}\037\275\325\335\260\274.x@\275}YR;\t\315\r=&M3\275J:\006=\224\237\312;\234\003Z\275\210N\212=\372,\210:\300\026\014\275\273O.<\334t\255\273I3G\274\034\227p\275s\363\200=V\023\251\274/\014\001=jg\307=D!\213\275\337\301\262\274\037E\250<\203\023\205\275c;d\275!\304^;\2143\224=\002p\204<2\322\215<?mS=%Z\244\273n?\001\276VA/\275\362\312\357\274\236\247M<\274-6\275b| <\315\013\177\274tX\335\274\020[\320<\212\207n=@\233\363\274\001.\211<\377+\270\275\374\032\233=}y,=\330\202\225<\345\240X<Q\226e\275\215,$\273\335\253\254;h\306)\274O><\275\007n\247<\201\250\036\274q\237S<\327\037\221=\017\355F=\013\300H=\023Z\241\275-Q\370\274\204|\203\275\234\224\025=\177\343\t<!\334\300=\364\333\361\274t\311\216;F\300A;\177bM\274O5[\274\t\234\246\274\021\266J;\266\220\235=\222\315\245\275\336\371\013\2754\004\024=\002\221P\275\347U\207<\rY)=e\023\232\275\323\347\2609\276\010\007=6d&=}\207\226<d0\265<\276~T<\035d\244\274]\302\227=\261\t\224:\320\214(\275V\007I\275\037\231\227=g\277\035\273C\376\340\274+\034\315<\207:\211<\"\2673\275\357{\247\274GP\336<\305\034\261\275C\037r\275\\+\221\274\235\013\263\274n]f\274[o\177=\324\356\317;\034\266&\275\363\371\362\275#?\004=]\371\013<\266\305\007\275\003\347\225\275S,);\003S\333<F&\215=\254\245N=\315\0045=b\377b\275\326V\237<\255\200\253\274S\264\241\275\016~\237<*\266\016\274\244Y\343\275\013\310H\275\350\n\245<\251p\361\274\354\325\206\274\346s\206=\376\255\351\273\2607\205\273T%}<\275(\030;\266\300\246;S\216\237\275^#\231<\335\376m\275\336\224\212\274}\257?<u\272\027\274\351J\322\274\020\264\234<\364a\255\273\255\026v=\214\334F=\"H7\275KD@=\367\362j\274\333\250\246\275;)\276;}\322+\275\357y\367<\306\302\010\274\210O\334<\275\266\325\274\206\3735\275w\200\351\274\356\271\245<#\364f;\275\330\262\275l\250\264\274\216\212\226<\250\\7\275L\363\217\275\376 3=\033\202^\274\244\336_<4*\273<\007\205\036<\202\226\024=\361\351\325=j\245\005\274l\177M<\331c\227<\354\315\236\273\214\027>\275_\352\317\274f\241$\275\314\203\250\273Oz\244\274\0359\262<F:J\274\362\014\252\275\275_\320\274\236\336\232<\232WY<\246J\321\275\306\376\t=Yz\236\275b\t\201=\261\207\266;\335;\223=\305\027\037=SPy;\341Y\315\273\364\307/\2756iP=\r\370\243\274\353+E\274\270\2050\275b\240\205\266\003\3000\273\304\360\035\275\021x\331=)1\203=\302\305\266<*\312\272\273s\212\255<\274~\177<\251\327\"\275\366\312\334<^\020\270<\307\202\304;\344e\216\274\213\251\006\275\332\246\223:SV\360\274\314~\243\274]\246\036=\0174\230\274\205\237\021\274P\354$=\314\222\306\274\177\222\271\273l\221\030\275\303#\274\274l\t>=%zl\274,\021\274<\022+P\274L%z\275\311\036\273\275r\227-=]\345\311=/\337\343<5\255\260\275\2426T\275\003W\331\274\272`\246\275\354\236b<\344\274P<.\021\310\273\332wB\275\356\346\032<p\227\336<rT\000\275\336\343\343\274\021\304\r=\243\230=\275\344\210W\275-\252\213<\275\272\010=\t\217\330\275\311\034\200<\376\212\227\2756\336\212=\233\271^=\243l9\275\212\250\367\275\007\r\202\274n\2475;\246\316\002<\346\271\365<DZ\216\275U4\312\274\376A \275\234\217\022\2751\201\330\274\207\200\350\272*x\037=({\356\273Y\341\r=\321\'\243=\210\260}\274\317\240i<#\306\260\275K\016W=\226j\035\273\267\033P\274R?0=\252<\310<\275\207\277<\222\300\244\275\325i9;\033\220\222\275I\327\037\275};\331\275\266h\017\275O\240\246<\025\2058\274)wC=\261\246L=^\214\260<\237U\007<\001W+=\312\271\233=?\n\031\275H\032K\275Y?G\275i{\242<z\344\031<\342\255;\274\007@\235\275\312>\022\275i\363\002\275u\327{:\334\037\216\273\265r\341\274\377\262j=\376P\300\274q\037\220<:.j<e\2630=\304\320\004\274sQH\274\235{\232<}\271\374\272\217\0131=5nN\274\205\264\231=4\246u\275Z\234\270\274A\327\315\274\013\243\212=o\325\025=\233}\024=\317S\211<zA\337<\350\000\233=\001?\243<\035\350\201=\026\211\244\275\3368\224=i\367\273\274\253$B=\331\302o\275\246\'H\275\0276\370<\217\377\201\274~h\t\275_q\272\275\354\254\000< \000L<\337\213\253=\223,;\275\017\257\364\275\257\017\255\275g=p\2750\306\200\274\213\366\022\2751\253\222;\225\351\332\272\326%\026=|h\020\275\377jB\275<\232<\275\252\366\364\274d\310\302</\321\314;\221\226\203<\0200V\275\246\301K=u\252\245\274\3456\022=\254\334\265\273\253)U=u\354 =\333= \275\311\226\247\274\001*\257\275\007\367\346<\223t\024\275k1\014\275\237\347\200\273\355\207\217\274NwT\274\256\255\273\275\226w\037;\370H\221\275\265\027^= \250\017\272\206c\326\274\325\207\376<Y\300M=\350\025f8\036Z\352\273\035<\275<z\235\270\274%D\205=\006\277\352;\177\243m<\026\376\n<\225\357\337;Tx\304\274\257\246A\274\301\257\016=k\035\204\275\007\020X<R\372\310\273\351\342L\275\237\\Y\274\232c\220\275\267\234A=\350\234X\275B\240\224\2742!\357\2732/\r=\235 \232\275\376\335\220\274T\272\272\273\0208\024\275\323\032\"=\337J\246;E\216\231\275\262\375\222\2738\357\213=\0271M=\235U\261;I\n;\275\273\200\272\275\364\236\204\275\356\002\025\274\255\2222<e\241 <\nG\363\274\215C\221\275\371\\\033=\260L\315;\245\253\317\274\207\262T\275\251\262\311\275i\013\002<\030\223\001=\225,\022\2754+\367\274b\002\275;\333\337\267\274P\243\344;\337\356;\275\245\202\366<\254\262/=\262\362\n\275\027\254\004=a\303$= \340\363\274\005\363\252=[@\005=:p*\275\2253\016=kc\266\274y\304/\275\177-\306\274\375\250<\274\330S\253\274\340\357S\275d\374\235\274\370\371\313\274\225\313\004=\370|C=G\376b\274\025\254\000\276\256\255\340<\237\201\210\274\030b\372\2745\245\223<(\241\036\275P<\344\274\210\216l=\013\201\244=\226\371\241;\016\221V=\336\257\324<|vc=\270s \275\263\221\205\274\336\377z\274\342i\013<YS\322\274e\3161<o^\253\275C\251q<\t\027o\274\274\352d:\002\017\252\274\313\276]=\277\317\350\274\215\334>;\033\233\245\2745\345\313\275d\026\276=)\367\301=\355\234\370;\033\366\266\274\177#\222\275\215\265=\275\203\037c<,C\210<\217\370H9\002\nA<\271\363\213<\260\231\';\316Y\271<c\272\223\274n\243\027\271\207\301M9\267\010\007\275\330\344&=\2355\247\275\356AY\273\351\371\013\275\rM\220<\003\020Z\275\330I\253\274~\0102=\237{|=\245*\201=;\033$\275\312\005^\275c\367$<\004NJ;\244\276\t<b\374a\275.r\024\275Aq\325<h\266\331\272\324\264\007<\364ZD\275>e\205\275\354L\332<\335\265\356\274u\263\204\275E\350\310=\352\3776=\222d\r=\324\030\212=E\265q=m!3:\247\333%=\365\366\236=(=\276\275\t\324>\275\221\000\334;Y\177\224\271\030s\266\274MZ\006;\252\235R\274&\300s\274\026\201w\275\201\247w=\337\007\270\275a\250\225;\324Y\306\274\221\303\007\2757\324 =U\212g<OL;=s\014x\275|\030]\275+\243Z=73\210\274\222\361.\273\254\324\370<\313:Z<\275\027\377<\006\2635<,;:\275\350\317\031\275O\277\256<S\177v\274\254:\010=\r5\203\275\300]\0379\347\277\267<6\250\023=s\226\253=s\034\325<\376\202N=!z\231<\303\335?\274\232\271h=\'|\201=\367\343K\275\213L\230<\300f\311=\264Q\215\274\311\232R\275\306\377\332\274uj*=_$A<\234\311E\275r\343\210\274\277Y\001\275\030\313\234\275\017<\177\273`\035\276;\370\376\375;\263\232\262;f0s=\t\037\266\275\201V\305<\246\251\314\274\374\316\215\272V\014\032\275[\301\226=\243\345r=-\227\222<<\222\362<\227\036K\274\346\"!\271\013\3361=0&\'\275\274\031}=\234\370;\274q\366e\275i\363\377\273z\006\276=K\351C<\301\265\231\274e\231F=m\266\"\275\244L<\273\014\261\307<G\2152=\350\325\031\275\275\333\311\2745 \304\272\\\327\211\273#=&<0\2242<\007\343\n\275)lf<\235>\215<6\026\227\274r~\002\275.\226==\271\273\277\274}\243\244<\366T\346\274i\357U\275\331&\310\273\000\230K\275\000\322\026<r\317`=\247h\031\275\314F\026<\371T\003\274\312\023\234\275\236dg\275I\026\216\274F\237\000\275S\300\225=\300q =#T\256\275\221\033\r\275\235\017Y\274\255ja\275\032,!\275\2113\341\274\\\317y=l\246M\275p\036\215<\007\031\277\275\321o \275\tU\001=Uv;<\351\240\234\275\345\3417=\\\254\214\275\312\367\211\275\300o\314<>j_\275\201c`\275\002\365);\326\351^<\344\306\t\274\001<\210=\242A\235<\251\255_<\252\261J<\021\343\024=\000\272\230<s\302\t\275\363\017\247\275+$T\273\177\361\355;\000\020\r=\204\212\"\275\325\253\270<\263\341(\275\206#\314\272\353=\212<ZR\265=\210\222H\275\265\362\206\275L\274\026=H\303\213<\367\010\266<.\307 >]N\237=\305\341M<-O\324<\307\215:\275gq\215<E\254\021=\027\327\347<\016=s=c\250m<\2155U\2754C\236\2741\275E<S\336\265=d\306\036>\214*\233\274>\226\014=T\310\241<$\202\004=X\277{<\235\\\221\275\361UI\273\277\036#\275\320\r\027=%+\240\273>\261\325\274+1\200=m_\004\274\350\005%<@\212\320\273\037\177\255\274Q\030\223=\005t\361\273\224xk<\304\326=\2747o<\275\311\017\253\274\364F\250\274\'\243\201=\275\353\257;\026\353\341\274\261<Q\275\375\330\335\272\"R\270;\257A\227<p;\344<4\204\323\273,\230\250=\250\272\036=&\356)=\272\242\n\275\314\177\014=\230Z\215<lr\016=8\307\247=\213\254%\275)\314\010<0\301U\275f}{=;\362U\274\265A)\275T\005\233\275e\315\350;q.\004\274\027\265Z\275\202=\260\275\031\177$<\311{\227;\026\016F=6\t\023=U\304f\274<\353\003=\260\2263;\334R\216\273\342nn= d\262<b\202\370<E\036)\274\230\003@=\212\264\336\274B$\004\275!\270\237\275\324\226\312\274a\356\213\275`\371[:\362\304\207</<\005\275=\310\016=\344/C=\375\253\311<__\262:\212\354\276\274]\233\275\274I\220\n\275\356\200\210<`F\216:\354\365\336;x\323\351\274\212\221\245< q\332<\004\232\316;\350xP\275X\200\316\274\3429\233<\250Hp=\265 \230\275K=\256<\321\005\346=}a\376\274\241\336\240=\341\034\034\275\255\243\205:\273r\360\274O\036\274\275#\n#=5\372\253\275>p9;|\3561\275g\3340\275\t\3514;=$\211<\026\355q\274\215\205\034\275*1t\275\025)x\275\2535\321\275B\177|=\374\355\266\274\337\373\313\275\242\265\244<\233\202\346\274\321\313\364\274]7\245:\215\324D\2755-\306\273\003(]=I;\201=*\364\r=>\200\265<i\007U<\010hI<\233\006\346<\235\367\322\274\205b\370;\260\003J\274\372d\013=\204\025\214<w6Z\274or]=\364\321\020\275\263??=\211\271\222=FZ\032>0\2009=\274:\021\273\375\334\273\274\036:n=\355T[<[\024\362\274\237\3154\275\023\217\255=\342_\342\274O\361\203=i\367\245\273\225\231\221=1\0225\275\026U\223;d\270\300;\354\001\257\274\n\\\241;{\321\036\274u\317\332\274\253\025\355<\365\210p=\304\305e;J\007k;\022\206\332<\227\037\330;\0065\272\275\216\333\247\275\201\373\352<A\360\306\270Q\316\\=\306\000\030\275\027\253\261<`\232\037\275wc\270<\311\255\265\275\226\207\262<v1f\275\272\274\006=\335*^\275\224\362\317\275\311|T<\307c\231=<\315\035\274\375\033\302\275Tz\277<\240\376b\275R<\212\274\2340\233=\275]r\274\323C\222\274d\312R\275<w\347\274\177\376\022\271d\354+=\371\226\006=~.\250=b\345\262\274\214g\353\274\321eQ\275\022\263\313\275\316\237\207\275\234\300!\275\251\316C\274\022\013\337<\230\374\246=\222\212f<\240\2440\275\315\004\016\275lG\"=\373\221/\275\237A\202\274\020\224\322<\177^D\275,Qj\275?\t\315<h(W=\235\r\034=\021\234\200\275\211\216\303\275!\343\005=|\323\373\274+1\007\275m\3034=\3564h=\231-\350<\"\230\312\274\177T&\275\342\"\201\273;{\236=\021co\274\201l{\275\266\032N=\3366}=\252D\031=p|\274=\303:\264\273N;\3749\007\312c\271HC\237=&2\201\275\327K_\274\217,\001=\177\302\204=]W\260\274\006\230\373<\250\217\256\274[\370\264<\000E\220\275i\204k<\373o\244\275E\274\024<QN\253<\355b\251<\232\326\\=\220\240\034\275\203a\245<\231\320\024<\326\331\210\274\232\210J\275~\207\001\274\303\327S\275\005\013\215\274\004f=\275-\262\222\275\245U\307<U\313\n\274\317\210U\274\314\000C=\330\326\211<0\017\333\274\000\027\n\274;h\262<\016\252\367\274?\3227<\200\2710=3Y-=\331!h\275\000z\006\275\341G\341<^\335\232\274\310E\366\274\221#\244\273\275\336&\275\207T,=%9\335\275G\001\266\274\206\346\323\274\265+\214<\3626x<\255\026\230<\026V\354<\247\201\014=%{\241\275\366\034\264<*\364\253<\314\0371\273\370\265\023=9%\010<\026\300\364\275G\352\311\274\347\"#=\027\003 \275F\3077\274\245B\202\274*\330\021=\273\330\334<_\316i<F\212\033=\304\016\361\271\214(f\275\367\240V=\255d&\275`\013N\274\264\032\024\275!3\225\2749\221\352\275\030$\215\274x\250\237\275\327\0070=,\224-\275 \241\221\273\235&\244=\233\361\031;\306\305\t\274\302.0\275\236r&\275\355M\347\274\221\' =_\254\035=\305\344u\273\211\007\006\276\261\254b\275\360\007&=\203=\223=\3632\242=\r\365\357<r\320\177\274\3038\020\274<\233\212=\360\226\241\273\035\224e=\305b\236<\213\225\n=T\234\343\273\261\221\325\274a \021=W\003\246<\r6\036\273\033\375\252\274\250,\312\274\202(\007\275.G\007\2717\305\241;\362E.=\211\220\t\272\265B\203\274Dp\354\273\005|\221<\256\262\317\274\204z\006\274f\215\223<\357\254\017=\3055\002\274`\2746=o;\227\275\206\267|\275\346\235p<\031\']=iF[<3s\275=\210\245\227\275\n\2149=\303\275\223\2751\341\307<\212\360\321<FQ\322=5\002\024\275\276\001\323=\356A\021<P0/\274P`\210<\313\216l=\224+\316<\361\016O\275\342\254\203=c\330\211\274\365~b=\210\222\001<\307*\305\274r\210-=\244-\265\275q\260\r\274\247\250\200\275\362N`\274!pO\274R\376\034\274zQ\025\2759\244<=3\375\230\275\257~\355<\034\235\261:\221\301\\=\253\300\315\273\346\205\026=\344\273\243<,\315\016\275R\022\206\275\013\324r<\300\327\270=t\332\254\274\304\207T\274\251\247\216=\265g&=\212c\022\275s\022\247\275\032K\304<}\325b=\327\311\r\274\303Q\277<\277\002V\275?\356{=\304\301\r=q\002{\273N\'\322=\370u\n=\177\000\204<\331]\274\273X)\034\275\230\267\022=|h\312<\322\010\237=\325\267\346<j\217\204<\026\'t\275\262\251\300=\037\017_<M\277\213\274\344\231P\274\237\273\351=\227\371&\275Z\337-<y\254n<\301\036\274\274\343e\351<V\001q<h\2472\2750-\254\273H\275\234=\212\251\202=\320\373\246=\243x\237=\275q\200=?s\343:\210\200\355<\261fE<\354\303i=8\207>=&\274\252;\230A\030\275\320\'\373<\247\360\207\273\236\2457=Rk\274<\353\323C\274\340N+\275\0049\236<\323\315\251<\200\273m\275KC|\274\236\306\367<\376\227\370\274E\305.=\314\022%:J\255o=!\nr<\236\013\215=\273c\315\274\017\237\324;\301\364\221\275\0371,<uY\024\275\303\220\036=s\224\177<\"\205e\273\227A\240\275B\354\3259\354\252\222\275\213\024\022\275\365@X;E\373\371;F\217\246\274\304\240\203<\273\2604=\034\350H\275}c\303<\362B\232<\336h\326<\204\240\336<\200:F\273\216\325\257\273\034]\177<b\334\243<o\223{=\340\357/\2759}\033=;\305\033\275\230\242\022\274\372\350\177\275LdY=\363\361\222\275\010\345a=\251\375\230;\025b\276\274\0162\230\274\212\\\032=+\276\205=t5\241\275_,\365\274\242\260?\275\373\264{=\3423\000\275\337\314\215\274\311cV=\310X\306<\323z\217\274\033\027\336\273\200\275Y<g\336\210\272\177\221A\274\363\337\002=d\373\025<0\206p\275.\353{\275y\302\032\275\254\200\2329\226\370x\275\201\031O\275\310\036\246\274\211\320u=\315[\323\273\346\365\234\275gj\272\274\014<\215<\0268-\275\177\324\306\274\241\273z=\233\021\023\275\371\260\322\274\253\373\270= \024\"\275\232\023\341\274{C\346\274\274@\000=\200`e<\227\037\215\275$\211\212\275mR9\274\273 \274=\240\332&\2756#A\275\004&\016\272\253X*=;h,\275\267pA<\351\236I=\216\312s\274\211\231\000<\352r\244<\3239\016\275\324~,\274\360\355\352\273\013\257\250<-\2448\275W\245\245:\311\313o=<\352`\275\204K\301;\325\364<=\302\001\332\273\365\2258<\353\004\\:\241\023\023=\177\230Z<\216Hw=\340\025x=7;\362<\001\362\r\2753\246m;\025\220\031;\251\020\206\273#j\233\275p\260\027<\257c\2726\247<k\274\220C\206\275\373\203\250<\253\331S\275=\372\013\275\345\373M:\201\365\366\275\200n\005\275\034lk\275\250I\212\274\017H\243\275\234B#=k\244\273=M\214\321<\317\232\240<\247\264#=(\365\265<q\350\021;\370i\237;\355\366Q\275F\302D=\256\347\250=\346\342\013\275\177\003\362;\363\341\202=s\225\311\275\032v\244=\'\0320\275\277\235.\275\244\337\'\275\345\366\206\2759\366\305\274,$\212\274}`\032=\322\256==Y+\006<\201\261\223\275Pm\347<jF\347;}\303\200\274_k\000=\033\037l\275/>\252=\201\255\231=nh\200<o\037\021=Ip\217\274\007\324\342<\306\212\244\275\372\211B\275R\251\304;\346\340\201=~rp\275d\215\177=A!M= \306b=Y\026\370\273\2513\215<\233\276\262<II\314<\210\n\221\275I\261\236;?\035\250;\021\022\003\274J \233\274\247w6\275\344K2\275U\323\304<\230p\310\274\374\276K\274{\220h<\231\023f<)/4</\221\307\273\362@\215=\376K\243\274*\352\216;\202u\273=T\266\300\2757\202\203\274f\311\320<\212\257\034=\360\233\272\275\242/\177=\266\212\227=\363\2637\274\265+\375\274%\001\032\275\231rD\274\025q\';\242\316\302\272\304\035\223\275\270\0166\275\271\022\311<C,\020;u\273\037\275\001\360h=\315!\363\274\016\013\222=B\213\231\275\342\273\241\274\374\374\245\273i\321\335<DO\204=^5H<s\2676=\335\277\214=yG\000;\010\257\226;m\3203\275\301:\273<\034\000*=\275+\025=I\215\3429/\264\r\274\302U2\275\224\311u\274\243\203\214=\313\255z\274\224\332\020\275#\3360\2751\231)=C\313\366\274\357\304\204\275W\337\304=\324N<:\231\322\206\275\020\374a\274\340\211\215=l\330\213\274\330\024\232\275(\254\241=\036\312\034\274\\\263P\275\362{6\275\034<\361\274\3601P\274\275\363`\274\317T\023=/1S\275\374H7<yA\235<\254<\034\275nw\027\275\020\004~\274^\024\007<\3658\241:\237\271\334\274\251\261\300;\366\360>=\373\032\202\275a(\207\274\276\262U=\027@\242\275\374\346\242;\244\033\t\275%\331@\273\207\265\213;&j.\275\177 z\274y^\007\274\330\032\324\274\025\t\326<\253\272\001\276\337ik=\255c\322;s\303\351=\227\002\004=\023\204$=\025\245\301\274#l\344;2\324\251\272\r\363\225\274|<\245<\337\374n=\034\003\203\274>\267\222\275\315y\013\275kYH=\370\363\211\274\033#\206\275;\310^<2\315n=T\350q=\304\237m=\220\001\315<\241\2212=\005\324\255<#\315\025<d\254\177<\001X\337\273\363M\370<[tl\275A\302\255\2756*\366\274\233\003x\275Z\260\243\274g\377\201\275\202\rz\275:\202\206\275\315#\207\274`\303_<.\002\022<\366\331\245\274E\362\317<\306G\036\274D\357\014\274e\240)\275\354\014\317<\230-\345<\273\376\214=>\245\203\275\t\205\205=\365\026U=h\307\207<X)P\275\307\302\036>o\372\340\274O\310;=7\034g\275F\030\224<\322\226\t\274\267a\001\275#\027\027\275\223RI\27412G\275\377q6\274\336\255Y\275y\374\013\275^\376\030=9\206\346\274\216\206\224\274\016\377\270\274\216\207(\275\255\322\346<\245\377\205\274K\255\365<\253 \205=$L\027=\370\266u=yG\377\274\2005~<6!\357\274\353\223\177\274aIM=\017\365\371\271+\020?=1 \306\274\rP7;$\210\320<\275\376\231<\220~\274\2742>\316<H\233u=\215\034\373\273\257[\241\275\211\006\332<\262\301d\275p\341e\273\222H\307=\251e\016<\266s\000\275\200E\367<\343B\226\275\034\026O=)\232\234;\367\356\244\274\362H\313<\2351X<\352k1=\2328\221\274\326\366\247\271\320F\211=\324w\365\274Wd\035\276a\256\364\274-L\n\274\021\035\033\275\336\326\364<o\371?\273\005\270C\275\033\263-\274#;\360<\233\016\037=P9\247<\022\262~\275/S:=d\016,\275j\352H={\'\242=\032\311\017=\203\225\250=n\322Z<\010\230\275<\3508 <\303\267;\274\275\244\342\274\035e\247=\224\311\"=<\301=\275\222/\345<\315M\221\2752\332\033\275s\305\214=c\343\230\275\322f>;y\377\313<\341x\212=\226\220\316\274\327\270\200\271\240\375\276\275\033\351W\275k\366\207<\"\243\265<c\214\025\275d\322H=\370\373\325<\214\250\027\274\2154\220=1g\365\274\334\330\023\273\206\301J=\202t\266<VE\256\274\274\nm\275\025\0374\274\004\246U\275\351\313\204=\365|\004\274M\262h=\203T3=\346;/\275itG=\014\245\307;4IT\275\201P\222=M\235\234\274mrq==#m\273\346W\201<\230\273\323:\222\354\003=\350#O\2751\351\244<\357\200\352<\246\306\203\275/\307\313\274\347\257W<v\360\224\274\022\3271\274\255\343\002\275\343\274\247<\210\226~\271\272\021\335:&0\216<\360\210\006\275s\370\374<\032\201\251=\210\240\016\274\354J\375\273%\201\320\274Z\206\276=\205\245\330;.\374\360\274\351{A\275%\tA\275%,\335<r\256\034\275;\372/=\340\234\031=Z\230\'<%BA<\362\336\321:,\024\024==xd\274\230N\217\274\264\254C;h|\276=`\225\002=\262\006\'=Q\004D\274`\232f\275\347q5\275\366\243\"=\375\352\265=T\232q\275\301\030\322\274DQ)\275X3z\274\377+\006\275\302\325.\274\205\022\214\275\325\303b\275\324\035\247<\266k\224;N\272\016\274K\006?<e\340\005:\303I\210\274\321,\231<\257`\003\275F\307\'=\243\313\275\274\363\005\326\274\377\372<<\323\2341<u| =\003\205\210;\337*\205\274\021\355\\;\351\314\251<\350\014\004<C\335\327\275\223B\"<\267\373\261\274F\274U\273|\366\261=\244\265\310;?\265\037\275C^\276;HAL=\0300\355<s\321f=\0071\201<.\322\241\275\n\257\340<\321\265\273<{\024\247=|\337\212\275l\025\317\275\266f\016\276\303\3412=\347\263^\275\246\365\223=\243k\347\275\232\234u<\177\234\244\275O\340\256\274\257\376\326\273,N\223<\337p=\275s\356\210=\243\330\374\274\261Lr=\213\323O\275\231\332O=^\370f;,\001j\273\207\317\234\273\026\016\260<\365\246?\275`\350\037\274.V|=\016\235\340;fo\225\275\2517\262<\211\304\003\2742f\217=@yX=PU;\275\t\310\211=\264\351\322\274\2704\344<e\333\253=\027\330\245\275\341\272\022=\203\330o<[8\230\274\342\3607\274\242\327`=OK<=@\220\272\273\332!\004\275\236DJ\275M\237\255\273\254\322\224=?\3608\274.E\336\273\305\306[;u\331\\=\313\363\315\274\033C_\275\365\243\221\275\370\\e<\262\3658\274\032\3143\275\006\307\233\274\004q\246=\320\305\254<,\'\365\274n@\002=\226\234\265\273\320D^\274\017\271\020\275\313\350\221\274G5\275=\364\240\200<\320p\031\275\310\t\\<:E\025;\234\215\201=\313\302Y<\341\226\200;J2G\275\252\216\274=Eu\217=\320\206\037=gE\274\274\260Y\327;\314@F\275y\206\217\273_6(<\315\335\020\275\251f,<\032b\017<\324\371.\274\220\306k\275\260|M\2756S%\275\347\217\240;.\271\024=\331\'\006\275\232\177I\275\341\253\000\275}\204E=E\246\023=N\226\352;\342\357\241\273K\334L<\330\276\244\2758M\261\274\231H\244\272\031a =%\361\027\274+X\266=\255!\354<\265\216\204\274Rpf=\220S\307\273>\345\277<\317\022\334<M\276 =U\360\363<^K8\274r\001I=\324ww\275ua!8]\010\013\275~\240#\274\305\301\n\272-\236\210<\257\275\205<\274\307%\275q;C\275}\354j\274\242\030\241\275z\305\323\273\342;:;\\\032\301<\250\300\247<\301\335\341\274{M\256=Hj\212<\253\031\000\274\3174`=`\201\362\274\225\315\276<)Q\n\275.\320\237=w\252\030\274C\247x=\240\021*\275\352XJ=\205;5=\004\366\024=mt1=\370\214\256:8+\235\275\n\3168<\337\3063\274\345\347!\275\366[C\274tZ\355<\315\021\212\275\207\231\202=j\333\317\275\277\331\362\274\270v\036\276x\316\252<\023-\271<\377\020\377\274\210\244\251=\033\006#\275M\004\237=p\352k\275\256\001T\274\327\231S\274\356\351\371<uTs<p\225\010\274\030l\007<\240\327L=|\247s\274\275\215\315;\260mN=(\333\201\274&\3356=\252\251\231=\277T\343\273\244\237H=t\337\224=}\273\022=\204bK=\226\346]\275\221hR=*\203N\272L\211\016=\300\023\264\274e\"$\274\361\037[\275\344;\205=\352\222h<\317\225\007=6\351\233\2754@\017<\'\355\006=\2753B\275\250!4\275h\224\255\2734\314\n=\356\234\203\274\361V\036\274\014\3467=\341EN\275\255)z<U\353\360<\001\007u;\265>\201<{F\032=\261\320\340\274V\315\001=P\321\267\274~\3247=\023\353\274<\006\023\217\274#\362\312:\253\211\t\275\274Q\226\275\247fa=\026\356\007\272,\3564=F{\257;Q\326T<\016\t\r=\243\225\217;\212\200%=5\255\273=\300\006;\274\372|{\275>\273\253\273\002\303\256\274\323MO\274b\270(\274\016\3703=e\014\223\274,aT=\262/\007<\243\033;\275\237\221\266\274\367\300\216<j\035%=\010Z\037<\372\306\003\274\360Y\236\273\200?\020\274\261T\344\274Y\373:\2742&\\=8\377?=\027\216\265=b]\240;\367nv\275\302-\233=\014\033k\275\260\2700<\211\220q;x\006\250\275\023\330B=\345\026\356<\033\343.\274F\262U<B\374\362=\323\013u=*\370\374<\"\024^=\214\266\213\274;/\350\273{\247\001\274\373\177\204\275M\304\241=\213\251\302\273\360\372\017\275\312\326\275=k\000;\272\3340\316\273<\203D=\205\010\263\275\352\"9\274\327D\257\275\004\275\205=J^\260<\3561\211\274\267\007\002=H\203\325;\310\375\371\274\356\2532=\213\n\277\274\263\305\345<T\236N=\204\303\002\273Ke\n\275\345\\\255;1\336\r<W\231Y=\227\200\025=c\002\n\275\233\226!\275$\t:\275$\010\250<\216\261\304<PY?\275\324\302\325\273\241\201&=\225D\346=Y\n\374=\302\207g=\203\331y\274_\257\201\275w\314\202\274\376\373\360<^\364\212=\257\345\241\274T2\300<\306\331t<Y\227\232=\340\232\301;>e\362<\231\341\236<U:\207=e5\251\275>\330R\274\014D^=\000\036\241\275^\227\021\275\366\225\311<\374\212~\275]|\213\273\316\257\343\273\230k\014\275\373\037\307<\244hX<\315\276\024\275\252\272\222\274\022\021#=y\213\002\275\253\326L<\037\020\000\275%l\331\274\306\036\226\274\217\226\214\275\177\245\242\274\3400\016\275\033\207\023\275\252M\030=\003\2614<\314\033\211=\273\027\235=\036\221\223<\245Y\203\274{\0141=3\255\266=\374\201q< b\300<\301\211\250\274\324\366E=\343\251\257<\364\242\024;b\200\034<S\327?\275\316i\002\275\262\026\367<\265bI=\356\327\217=\326\341\220<\244\213\275;E\200_\275\207\357\017\272\257\232w=\344\221 =\355+\324\2748L\023\275\356$\263=pEB\274\252\301\346\274\004\373\232<H,\371<fI#=a\236\356=\205\242\356;L\335\272=P\007u\273\\\313\213\275\255R\205\274\226\230=\275m\024\264\274\035y<\272Q\000\227\274r\022E=\330\201\326\274\271\017<=\273\022{\275O\203=\275\265\201\351<\327M\017\275\327pY\274\246B\215\275\031^\257\275\327\273\241=\273\037\007=\376\255\352<\027WS=\257\353\231\275t\216H=\277(\220\274\320\220\277<5\334p\274dr\002\273\"\325#=\035\0177<\332\345\010=\322\251\237\275\240L\'\275_h\212\275\334\241\000\274\017\327j<\005H\303\274\262\235;=lLg\275}\230\037\275)O\322:\020\030\000\274\003\rj=\307ns\275\231\251\367\273\263U\205=k\273\t<\364O\253<\001\036\177<\250\251\321\275\353\332\027\271\276CV<\322\025\351\271\344\211\004=\3657\265\275J\373\006\275HI\210=\323\031P:\024\215`=\252\240\227\2752?\254=\353\037\033=\207\260U\275Pu-=\010#\273\274Fr\356<\016[\014\275x\216\223<\206\262\206\275\214\277\323<\235\365\t\274\257[(<\247>z;b\224\"=\014\220n\274\237!\221\2750\345\263\273}\205\316\274\020mm=\262;\027\274\263\370\324\274X)i<\256\220\000\275y\216\277\274\232\373\257;\211\376\371\274\314\002\'<\0107\326\271\226\324\002=Z=e=;\336O\275\270w)<\347\322\373<\227\252\\=}%\210\275\027\274#={\313F\274\t\n\234<\304\n\240\270G\313U\275\2670\350<Z!\222\273$\245\n=\233\335\033\274\016\273\270\275\\\024\374\274#\326\002=\237\230\021\274\361B\221\275`\341p<%B <@\331\305;\266[\344<\352\304\314<\243\307\243\273JR\234=\223\271\020<g\362\235\275\211\275v\275\375\026h\275\210x\215=\235\206Q\274\n\334\246=QO\303<Q\366E\2741\316\020<$\301\033=P2\253<;\202|=U\010\200\275J\317\224\274\n\357\346;-\037\347\274\025p$\275\203\375\322\275\252V?<5\320\234=\302\2767\274L=\017=.\006\310<\324\207}\274\3648Y=x\304\022=\310\320\005<Z\371\263<=Z\341\274\242/\235\275l\364\234\273\333D\0018\000\346\354;\"\304\225\274N\232/\274n\342\270<\266\232\330\274\002\361\022;j\244\215<\245N\035=\0168\2569\031eJ\274e}\234<\350\320\360\274\335\342\251<j\014\312\274\235D7=\230\273.\274x\347\367\275`\005:<g&j;\261\2238<\205>\241<7\377\317<\'O<\275\330\376i<\372b\021=fz<\2751\351\217=\357\220\'=\350r\321;\025\223\213\275%\277\225\275\352\t\250\275\215c\245<Ko^=\2568\274;\352x\241\274\205\224\250<eJ\277=\202\230\241=!\213\217\275\347V\206\275\366\350\320=\336t\364\274\003\256\246\275D\352\027=\353\310\244\274\\\306\320=\245\246]\275.x\224;\331[\212:\365\327\210\2750=\210=P\372\263\275\225\227!=\250\214\300\274\240\257\247<\177Y\336;\342\267\222=\253\355\0249|\377A\275/x\216\275\371\364\273<ng\027\274\255\034W=\252\345F\275\307v\203=k\377P=\331\2477=\2400\217=m\016Q\275\234=\317\275g\231J\275\274\246\344\274}\ry\274L\022\322\274\203\325\306\272\370\177k\275\364x\216\274\036\342\025\274\001\274\203\275v\322\021=\030Pd<\371\321\217=\257\337\336=\264X\032\275`\233$\275|\234\301\272VJ\021;\222\001:\273\222c\025<P`\313;\210\350\232=\351\002\t\275gM\227\275\032 \232=\023\244\214\275!]\266;[\237\035\274+\014\177=eFN\272\010\'r\275\032\322~\274\014\0063;\330\245k=\202H{\274\221]\335:A\362*\275\033\033\376;u\354=<\324-\010=\373\023F\274\377\025B<\007\333\037\27547q<\0211v<\331\000\221\273\243yj=\271\034\222<\331\261\013=\255\345n=\'\r\005\273\004\000\324=\243(\210\272\\u\266\270A\214\343\271\250\261\330\273\321t\243\275n\004M\273\016\261<=\305\374\244\275[7\365\274H%\337\274\333f\n;)\023\223=\014\312\3659\301\235B\274DT+=S\327\323\275\251$\207=W\204\000=\360}\366\2749\"\026=\244\\\003\275V\231\016=\334\333\013\2757\354>\275K\347\250<\000\270L\273ah\242<\200\303\213<N\245\023\275\264\373F=\253\320\261\27491\215\2736\324h\275U\313O\275v7!=\2032^=qp=\275\031\337\300\274\375Y\303=\006rN=\327S\200\274\225\303$\275\220\004==\220\214\r\275N\265\262<\252\010\262\274+\373\252<\321\013b\275\377\301\232=\265KZ\275>\377\331\273\324\276\245\273\335\342\202\274\021\255)=\2346\223\275\006XG=`\222\365=\252\227\213<9\341(=\010\361\276\274K\200\036<y;\223\275\250\321l=n\302\034\275\274\346\006\275\342l\242<p\203T\274\022\221\025=\345m&\275#rA<`$\313\273\355\022\212=\324k\240<\327r\005\275\327\211\004\275H\267\022\274\216\2261\275\"j\213=\361&W=\002\337H\274\311y\371<\001\240&<gu|\274\314M\020=J\263]\275\016\361\340:6\207\222=\2707T\274\334|\000=\360\353.8\275\264Q\275\237H\274\274BMg<\261\314z<[\274\025=\207(\t=\030\361\005=\251\227\025=q\214y=\276EC;\0079D<|\253\260<U\262J\274\3631\321<mg\225=\233\200\220<&zo\274\3568r<\244\232N\275Z\347#\274X\252\335<\227p\032\274\207u\335=Q\3421:\311\\v\274\363\001\255\273\355\205\340\273\242v\314\274J\021\203\274\003w\256;n\260\336<\247\262\270\275=\202\341\274\334\2144\275\3101l\274\016\224\037=\034\004\275<\334BG\275g\223\363\273jv>\275\250\346\325=[\270W\274\224\340~=i[\\<y\356\210=\364\003(=5\207*\275\300\265\232\275\351\311\357<Z\263\220\274Y\312x\275\321\224\"\275\303\310\335\275\276D\216=\362\310\317<0M\274\274\"J\007\276BN\235\274\265\363\272;\242\017\013=\271\271y<9\031H=\356\004\264<5\311/\274\301\220\030=\221\200\215<,\366\022\275/\240[=\265\024\3308\277xD\275\310\260\270=\271Z\240\275\026\372\223\275\356X\304=\001\036\035\2752\340\260<\257v\365;\r\t\371\274\222Y\221=\335,\202<\313g\213<kPY<\301\214|\275\255\345#\275\300\177\313\274\201\224\315\275}\232O=\252\217\263\274I\023&=.4V\273>\242\304\273\205\236\373<\337\031\362<\251\024\345;,\' <\346o\221\275\305f\030\275\327\245\334\274q^D;s\3561<\230\263\305<\203\364\025=_\266\223<\230\365t<J\013\220<z\'z<\001;;=\335,l=\323\221\223\274\033K\002\275\270\332v=\016\321\246=\312_\247<\300s\315\274\265\242\r\275I\226E=1;\'<\'\226\223\275\016t\250:\367\330}=\032\350\276\27420E;\026\"\315<m\201\246;6\013\177\274\340\253_\275\313\347`\274AI\345\273\366\314\237\275\365\335O\273\207Y\000\274m\022\231\275\326\225\321\274%~\304<\013VG=\365\341\366\275]\330\021\275.\204\257;\237i\207\275:\254\207\275\005\226\330\274]6\264<\226\337\025\275\246pI<T\366\207\274\007\304\211=j\033?=\020\345\307<\327\246z=\237+\017\274\270\215Y<w\207\373<k\344\005<d\002.\274\312x\013\275\210x\256=\252\274\205<m\"I=\247\332\302\275-V\314\275\0376\027<&\242\235=\370\236\203\275n\317\214\271\033\375\212\274\024\357\000=\272g\206\275o\000\336<\205\216\022=\032\335\260=_%K\275\255\276\310\273\343\220\220\275\022\314\251=\313\302\263=\344UC\272\001b\243\274\025\222B\2748K;\274\217_\034<\234\337\r\275\021\375\356\274\311\303 ;\016\233\241<t\036\242:s\225\032\275/\321\203=\344\211\370<\210&\252=:S_\272vH:=Q\210w\275\007\346\250<\222\364\261<\270\246J=\361C\274=j\003\023\2747\232\241=\207\"\276<8Y9=h\250\004\275\315\236\374<F\272%:n$\307<\035\326h=\306\232\255\274\217\005\246=\316\363W=\2638\024\273\351Y\214\275\307\346[\274\016ft\2742d\206\275\035M\377<\354\302,=%4\224=H\277p\275\270\026\344=\020\220\'=\004\r\255<\177\360\n=\262\246\341<\2774\037;\3013+=\335\233\000\275+\365&=\213z\r=K\336\367<\354SS\275\361\275\023;\326\264~=\373\224\25799)\254\275-\001\311\272\032\204S\274\275E\256\272m\000\273<\263CF<\320\335,\275\371\202\246<1\365 <K \256=/\335\330<\256\365\005=w\321\255<\266 l\275\t\022\331;\236\223\273\275\2466\227\275\025\305A=/\251d\275\363\022\035\273v]c<\230\274\276<\260\330\250\274u\367\303<\001\253|\275Ca\013\275\356a\223\273\004\010\225<\316\201\030\274\024u\213<g\354\024<\206\335<=\243.k<$C\323\272\221\246\035=\275b\223<\021\325H=n|\274<\261z\013;\343\026\t=[\344u<\344$<\274\3204v=\322mq<e\311\020\275\377uB\2744\375\200\275\223\310.\275\234\\\237\275\252H\202\274\376\220\276=Z\264\035=\320\010\207=\262\014\016=\010\262F\275e\346\213\274\234\343\003\275\317\304\265\275\\\267\023\274>\347\023<soh\275F\022(\274\270\241I=\001\244\357<O\265><H(O<\221\327z<\270\"\216\275A\323\204\2744\351\001\275\300\251M\275\344\246\177<\000\347\215=wjz;\372l>\273\024Xu\275\350\007\252=\375\325\311<]\233\354\274\221\342?\275\353G\032=r$\372<\304%\355;\222\217h\273\017\304\207;1\004\274\274n\377\202<\016\205\227:~\377|=0aR\274\016\212\'<\033#\230<\361`\310;Z\343f\274\255\3766=\223Q;\275\356\026\177=k\336\027\275\364aW=\226\346\336<\0006\r\274nT\026=!\224\017<\024\330}=,\0326<\323S\377;\322\230\214\2759\356\036\275\306\222\313\274\263\363d=4\221\234\275\300\200\217=\001\026+\275hN\227\275\003\345\373\2746\274\340;\305\310;=v\210\014=\021|\251<\271\345\243=\016\222P\275\201u\"=\276\274\017\275$\2465=\243\376\377<3\253\310\275\271\370\322\274\211\373j=nm\235\272\004\375\'\274!\364\345\274\tf=\275W\241\301\274\214#\227<\261\204\260=\356Tp\274*-\243\275\252\037<:\333\231\002\275\025\317(\272Z\021<\275\267U\255<*\327x\2746,\027=\212\363\245\275\226\267\206\275\300\231\037\275!g\004=b\224>\275\275\366\251\274#\311_<\231\013\236=$\000u=\367\346\201\274\023v\033\274\342R=\274.~\225\274|i\234=\226,/<\340j\007=\204#\r\275\234L3\275\2776\007=0\316\303\273b\254\250<\200\240a\275}\025\214\274\022\027\321;\267\031\232\275L\310\257;L\234\253=\364n\255\273\243x5\275`\275\234=\361\013\245\274\323\222\224\275\253\204\233<\244F\004<x\010\206\275\207\033\006\275\243\207\320<\221D\330;O9A\274\360\206x=\324\225\364\274\013\232\030\275\345\277\302<\335\241(\275\225\021\025\2755\223\324<$\366\001<\330\321*\275\311\227\n\275\362\211\206\275\332\216\263\275\210r\216\274\356\230\236\274x\003\010=\323\026\267;\371\354N\275\277\270\363\274\340\007\374\274\356\330$=B\332\253=P\333\203;\377\233\004=y\276\216<\372B\223=//E=Ci\361<\3547\206\275\350\225I\274\264b\375=\010\235\221<%\270\003=]G\033\275\231\016\260<\257\341\371\267\0004\013=,\240\377\274\234\"\177<\177\217\276\273\355\354\364\274\025\016\034\274#\310\350<3\315\022\275\372\322\220<w\366\270\275\260C]\274g \332=\"i!=\024\014\222\275\024P\216\273C\230\035=\'^\001\275<\220>=^\2544\274\'\251\216\275C\353\253;\263X\016\275d>\234=\005]\007\275\272\344\253\275\316\260\006=\350\322\220<\216\260\225\274\2717\272\274\240\2104=\277\235\217\275\254\210\327<\367U\330\274\262Ax\274\304FM=J\312\021=\017\3351;\370c\036=\2602\253=\261+\227<\341|\320\275\023\302\342\274cLB<\362\345\367\274\244G#=6\214\206=j\254\217\275\342P\t\273\0206\216<\'\3077<ZrK=9\242 \274\2104\243\274\236\001\353<\377\310+<\306$^\275=\262\223<k%\305<\237\311\004\274n~k<}\215\256<\233\325T\274\215\204\016=\206\203L\274P>,=\232a#=\344-n<\\\342\324;\207Lm\274\314\274\346\274\007\365\312<\256d\345<\036\214\025=\t<]\275\022\266\263<\3121$=\235\225\001<\34405\274\262\r\000\275\233fG=&\325\330\274\362\347Q<\321\t-\274c\225?\275\3717l<s&\257\274\241\0241=\203\252\205\274\000@\360\274\363\366@\274\332?\210=-/\'\275\222\360\206\274\253p\213=*$\034\275R\023g<#\3661<$\261\317<:\232\017<\376\276\320\273\203\007\220\274/:\356\274\264\007\213\273\305\034\356;\247X\257\273\273\245\232=FC\314\273\371`\r\275\347\344U\275w\206^:&\346\001\276\243\375T=\2306\001\275\372\032\017\274\223\365@=\rC\013\275\305<\010=\340\350\032=\376\"0=x\337\031=\017\243\231< \033\221<\261\270H=14\316\274@\223\243=+h\341<\035\356\315=\r\352\201;gT%\271vs\205=V\277C=\254\251\032\274\236L\210\274k\357\310\275h\365e\275\254\215A<j\337O:\3221\330=5\255\000\275\310If<\305\030\341\274\031\345\030\275F4\210\274{B\221\273\014\363\346\274T5\331<F%h\274\333~;=\354O\264<\030\334B\275U\366<\275\231\241\250<\014\346\332<bM\345<\342\253\017\275G\037\317\274@\221\324\273\333\3163\275[Nv\274U\037\233\275d\351\300<\257\305\275\275\3043f\275\251\357\344;\230S\227\275\370v\211=\261%c\275G,\007<\251E\304\273sAQ<\325l\323\273\370XG=\037O\231\275\000\353\032\275g[I=B\020\313\275\0144I\275~\3726\274\252\342\371=\232.Z\275\233\003\321<P\346^=\371\220\346\275p\244\035\274n\305\016=\016\331J\275K\345\340\2745\320*\275\034-\351<\335\017\216\274\265D\251\274\360\367\330\274\324N\344:@[\355<\337eY=\220\365\227\2727T\220=c\225\364<Hh\005=xb\222<\222\006\306<\244\207\353\2744\375\242<\316\013d\274\324)?=\000\233\304\275\277x\201\274\3643s\273O\333-=\332O[<\004\357\222<[\337\250\274\230\244\356<\272\030\031=o\006G=r\004\240\274\201\275\206\273qI/=\264%\233\274\030\215\241:\300\021\006=\013\346\010<\237\337\207\275\253aL\275E\266\357<\340\340\341;.\216\216=\305\326\246\274\307\301|\274\316\255.=Zm\272\273\'\343\t\275\024=\222\273}\223\317\274.B,=\t\312`\275X\333\304\275\365M!=\2052c=\341\235\200\274%V\027>\002l\244=z\001u\273A\245g=\035]\006\275\272\253\320\275\253\241\306\274?Mg\274\357\277\373<\347\357\314\2748\300~=*u\210\274\\\276W<\016\025g\274E\336\217<\243\221\217\272\327\245`\275\245g\342;Q\313m=\2739\236<\347\001\236\271\332\362\203=\314=\313=\334Ls\275%H\212\275-\327\310<\205c\372\2742\266\314;\325g,<\317\231o<\276\201\227<\030D*\274I\204\234\275\026\260d=X\021\235\274\271\037r\275G\200\343\275V)u\275h\224J=\373\013o<\267H5\273\265\027\247;\317\004e\275\037\211\301\275\017\265\'=&V\010<\020\033\014<Z0\003\274,\351\033<\364\375\331<\3521\357\273j:[\274\257\014\235=a\262/=\202.\"=%\343\326<\237nC=\213\030\321<e\213%\275\234\3654\274\222BX\2750\3501=\0300\t=\361\273\035\275\305\366Z\2745!l\275\334\314/;\016\033\265<a\204\237=\305\317\343;\203\020\361\274k\351\n\275V\031\341\273\324]\373;\333\016\325\274\370\202E\274\251\226\0038\341\253\373;\335zl<W\344M;n.\271\274Um#=\036\037%=]C\275\274\273\340\203\275T\351\301\275\256N\244\274\361W\326\2746\\$\275\002\341z\274\236Y\253<\264Z*\2756\347\243\275\'=r\275\2218\342\275k\341\276\274i{!<\207\320\006\275\320\225\367\274m\311\301\273\356\311\203\273\002\022\235<\230\377M<\245\2464=\034\234j=\004g\351<\035Hw\274U\2750\273D.1<d_E\274\217\310\363<o\370_=5\3307=wTt:\\7\177<i\215\241\273x0\027=\232m\256<)\306K=\303\'\017\275a!\233\274\247$\215\274\031\330w\275\230\220f=jOp\275Cv\235\274\356\225,<B+\217\274B\346+\275\300\017\217\2745\037\323<|\332\035\274e\024\263\275\303v\033\275\256N\014\273c\234z<}\360\226;\355y\203\275\222\312\330\274\376E\213=u\206\265\275\262EQ\275\320\025\212\274\023\245\211\275\324\221\330\274P(u\274\201\351$=\256\014\014\275\036\021L<Q\271S\275\222\026\206\273[\331\246;\024:\002\275\206\\|<v\206U\275\277a\367;\177\032\316<%\"~\274?\364\214<\021\236\230\2735\224/<\243\305\t=\265\271\031=\233\217\200=%*\256\273X\005N<\334K\255\274\267\300\355\274\017=\261\275S\350`\275uf\007\276\226\265\250=AzO=\354Pf<\027T\265<\346\264\365\274\201\t\341\273\177{\034\273\210i\314<\326\204v\275x\313\r=\035\023\035=\342\301\373;*\342)=\314g.=\332\251\217=\030\245!\273\240[<<\031\201/<\320\000\363<\037\373\201\274\323n\313=\247S.<R\026\326\274)32<\3460\010=A-\212=a]\340;\373L\320\274\302\002\363\274\20693=^ \205= \206\265\275%\030\001\274\353\347\203\274\326\231\230\274\253\006U=\251\320\020\273V\207\332<\322\315J=\365\320\267=#`\035=P\313\223\273\337!\264\274\007\252\200\274\241_\206\275\302\241\325<\344\326\331\275\210[\021\275KcV\274V\016\034\275\257\304\201=\374\215\204;\300\272\366\274^T{=\034\007\032\275\375\364j=0\036@= 7\234;e\203!<\035\334\326<\260Lb\274L\250\202\275\251\002\016\276\372\211u\275%Z\232<\374\016\024\275\232\301S<Vp\223=q\343\314\274\265g\226\273\032\001\010\274:vR;C\201)\275\023iC=8\353\273<\022\000\315=( \346<[<\025;\n\367\275\274\252\013\342\275\376\026\036=\330\354\364:\340\rm=z\353\200=kA\257:\272+\275\274\274\016\023=\260$\206\275\324\270_\273\302\034\312<\"c\221\274\302\007 >\260\317\031<\374\007`\275\2626+=I@\257\275$\242\016\275dpE\273I\235\024;\2400\023\275\223+\344\274\215\263L=\330\367n=\232\272\036<\310\243\244\275;C/;\310\347\264= H\222;\247\265\375\274u\336\243<F\211\350<F\3213=\232c\244\273\336\317\364\274g\263\222\275#\347\250\275\206NV;\212b\267<\263\344\327=\335p_\272\261c@=\324^\014\275<\225\207<\031\032\352\274?\334\320\275\177<\247\274\217\241\024=1\231L\275&\356\224\275\3532\200\2730\245\220\274\007K0={\3549;\n\230\010\275U=\004\275\366O>=\372Q\210\275\327\257i;\356\356\005>G\030l\275\030a\260\274-f\240\275\266(a\274L\257\004=\3660:=\323\252\322\274\350F+\274\002\277\264\273\277z\217<\366\351\267\275\251\267C=Oe\212=\264\265\021\275\027EH=s\250\026=C\221n;B\240\310\275\320\022\t=\276c\216\275\310\033\016\273x\341\241\275\350{j\275?_\234<\343]1\274+t\252=1\230\"=Jo\324;\367\250\245\274,\221\356<kH\373\273^\036\241<\262$9\275\366\321\273\274\264\276.\275\203\326\205:\202\307\3659\316\034\230=9c\235\275\337v\004\275\025\265\257\274\306\250\226=y\270\265\274\251\364c\273\364\301\224\275&\035\277\274\244\337\032\275),\001\2756\343K<\036\3102\275\305sT=\034\230 \274[9==\300\217\304\274*S\371;\2660\000\275L\202\227\275\266\332\277\275\351\306\031;\265\3673=\273v\020=\264%\241<\364H ;#\341\'=\344\251\025\274\303\264%\275\363\253\022=S\224\214\274\020\247H=\320{h=\377: =V\332v\274\025\202\000\274\354\202\036=\365_\255<\205\307\210=\032\023[\275\211\376\r\273\325=%=\376\365q\274\203v\014\274\377\020\361\274\375C\230\275\255k\006\275\203(\037\275\203\351\200\275yu\r\275\213r\235:\201\312\245\274\203x\327;\354z\206=v\232A<)\325\340;}\207Q=8\227\005=\356u\226\274p\267\204\274\344zf<:W-\275\253\021\010=\020\362\034\275s\333\026=\206\275S\275\226\242\017\273\227\367n\275\323\r\007\275\376\203\224=\275\302\316<\317[P=\210\001g\275\337\301@<\215\330I=\013\214q=\217\270]\274\305\006(=\261\344\005<\211\037\200=ga\006\275\030Y\243=CR\320;\031\030\275=\034&(\275]\300\245\274\337\302H;e\230\213\274\244\233\213;!\300\023\274\273\\\311\275\370mb<u\236\345\274\232\313\252\273\204+L=\312\370];\252\326\305\274\226\302\353\272\324\265\246\273\241&i\274S\"\274<q$\302<\242\200\350\274s\244\353<!\275\253\274\3472\2629\265\260V\275f\r\202<\034\244h=\357E\332\272\000\265\273<\r\031\303=/\315\272:2\274\326<\231\0332\274\030\364\244=\230\006\035=\005\211\033\275\032\273\323;\3344\266\274\016\370\367\274\310\307\267;Gi\346<\n\230\363\2748#\344<\000\375\307<!\325\211=\253\205\253\275\022\230\236\273E\230w=\267\306\253=\263\231\323=\355Gu\275$\221O< \352\301=\025\357%=\242\274\254<\334N5=\232\242e<D\260\022<\271\203\006\274Ez==L\201B\274\033sr=:\275\217\271\245\362\252=L\365\301\272N\032\223<GD\000\275\021\367W<\200\333u\275\274-\254\275\213u\351<\207\223n<\301\026\025=\356\333\256\275E\373\267\275\200\347\030=;\246\250\273\341\206\221\275e\243\270<r\021\n=\031)\200\274\233\3627=\2059\372\274\306\2522\275_\256\351<2\030+\275g\346\265=\335\220b\273\330\234N\275XE\000\275I+\267=~$<;\330\252H=C\276j\274\036\340\237\275\004\311S\275\207F&\274\221-\360=\214A\254\275.~\324\274{\222\200=\372\206u\274Z:t\275\034l\252\274$\233;:;\374\216<\367\204\344<A1\003=#\206\256<\243\376\244<\242\307a<\222.Z=+\253\274<\342\0239<\002\261\222\275#f\202\274\232$b=d\233\360\274`;\325\273r\261\231=\0168\'=wM\303=!\343M\275hoW<\277\017\026<\rL\013=,\357>=\325\216\343;\214\346\324;\222q\331<\317\r;=t?c\274\264\245\265<\237\337^\274\371\t/\275\r)\210\275#\202\017\271)\276#\275\030\370\273<\014x\312\273\203\333\321=2\005A\274\232_\366\272D\363*\275=3g;\305ZU<\213\341\273\274d8\225=\264\270\223=<\210\037\275}\230o<\277\014\222\274\254\231\364\274\305\224\233\275\343L\316<\312\256\271;\202\320\232\274F\231y\275\027\357\251;d\2260<\200r\251\274\240\246\367<\363lz=v\224\330\273r7\370<\035\322\023=_\245X\275;.\342\274\033\207\214<\216\266\254\274c\t\246\274h\300\305\274<\356\235\272-a\t=\224\372\303<\316BD\275&Y\307<\300K6\274\305m\201=\252^/\275t/\227\275\\\034\321:R&4\273\0240\216<X\022\324<\220v)=\3138\177\274\262\325\212\274\024\256!<-\260\016\274\306\322F=\253\257i<\016<\230\275\334j\277\274\256\207[=\217\036i\275\030<\206;ROa\275KR\334<\r\024\364\2752\365\316\274w\226\020\275\353=\n\275\230\006\255=\206\241\320;\375f\322<#\215\306<.\366+\275\276\003,=O<\200\275\303K@\274V]\321;\001\\\320=\000\317\247<\235\267j\275\327\317<=R\267\202=\324+\214\274\023\241Z<M+\220\274\002\t[=\255}n\275\030UU=\217\033\217\274K\232\000\274/\276\034\2735\262\240\274\000<|\274\355s\001> d\251\273\267\016\020\275Uk\205<7\367\005\275350;\343\201\316;\340\374\030;j\ti=\256s_<h3\212<\264s\025\275w\254Q\273\377L\177\275\370V\227\274\220R\322<\303\234P;\337Q\267\271\274\203\312\275\275\370\326\274\327b[;\031\361\311<\355\363\240;\311^6<\274c-\275d\016\240=K\234\364=\201\223M\274\345\335S\274\377I\'\274\255\237\257<\204f\321\273\'\024\212\274\021TC\274n+t\275\2503\317\274Z\3463=e\'\252\274vI`\274\'\304\000>+\364&=\276\325S;\220\377A=\245\020\264\274<\325\300<0\337\311\275\310\241I=z:\000\275\277\031\336<\2358m<\343\006Y\275\022\217\002>\300\247\375:\022\301V\275\340&\213\2759\213\212=\310/\305\274K\035\321\274\332;\243=\315R\246< \361\2119&E\203\275\315s\030\273\214$9\275i\350E\275\026(\021<H ;=]\3643=\n\2325=\357o8\275\331\3414\274\021\212L\275\325R\226\273\374\360\277:\001G\276<`Q\356\274\004b\277:\177\353\237\274\243\"<=R\346\r\275\031\207\244\275\235\231\013\275\020e\274=I\034\026\273\330\227\031=\237\230=\274\3050\272=\227\244\214\273\026\017\314\274\265\266\306<W\234\236=\340\257\n=\210\377\354<\336\203\t\273A?\215\274\244\025C=S\231\221<*\325\364\274\":}\275a$\222=-\006\270:B\365\203<^\372\225<\302c\036<5\356\321\274\3045p;@\010E=\006\347\034\273 \247\031\275n\177y\275\005\006u=\271O8=\013\364\267<\333X*\274P\276\225\275DuL<\010\366\350\273R\2639<\305\352\222\273\274G8\274TKo\273\342\225)=\013Q\010<\270{\220<q\022n<\023F|\275\312\016 =\364{\035\274\234e\001;q\241\n\275w\350\341\273Jv3\275h^#=\237\315U\274R-\211\275\376>\024\275#\016G<Hj|\274\336_+\275\325\225O\275\227\275E\275\222\236\313<|\270\300\275\236\021\206;\263\310V\275v\233\233=UJ/\275\336\231\n\276\312\226\377<|\366L\274~\033\333=\325\322,=iw\260<\207\345\374\274\376\246\315<\004\350\360\273I\373\222\272\n\220\310\272M\300\225=Q\373E\275\303\253\305:\261\031K\274\017\215\211\275\002\361H\275\260\327T=#\003z<?s\205\275[\210\277<\216\354M\273\324\nU\275\246c\224<d\352b\275WO$:\301\001\213==\"\303=}\304b<%nk\275\002\037i\273\316\236M<\237\017\224=(\030\242\2754\321\r\275.\3025=\006\366\014=\212\362?=\306\263\016=\001n\207\275\245\334\304\275\003\337\022=\227\325^\275\372\003\376\273\341\037\030=\215\334V<\361{\245\275jr\333\273\362\240x\275\331$\246\273\251\010\000=e\241\311\275\005U\231\273\227|\333;\257C\223<\025\005\234=\350\216\323<\215\006\253:UF\001=\363\270\300\274\025\021\304<\343\303W;\224\305P=\245\213\177= \202\204\275Yq\263<\343\014A=\243\237\343\274-Rr<\225\204N<\305},<1\245\340\273\260\010\327<u\013\260=%\247`\275\023\0027<\247~\260\274\237\342i\274\020U\301\275$\\\234\274S\030#=[\227O\275_\014\202\275#`\310\271\375\313e<\337<\240<\246\006\240\275~\352\330<\231\226q<\002\373f\275\016\352\300\275w1\023=\324\324\232\274\303OH<\275\'f\273\373\356)<\177\031k=\310\330Z\275\324\271\004<\000\031\221\275 x>\274`m\267=\336\241K=~\\\024\275\212\346~\274\343\304M=\226yE=\321G\264\274<\337S\275\322H\375<\367>\021=\276\354\224\274/\376\352;D\311S\274n:\227\274\337\3268\275o\021\216;A\'\010=\376\017\323;3;\t=\325\337\205;\207\257n=,@F\275\270\031}\2739\317\030\274\251q\222\274\203ju\275\334\214u\275\210\205\305<]z\034\274\321\236\370:#\301\034=8\203\265<\032\361\230\275PC\326<\262\013\227<(\337\r<\315\326E\275l\031J\274j\346\r\275\255\336f\2744\277\237<\363\324\345\275\311\342\034\275dK\177\275\202\257\244\274\3373\207=\256\204,<\217K\032=\273\352\032\275\026\356\326\274P\375\211=:\314\277\274\360\320\"\275\013#X\274\204i\036<\235\277\206=\327\203\235=\310\211^=\247L\263;!\r@\274\307|<=R\325\353<5\023\216=\030Q<=*\221A\274\316\247,=8\216\215\275\316NY=\356R\226\275\034\243\246\274\251\021\207=\320[\200=\226Y\207\275vN\031=_\306\256\274\225\002\007=\000\265N;\341\377D\275xE\273<\235*\371<\317l\200\275f\353\310<\327\007g\275\377y\250<5w\024\275\332\220\022\275`Q\310<\243\231\032\275\254\371Z=\236\034\273<\010rR\275\300.\214<\211$\035=\022=\216<\027. \275M\356\204\275\245E\231<Hs\276=w@\013\274\034\227\200\274\036Ar\275\020\301e=\347c\337\274\201\305P\275@\2051<*3x\275@\354\\=\305\350[=\314\354\017\273\375w\254\274\031\351\005;,\377a\2759\246\227\273\003n#=\003\033\240=I\327X<\261\322\207\2755\026X<0V\204\275<\206\263\274\200\265+\275\233\323\007\275W\303\225;6\3732=\261\365\027\274J\376e\274\023\245^\274\263tv\274\236i\374\274\303\234\034\275/\236\300=\373\241\203;\262F\007\275 \r\250\275\370\236\352<L\301\240\274\332\332r\275\r\230\352\272\014\326\307\274\272\373\310\274\343pM<\2454\230\275S\217L=$\244#<\014\200\330\2749\022\345=^\372\027\275UXI\274\365\362\243\274|\274\251\275\245\032\246\275\321\235M\274\305+\005\275\311z8=N\206\344=0\216\n=\026\033\221\274=\3507=\024c\030=\366+\324=\025\320\003\273\221\t\207\275Q^a<\"\256\225\2756\342\220\274\251\235\375<_A\326\274y\240\246<U\027\360\275\213\350U\275\343\2713\274i\305\231\272B\257\327\274#\256 =l\307d\274v}6=\207)\372\274\004\2306\2752\037Y\275\364c\204=\275}M=\244\275\243\275\242\\\367\274]\307\244\272\200N\334<b\213(<\271;!=K\224\245\275\\\024n\275U\006M\275C\261`<\216\023\224<|\024\276=\232\\\235\275J\275\025=\256rU\272k\034\311<\274&\007=\377t\216=\202,H<\237Z\355\274\2208\210\273\246 \237=\352\371S\273u{\315<B\224\253\274\243\023K=\212{6=g\273\356<\2335\272\274:G\250<\370\210\255;\365\274\025\274d\r\016=6^!=5\341\212\275S\373\360\273\025\244>=Z`-\275\2763\225\273z\201\000\274\321\245\217\274\345\377G\275\327e\277\274\264\274\204\275\\\334\335<N\213\263\274\315\355\003=L\227W\274Q2\266\2747v\022\274)\232e=\232+\007=\006\317$=\374\2773=\241\335\254<\006\023\257\273&\025H=\323\341\017<\n\025\035\2751\021\232\275\037`\244\274\026\030\225\275-H:\274H\304}=\006\215\346\273\n\227H<\313\305j\273a\031\300\273\202\250\240\274\241\252==\325F\235=\337\234 =\374\032\212=\342\324}=\264\254\206</\024\3129\252X\031;Bq <Q-\223\273\352\354\201\274\275\346\212\275Ml\353=u\267+=-\243B\275\317\252R\275\2410\214\274b\363\234\274\0313~\274t.=\275\375\252\216\274\025\037G\274\002\206\353<`\262j=\024\227#\275\350^\312\273%+\207\273H^\003\273\355\255\002=3bm\274\334}\353=\207\247 =\324\217}<%0U=\r\024\300\275Y+\331\274-\236\310\274\t\017\377\274-\234\225\275<N$<\30029=W\213\003\274Ht\220\273\211\314\273<\302k\030\275\346l\257=\006,\210\272\026\202\036=^\234\215\274t\265f\275\036J:;r\020/\2744];=M)\273;\327 \376<\372y\220\273t%\242\274\202\347k\274\245\355\245\275(\251\200\2751\250\006=/\021D<\241{\271<4\315\272<k\373\002\275\255\3707\275u\256W=\007\306\372;=\022:\273\301\216\212\275Q\030/=j\263\032\274C\373+;\014\332\320\273\247]\303=\320\017\214\274\325\256\251<\367\263e\275\n\037-\274\215_2\275\317\361\254\275\237\020\274\274\233\217\223\275\213\327~=\340\016\240\273\271\317H=\346\213\323\274\327\265C=\232\203;\2757x\276\274!\325\356<\307I\202=e\363\230\275\306\206\006\274\302R\251\274`\232X\275D\215\306\275n\002T<\360/?\275\376V\246\273\201\340\242\274\317\003l\275\1777\242=\260\202\016\274`\254s\274]\362\003=\376\265\342<i\244\027<a\010V<}\0054\275\2055\033=\'\231\254=K!\274\273D\335\222=\373\336\027=\2651e=\355D\021\275.T\t=\256\321\250<|\350\010\275\341\320\014<\031\246\271\274x\207\202=s\265_=\200B\233=Op\3179\317\213\036=}\3403=\237#\277\274\240_5\274\357\303\234\273\325\214(=\300\036\204<\350`!\273\001U\216\274\214\214\223\274?\237\326\274\304HL=\3307\245=@I/\275x\350\025=\t\363>=lC\023\275z\241\320\275\036\343_\275\364\245\257;\022\276\270=q\3632\275X;*\2755U\221=\344\256\307\274\365\304\345\274\006-F=\335m\210\270Q\330~\274N,4\27469\213\275\205\273\301<p)\367<\353R\277<\343\322\202=f\272j=E\300\263=\230\325\362<-2\371\274\255\0031\275\315Q+\275~T\216\27480\375\274\213\277R<\234\315K\274\236`=\274d&\223=\030\236\333\275\203\252\024\275kgL\275\353\274,\274\255\345\310=}e\362\274;Y\313;X\343\020\275\331&\267;\302\270Z<\2029t=\317\273\260\274X\3050\275!\361`\274f\0330<\007])=\034\007\017=\241,\030=mu\370\273\260\232A<\232\201\230=\001\273(=\312\232S\275\361J\356=}\306\025\275\2336\261=6P\201\274\034g\305\273\221\210\025=\344YC;\334\220\310\275\341\t\323<B\366\341\274\243\270?\275\221\324C\275qw\030\275\036\370\"\275\250s\000\274\346\332\032<\0173\250\274\317O\\=\227\375\010>\271\006\263\275\327\021\002;=\241\365\273\202X\020=9\365\006\275=\022\263\274\240hb\275:\364\324<.\251\265\274\032\344\330\274\237<\010=1x\235\275x\227\\=f\035\243\275\261\"F=\345\007\030\275\360Jp<g\337\010=2\321\033=\370\205\204\274\323\374\036\273\024\306S\275\006\271\000\274\367\2109=\004iP\275\020\361?=\266\235,\275\267P\037=\277O\024=\257\022\036\275\365;\036=~\256!=\227\026\362:\371!\010=Za\376\274\233\250\344\2747\323p;\014!1;\t\223+=\277\340f\275z\330\240\274\240\314\305\274\007\344Q=\346\035\257<\347G\263\275Rw\274\275\201\320\331\274\313\244\335<-c\244<k\240\272\275(\354V:3wm=\022\325\371<O6E\275v\341\025\275r\014=7\277\025P<f\306D=\257\355\204=\"\330\325<@l\014=Y\310\333\274\307\320\274=\267\032\254<\374\355z=\355\343\261:\365\201\225=\314_?\275\026mC=k\2014\275\247\014\005<[\230\340<4\337/\274qI\314\274\305\005\245\274\347\343\207=<\241V=S\\\302\274\377<\226\274\023\312>\275\032\251&\275\020Q\336;\017\214\224<\311\271\217\275\2730\241\273\3477\351<\211{p\274\351\354`<\334)`\275\024A\362<\276\341\320\274, _\275=\360%\275\016\310\322\273\252\300\304\274X?)<\032R\304;\353\245;=\035\321\221\274\327\000#=h\260b\272E\014\222\275z\244\004\275\214f\212\274\031\252\026\274\350d\007=G\232\276<\323\001\200=\266\027\311=)Cv\2743\024\205\275\300vT\275\245\204\366\274\177pI=Y\270\006\275\363\307\254\275]\211\220=\306\355\002=,\351\246\274\320D\336\273\341i\024=\357\003\205;\306\201W\274y\2002<\246\023l\274\372l\212<3:\322\274\251\202\330\274\224\356\273\275\204\307\003\2759\'\233\275<8\237\274L\201\233<\352\254+:8\213\311<\3069f\275\205 \317\274\277)\002=\2325\321\275\352\233\356\275C\317E\275\263\344\240;\211@!=\336\247\261\274\354\373\267=\317\301\034\275Dwg\274\270l\275=\211\212\325\274v\270\314<\206\273\034\275N\006r\273\261\204\032\2752\343T\275\231G\274=\230\231\2068\003c%<\273T\227=\342\373\351\274\344Z\321:\305\252\215\273h\t\273\275B\0232=\374\277m=\273 ~\275\243\274\240=\"\322j;\r\337\303\273\263\000)<\237 \346\275\306S\244\275A\013o\275\202\017\250= \302\321\273F\211\337<\007R#\275\321FV<P\245\022<\231\031[\275\262e\361\274_\240[\274{\260\217<W\t\227\275\316#39?&-\275\215\343\236\274#\216\374;\237l\272\275\034\325\215=Dw\335=j\327g=\026\3065=\317\021\361<\203\353z<\037\356I\273\022.\234\274\264\264\353\274\355\336\224<\365\354\013\275\236\006\306\274o\214Z=D\t\342=aq\021\275\366\223\242=\204\205z;\236\343A\275\027w\227\273\364\355\014=n!\203<\030\346S\275W\365\235=/H\343<\347g\007\274%\2335\275>\361\252\275Zx\003=\327n\336\274\364\231a;\301^3<X\353\366<4\017,\275\272u\273<X\245N<>%:\275Y3\333;vR\207\273\361lG\274\026\312\300<\347\354\305=\225Z\301=3\363\026\275aC\301<a\007\302<\247\300_\275D\323\034\274\024\321\204<QD\006\275M\375\242\274e\362\024=/\364 \275\325j\r\275\263\027\317<7T\210=rY\271<\262\313\035\275\202\225?\275&\006\300<\n\304\305\274Rn;\273I?K;\354\032o<\344\301\320\275\013*\272\272\336-\034\275\261\206\365\274#e\361<\335O\376\274H\245\216<\230\207\014=\\P\330;\263w\315\274\202\301\006=\261\242\333\274\024\311U=\354/\022\275\240\331\217\274\016*n\275\376\256\243<u\tv\275k\006s\275\242WV\274\306#I\275\306\210\223<\273\241\210<\203\372\323\2742\032K\275?\2424=\316\356\214\275\226\202|\273V\032F\2751\231.=)EC=Q\365\207\275I\262<={2\252\273\022X\250\275\316k8\275\354\311m=DG\010\275\272;\030=\022b\305;\216\217\265\274\326\211\226<\207\021\236;\007YP<\255D\r\273c\245\\\275\241\350W\275\301\351\246\275#l\005\275\3417K<\336x\302<\24281\273;\265\274\274\323JA\273o\036\204=lM\230\273\214d:\275[\244\004\274\230db\275\303\347\205<\364\010<<\240$\270<<FS<\037\3111\274r\310\034;\274\273\363<Ci\237=\217\037\231\274\005i\270\274r\005#\275$%$;?p =\314\354w<3w\272\275\005\351\032\275\nY\n=i\302\t\275~\\\300\274\3526\r;\333\320\036\275\222\'\216\274\013U\003=\256N\004<\n\333\217\275\260u\233\274\356-\271\273{\236B=\274)\303\274(\366\332\274\210B\337\274\262%\023<\263\273\233<\312\255\247;H\332\245<\276:\325<;.\200=W\276\207\275q\372\3169\206\242\200\274\237\242\273\274A@f=\266\375@\273\255M\007=\263\376\034\275)\305k<\005x\002=\270Jg\275\257\336;=\243\272V\274\330\236j<$\277\310\274\374\323G\275\311\250`=u\274/=W@/=\2745\262\274\274\277\343\273\033\221\004=A\355\016=\353\3222=\017\216\317\274\177;\237<\"{\344\274\225,\251\273v\307Q\271\347\n-=\215\370V\273>\363V<a\246\333<\026\023\237=(5\356\273\233,\353\274\t9&\275-U\030=Y\313\231\274\335\213%\275\251\203\225:\251\352\233\275\300\203\267\272_7\366\274\343\031\231\275\344P\242=\316\215\003=\035B\\<\271\304\273=\375;\312\274\313\237\363<?\230\362\2736\344\005\275<\310\240=`,\257\274Y\\V=\2334\215<\222\301\316<\211\321$\275\005\324\222\275\250\0353=\331t\317<\325A_\275\320i\350<\201\276\341\274i\225\354\274\241\2621=\257\212\326=a\237\030=\250\030T\274D\326\336<\325-\203\274aoB\275d\365\n=v\220\330\275\363\235P7\372\"V\274\340~7<a\320\"\275\276\267\340\273B\261J\274\376\321\231=\030\223\327<\324)\205=\030\022:\275V6\206\275\017)p<\334h/=\300\242\020=\315\344\000<\314!\201<f\2147=\261\270\277\275\244\340$< \302\033;ZIi<\235\027Z\274\236\317\233=j@A\275w\2745=\024\355J\275\264F\323=\340\270\265\274\372\342\252<\025)\025\275\221\354\315\275lG\021\275j\357\221<\307\017\261<\t|\202\274!\300\311\275\237\321\322\273)0\245=\312h\235=~\317\013=%\177\t<i$a\275&\361#\273\370\344\007;\336\026\236= \315\007\275\324<\t=\345\212\022\275U\357Y\275\225\257\217=\177\207\021\275\221\247\263\275s\255\027\2740du=U\266\306\274\t\261/\275%\346\216=7\000m=\250\355\017=\205\320\204\274(\212\177\274DMb\275\324\205\014\275\323\253\366\2749\357\335;\214\244\255\275\362\t7\275\362#\254\275\324\224\034\274\220\375\023\2741u\363\273\376\227\016\2751\207\024\272\224\235/<\366\3670\274s\351\241<\021\333\023\275\263T\317\275\323\0306;l\304\315\274\270\230\200\275\247\343H=q4>\271\212[!\274\333\307+<\345\257\236=q\212\255\274\272>\032\275\324\263\214\275\261\200a9]\347u=\217Z\362;\204FZ\275\264\347\202<\2475\310=}\013\230\271#\223i\274IEN=\030\231\004<\312y\326<\013\016\037\275\347L\244<\253/\010=\231\334\351\271\346&\215:\311Gf=\221\341\324\273\366\022\260<w\030J=\321\363\205\274\311\030C\272u\343\223<\330\250\366\274trS\275\010\217i\274\345\"\273\274\353<\024=\363p\024:1R\213<|\345~<\306\023Y<p6\257\274#w6\274\030\010\334\275\035\355\255<az\266\272Q1\267<\250\230\215\273\230\000\370<|\373\372\274\354\227\336\275\230\271\200=<\275#<\246&n\275\355\245\023=\337\233@\275\032<\001\275F\233m=y\340\221=|\264\033=\365\234\353<\230\370\"\274\367\231~\274\000\004\224;\003\273\021=\257\220\226=\2368\t\272=\225j\274\016vB\275y\310\'\274\327`\204<_\3323\274\221\272\211<\352\304g=\237\003\236=<\377~<\237Vi=\257\354\037<u\345\027=J\007g=\273\\H\272\305\0348;\200\366/\275\234s>=\310`\021=oR\234\274P\000?=\203+\177\275\317PQ<\270\346F\274\302\224M\274%!\253\275\021\267\231\275P\214\005<\177@\321\273}\364\000=?\233\335\273$\233\320\275\321\313\363;x\"\216<\267\333j\274t\017@\274\225\032\216\275Y\343\375<\336e\230\275\032\352\223\273O\343\202\274\270\245\224<s\247\365\274\264\377\271\273d@\254\274i\310\341<\210\360y\275e\221\347<\207\004x=\006|\303\274\277\312\t=\023x@\274\243[\350\273u\014\211\275\177c3\275Q~\327\274(\205(\274~\226\016=\202\225\317\274z\004\313\274\377\302\033=\231\001\345<*Z\215=\351b\312=_.{=c\274\367\273\204\037,=\327\035y\275\226\003\311\274\006\3563\274\275\212\212\274Hv<\273\211\344w\275\232\207*=g\201$\275\303\210\271\275\331W\367\274 \303\316<`\366\374;\216\330\210\275\367&\r\275m\344]=\333\234\267<\000\335f\274\371\267\207=M\257C\273P\026\231;mw\000=\371\360\004=\340V2\273\323\206\223=#^\323;\030W\217=\3207\233=\'<\234=\006\221\n\274=\243\363;\014A\257<\001S\274=\035F\t=\020\203X\275r\215M;\014\231\312\275I\223\260\274\006\250\323<j\233\325\275}\270\273<L\355\215\275\331\365\227=\177\225\217=w\344\340\274\375\366!\275\275\225g=-\206\215<\207\305\307\275\273\314;9tZ\307\275]\355\256\275\244\005\262<\340:\357\274\365X\033\275\341:\220\274z\300\361;\302V\234;q\314\036\275\006\362s\275)\366k<l\302]=\252\021\200=\265\200\301;\325\266?\275\310\224$\275KF^<m\276+\274v\002\177\275\233\272\262\274ny\245<Z\235c<#\2719\274^\010\274\273\277\016\200=i\234P<\344\034A=\322F =\256\271\367<\016\325%<\306}!=\311\206J=,\357\t=\2038\266=1$\370\275/\205S\274\001\300\240\275\270\247\376<\211\300\375=\301*\326\273\251\033\234\274\0322\375;s\276\310<i^\212\275\035iN=\024\'\240;\240\353|=f6\025=\375%\346<uv#=\347%P\275_9\231\273\027\231\222\274\026\001U;\264\313b=\336z\316\274\300$\010=\374\303c\275\310\025\r=\320\300\020\275Y\301C=\3637D<\004\220\245\275\216\265\217<0\342\206\275\244\013\232\274\325-<\275\225\206V\274\3360\035=\327Lw=`\017\232<s^\266\274rJd\275\215\344\344;V\330\t\275J\034J\274\312\265\267<w\366\215;\016\363\017\274\236\332\254=\"\357\372<A\246\252=\215\240?<\235\227y<\303\006c\272\002l\326;i\177\373=\030\312U<\361\034\254\275\273\032\267\274\363\223\214\275\330\027w\275se\240;\250s\363\274O;>=\224\2028=I\3062\274\031\231%\275\211?\351;\264\215\202\273\366\267\333=9\363\003\275\324\333)\275\303:\177<r\232/=\242K\223<\361\037\214=G\324\234=z\262\306<\210F\025=\227\273\'\275\236\3547\274]\351\313\274\031\204\002=\252\303\230\275\352\275\246\274\227o\371<K\242\347<_\366\356\273\207!\276\272\023\223B=%\276\001\276\356y\255<\005\260\014=y\275\242\274 \234v\273>X\007<\010W1\274\313c\216<{{\325:\237c\025\275\252\251{\273\004K\301\273\364\215{<\364^\317;4\357\200=\366S\"\275\027\221\203\274e\205_=6\370\245=1\r\215\2759W\305;\206\204\240<`hG<\027\371\250;\031.i\275\320q\235\274:\271\025\275\215\220\235\275]+\213<,k\223<V\014J=\260E\204=\217*_\275\344\034y\275\376\221\207<\343\345!<\352{-\275\245t =\364\307H\275\0008\242\273\032\0137;\325\222\212\274\245m_<\267\240\213;\266\256O<i\366\234=\374\371\201<\210\037\310\274\335\246\304=q\321\026\275=\345\201\273>8\230\273\360\016\251\273\217\344\037=\361\331\217=\260\027\010:\255\t\200\275\373\254\246\274E/|=)\237\275\275\316\354\240\274C\016\\\273I\245\010\274\267\222w\275\000f\337=\326\354\360;\203\375E\274\225\013\020<TG\217<\377\221\030\275(\3141\275K\365\366\274\0339;\275\260I\013\275\206s\'=}\212\242\274\246\347\210<4x\034\274\246\3755\275\314\227 \275\341\033\276\274t\317\225=\310\024\253\274\320 \217\271\334g-<\013\274\212=\n^\250<\373\332\305\274\320\217\341=\201]\325\272&w\365;Dz\276\274\224i-=\005\2448\275g\345\254;\251ib=\325\313\265\274\357\376\227<;\3662<WI\374<\357\023q\273\225\"\227\272\013\351@\274,;\036\274\317\221`:\245\232(\275+\003\333\274L\250O=\255\333\355=M\234\354<\277Q\304\274\276#\202\272\2503\325\274\004\264\374<\254\"\305;\303\017=<\302\365\\\275\000\343\206<w&\273\274\266\025\221=\017*\345\273\212M\311\274\357\326\241\274C\201O\2743\371C=\202T\010\275\311*)=\364\252\312\275\'`?=rd\224=\305\0344<\000LN= \030\351<\350-\364\273#\037\214<\030\272\222\273]\251\034=\364\230\201\274\366Z\210=3\362X:\000\202U=6\276\250=\202[X\275B\033j=\213\277\246\273X\300\037\275%\372\231\274\260l\021=\"\361\316=\267\220\252;X~\315<\347A\265\274)\300\031\275\230\252j<\300,\244=\\\336\214\272\376\236\255\275y\245L\274c\316\007=\rG\005\275D\252B=~G\005<^`\241\275\3246>\275\340\305d\275\242\323\346<d\010\212\275\272\037\300=\0061\350\273\323\325x\275\222g\322\274\377\233\203:\203\010\025=\301\342\270<k\236^\274\026\257\210\275*Q@\274b\366\177=\313gZ<#>\270\273`+~\274\373\037w\274\226\\\033<\253\202$=w\306\340;\331q\222\275SPH\275\274\203\240\274\322\205\344\274\266\031\366\274K6\0349S\215\260=\203\375D\274\3475\307=\013\333q\274*H\251=N#_=\236\002\225<\357D:\275\265\261\241=\216\272|=D\214\207\275`\010P\275l\233\016=\273\316\375\273B\363\203\275N\016\347<\376<\201;\2352\207\274\366\003+=y\304[=i\323\204\274\315\256\003=_\367<\274\020\315w=\205\342\215=\207\343\371<\232Z\251;\277P\031;\364z]<\234\324\256\274\373\354e\274f\220\331\275\240TO\275\267w\"=~\0041\275\266\360J\275\257w\013<a!j=M\3647\275\253Y\004\275\211\231B\275^\374\266\273o\350\312:ZiS\275\314z3=x$\246\274\240\027\234\274p\262j\275SS\021<\224\027\372<~\353\014\275\032~v<,\207\203=\200\377\022\275\306Av\275O\336\027\275Rh\206\275b\340M<\306My\274\362\007\320;M\326\302\274T\336b=hu\335<\307\027\255<\277\271==\005W\302\273P\207\232=d\361\223=\217\371\n<\305L\365\274\302\270\2349\001\363\215\275L\252\264\274\376\247\340\274\314<U=\177U\\\274\335}\341\275 ]\254=\205ZF<eK\216=[]\351\274\366*\246;s{*\275\217\342\331=5.A\275\325J\334<\215|\001>\261r^\275\302\350\233;/\257\305<`\324\233\274\271\361A=\'S\215\275nj\370\273.\221\266<\317\373{\275\272\277\001=\016L\267\2747\377j=\303\355T\2730\332\003\275\020\351\007=\227s\224\273\354\362\352;\017l\345<\214\030?\274\207m\224<$\214\207\275\030m\251=T\340\247\275\212\241i\274\312\343\t=<u\216\275\024{\t=\251j\371\274;\034`=\322\242\002\274\320\035U=\234\367\034\275\225H\303\274\341W\334\273\315\255a\273\272\313\177;s9W\275H\376\244=7\235\201=\336/\003=h\266\251\275|Q \275?\253o=(0-\275t\215T\275\037\251\257\275\346\263\227<\370\333\201=<?K<Z\312e\273\"\3734\275Mh,\274\372`C<\331d=\2757\261\022=\356\241\002<[\230b=/wC=\252\027\016\273k\251`\275>v,=-\274\n=9\272\253\275\r\004C=\205\353\206=\301\214\032\274\354\251U=\271q\362=\352\327\236\273-\344\225<d\376\204=\226r\224\273\240\247\016=\366C\235=su\343</\243\033=\331\337t=rL\341\274M_\206\273S\031\000;61\251<\224\370\244=\032p\215=\000\351\n\271\337\276-\274\006\375~\271\350\346\251=\020Qd<\360\303^\274,/\375\2721\345\030=\032>\216\274\375\177\003>$j\202\274u0\036=\177\360\t<\230\363&=\r\216\"\275$\323\\=\303U\200:}1{<\341A\036\275\323H\356\274\341\220\014\275Hg\032\275\356\2563\275\035\2328\275\246p\204\275\267X=<\304\016\322=\\\272\027\274\312\2024\275}la;\365{\002\275\212\324\013<\334\222\320;\330V\206<\207\304\271=\231Y\036\275-\207\215\275\247\206\303=?\365\304<\232\274\037<\340`\340\2742\362\'<\005\\=\275\334\377a\274\341\222\246<\332\372\336;\221\272-\274\356\312\233\274A\027\265;!FV=48\202\274#\322\374<\343\035n<\014\254h=y\205;=\311h\365\274t\356/=.\371\207\274H\020\253=Yj*=\322s\031\275\016\307\001\273~Z\037<\251$h\275\231A%=c0\r=\351\2336\273\016\005\271<\031C\254<\'\211\213=N,\004<\020\321\'<\243\233\216<\031\347\312<%c\014=-\266;\275\377\026\347\273:\227\255\274\254Qw<;N\304<b\t\264=\017;B\274\223Z\261\274)\357?<\344\312\313:b\200\027\275\303(\247<\r\no\275\272=\010=\334a8\275\366\200\225=x\310\r\274\222,\322<e\231\232=\222\3331=D\351]\273\267\261\n\275\033\334\372<\233\324\242;E\237\211<\247\305\006=\213\033\025>\026\033\017\275+\330\317=\340o\232\275O\021\255\274\373\272\025\275U/4=\332\342\000<\312\312A;;\305\014=\351\203\255<\201<\274\274ixX\274\337\0138\275?\244\340\274\n\335\264<\226-7=\271\2259\274\\)\327\274\201\323\025\275\346\310q=z\205\302\2758\214/;\237\210D\275c^#\275V\035H<e\361\020;\265\326\271\274\270~h\275\347\307o=\275\200\235\274\236\262\034\275\256\025\277;i\255\017=\312y\"\274\345\032z\275\352AX\274\002\332\020\275\355\030\'\275l\222\224\274.\317\212\275\272\365$<\203\321j\274\221h-\274\276I1\275\243\2743<\320\2513=\035R\307\275I!\014\275[\373\246;AP\226\274-H$\275\022\304\211;\357#\246<\237Z\217<\354]_\272JfP=@:V<X\227-=9\347\000<\251\205H=\304\241$=\265\254\335<U\372\254=\372\210\273<\303\355\n\271d\366\323=\025Kg=\307e\330\275\335a\375=\032V\264<\363\026\265<\354~}\275~\nb=\2456\212\2742Ac<\365R\030=\r\\\306\272kS\337<Jxw=g6^\275\322\240>\274\353\336\211<8\262o=\233\331j;G\217\327\274\272\256)=%_\254<\352\216\274\274\356\206b=@(\216\274\350\013I=\235\010R\2726\360\275\274\030\261\271\275d\311\n\275H\331C=\321\275\254<v\247\224\273\266S\023\274n\246\223\274\242\212\344\274\rT\342\273V\264\230\275\360\231E\274\"\214Y\273\225*\225\275\367\033\262\275\231\213 :(k\206\274\311f\203\274\302\233\275<B\233\204;~\'8<\234\240\316<!\312\017=\252\255\240<\224\034\036=\201Jh9\323\260\021< <s\274\037\365\233;\017f\236\275&\n\373;\222au\275/\322J\274&\215i=Y\274\324\274\217o\256<\266\016\007=\351X\221=v,\312\274\236B\323;\257\024\275\273\232\021\037\275\333\317-\274\330\267\304\273\202\376\265=SP\262<\240\374l=\3566`<\010\3672\274\270\361d=%=q=l\336\"=K\246\305\274\356/\230=\246\371\001=\300\323\245=<s\206<\253\337\024=\331\023\217=\345|\254<\254\032\034=Q\355?\273\354t\'\275\367\370\023<\\\374\t=\275\343<\274\371\020s<t\355%=\345R\336<\014\317k=\220\014\201=F\243\234<<\210%\275\212s\355\274!2\242=R\204\001\275g\032\237=\306\360\215<\2127&=\256\264\373<\277\252H<\205M<\275)\374\242<\2603<<\230\315\260\274_\363\330\273e]p\2742&\007\274\341J\027=\227I\177=\374\351\316\274\311q\n\275\353\311\264=\353\267\247\273x\277\336\275\037\344,\275\017\236C<hw!=8t\340</ \252<\274\363\310<\351\365^= [\254\275\325\021C=\001\024\371<1\237D\275\3602+\275\204\324\273<\325X!=\\\206\314\274\347\211\211=N\331o=\':\203=\007|\337\274\315\366t=^&\321\274\251;T\275\321\211d\275\224o[\274\326R\204\275\300\314\335\273\217\240N\273/\227c=\037\352>\275\302\246E=L\351c\275\034\037\330=\035\014o\275E\2508\274\224\351+\274\016\314\004;bL~\275\215G\203\274$-\244<\217\264\243\275\307\'\340:\236n\206\274\361\3539=_\177\374;xs?\273;a`;J\371\214\274&\t\246<\263\346\n=\305\224\006=\303\256<=J\225X\274\nT\264\273\363\273\204;\211{\302\274\357|\336<\2755*=\275w\304<\300\020\227=\224.\"=p\347q\275\010\322\000=I\274\344;\252T\315\274s\311\265;\275\"^<>\263`\275\211\2236=l\371\370\274\221\350\2439\001\315v=b\3505;Y\033\373:\270I6=\377\036o\275\0030\373<\355q\'<n!\"=\256E\204=\305h ;\361K\252\274\321\375\014=\374\313\215\275\242qA\275\376\026L\274WD\232<\362\026\341\274*\361\236\275\234\237\036=\021\331\220=\370\241\300\274\207\372[=\211\010q=o\002\262;\320\021\020\275\260\313\221\275\216p\363\275y\222\326<\325]\330\272\034\371#<40\223\274\341u\215<\177D\356;~\214\205<9\322e\2745\366\304\274JT\233\275\201\310\273<\002\026b\274?r\242\275\334K\037\275\305x6=y\003\276<\323\351i< \225N<\016^\232=\254s#=\177\274\352<vz\325<T\r\201=\023\354\213=\037\2449\274\247\225\t\275\032\025i<\373{J<f\200q<\262\262+\275=:\036\275\017\212\234\2741}\232\273\237\227M\275B*\211\274\017\365\021\275\230\216\340\274\311\306\007\275S\262(\275\257sI\275<*\023<*\325\342<\251C\"\273$\304R\275\346o\266<\n\345t<\342\3510\275\210\342D\274\310y@=\324\376Q\274\362\245]\2750p\377\274}\006\375< \244\016\275\264z!=\217\275n\275+v$=\255dT\274\001B\206=\333\230\301\274~\354\220\274\225\"\304\274\214\240\265\274\370\247M\275o\336\002\275\021:+=\005\007S=\361(D=\334Kx\275\345\201\202<\345X\335<\213\"\250\2735C\002\2733\033\016=\227\214\016=\251\231\274=\177\221\237<Y\225\264\274\242\252F=|\320H=H\350\333=\363S\254<\255\272\001\275\372K\333\274hs\345<\355a4=\037ub\2752\253-=\246\250\333=.\014j\273\036X\007=/A*>\306zs=E;\254<\312\205 <\325\014!\275*n\363<\264\177q=J3U=\000\364M\275B\222\245=\367\2059\275\2515\231\275m\360\\\275&}\222\272\302Z\332;58a<D0\243<\3775\227<N\241\302\274_\221\\<be\007\275\251g\204\274\'z\357<\336\356\223=\310\346\262\274~;\021\273\264!(=\335U\261\274\271\3604\275\271`\234\275.q\200<\214\310i<\023\244\373\274K\223}<\2067\205<\307\237\021\275`\353`\275X%\022\274\314\372\021\275\301\231\360\273\302\022\257=\242\005\200<\265\210\276\273k P\274\367]\340\273\320\035,\275\003\367\021=\336\225\371<\325\363\262:\374\316\360\273\300\315 =\342;/<\311\005u<\305D\254\274[@\242\274\235\347\016\275\'\356\021\275\306^:\273\026\375b\275B\376\266<\271\244-<\200\202\327=a\270\250\274k(G=\034l%<\373\271@=\370\346?=U\362\264<\227\337*\275\251\326\n=\370\311\374\274U\350\362;\200\022\032=@{{\275Q\014\200\274L_>\272\265Z$\273\311x\212<OYG<\"\302\025\275\r\251\240\274\343X\241<\273\321\033=n\3333\274\277\220O\275\302\357\022\275hL\251\275\330\275:=\304[x\274\265q\003=j\024y=\024\303\212=\030G\323<\206\336\332<%z!\275-\307c\271)\361\010\272\335 \036\275\325\340\211\273a8\037\275\346\032L\275\350\361\316<P\215\330<\311\222x\275\202\212\314\275gh\033\274\346,\333;*-\305<\266N\030<\322\242,\275\276\r\270\275\017m\002>x\360\204<\020$(=\367n\254=\233\331\312\274\224\276\027\275\2037S<\357*\344\271u\010Z<\325\321^=\322hn=TFp\274\324\302\232\275\030\026\205<F\031!=\031k\n=\270\331\302<\020\234:\275\205^H\274\021;\372\274\242\335S\273K%|\274!RD=\016\244);]\272\304\275Y\362\207<~\263\203;\261?X<\021c\016<\205\200`=8X$=K_K<<\264\241=f\034\034\273\204*\221\275\"vI=3\262\337<\231\030\214=\322\375)=\004_\214=8\337<\275Z+\266<\026\251\270=\260|p=\3234G=#B\312<\353A\273<\336G;=\221\'9=\017\242\253\2748\247\220\275\334\277k=\357\352\345<\330\336\260\273\270\021\222\274/\265\000=\014\325s;hc\033;\256\200\234\273\224\034\222\274\033J\035=\035by\274jN\217=\223\340/\275\370#\257;N#D\273\014\234\264\274\250\301\355<C(E\274\264)v<\034\377\002=\204F\240\274\217:\033\274q\203\314:T\235\r\275\252\024\027=\034SD\275\000R0<>g\353\2732\241(\274\304U\007\274\367s\007\275\243\360\255\275\345\255k=\021v\"==\377\023=W\037r<\263\005\005={/W\275\0330\026=\311:\017<\350\tT\275\345\377\347<\022\214w=W\001E<+\334\221;\003\374\035\275j\006\302\274\256\274R\275\244\306\310<\331\000Y=\245\342\201<s\244\005=\203\265\234=\364\351x\273\203\255j;\311)\035=\020\261\031\275\275>\301\275\232\236{\275?\325M=o:\246<\026#\245\274\235$F=\323!0=;\232V\2755\\\214<\314\0037\275\225w\351<\313\226\252\275\240-\005\275\205\227\316\275|\323\200<GC7;\371\240M=@\n\316\274p\206\026=\326\351e=lT\221\273\374\0315\275s5\332<\224\347K=\026|C=\347.];Y\257\2249(\\\207<S\306\247\274u\006Q=\340\001\303\275aZ\0107\244&\247\274\'u\205\274\027\376\272\274:\270\372=7\331\327\274\031j\205\275%\244\274\274\322\214+\275]Y<\274\347a\034=\346\177\342\274\2079\200\275\274\232\361\273K\215d\273\255\'\215\275\304\240L=\003\331\234=\023\027\356=\257\352\024\275fd\223\274\372\305\232<\370e\214=S\344\277<\323;\014\275q\334\253\275\357\'\"\275)L\223\274\371u\036=\314\325\376<\340s[<d1+\274\233C\005\2755Cy=\312\t\034<<\376\256<\003\242o\275\330u\201=(7\362\272a;\314\275\003p\204\275\325\310\346\275ff\345<\235F!=\344G\321=\336\226\300\274\254s\246<\360j\261\274\315\223\222=T\0378=\237!\204<\333V\275\275\346\353\t=^\300\240=\243\332t\275m\224\213\275\007\325\275<\320\325t\275\031\257\235:|S\330\2755\262\267\274/\323F\275\321 \336\273I\351\214\275D\222\235=l+z\275\2376X<\207\373\215<\006\303=\275\351\272\354<\3663\300;\r3\206\275\006\207\310<\253\300r\275\373\313J<\267\3460=M\332\334<\'\254^<\006$\314<\274\326\215<\307\nn=\001\033\003=T#\373\274\224\032\211;\020\336\203\275\355\327\254<[\365\232\274Jz/<\232\335\313\275\030ZT=_\307!\275:\347\272<Mp\254\274\343\323M\275\235\033\373<x\335&=\222\271\201\274\334\230\234\274#HF\275/\302\310=\202\350\255=\315\317\371\275\310\277z=P\004C\274u\257\027\275\261]\214<yF\210=\031\264\032;\r8\314\273z\375\206\275\245,\326;H\260}<\314c@=\304\227X;y\267\220\274\n\237\004\275F5\300=e\217\333\274\357\215\005\275\276\301@\274\325\003\017\275h\323\007\275\264\264\313<\314\325\340\272\003\330\003\274c\2043<=\355\235=N@\243\274C\322\225<o\354S\275c\330\213\275P\311\204\274H\001L;\253p/<\355]\221\275\025\303\264\274q\345\356\273j#\353\2741>\227<\216W\221=V\334\243=\010\335\"\275i\362\244;\351^f\2750U =-\204\224\275\316\256_<PG\222\275\036\021\221<\357~\213\274.\327w\275\366\226\220\274\324\333\010\274\243\330\200=\2425\010<`\224h\275\237\351\340=]\304T=\r\245J;$\r\367\274\000\331j\275\027\215\003\275\345\327U\2754\373\216\275\337C\300\275\306\216T\275w\205z\275\327a\\=\343\032\037\272\303/\304\273\264g\255;\253\362\032\274\006\013C<\221{\354<\246\314,\275<\267\243\275\240b\343=\207\033\375\274\365\217{=\025\342w\274\240\356\000\275M}0=\024\345\000;\026\254\210=1\265\311\274#R\036\273\236\336\245\275\237\227\257\274*BF\273=\007\262\274f\246\373\273\300\226t=\360\245\262=p\302\224\274\223ha<\325\234\253\274\345\313\253\274\332,\256\275\360\224\212\273N\326\205\275\"\224\017\275\021\225\206\274\343\3558=\r\341`\275\240\025\311<%\016\223\274\024\232\'=\022\373\211\275\325\3726\275\243o\350<\276Q\211\275x@\263\274\244\233\336\273\344\321~=\345\213\353\274\032\262\205<E\002\234\274M\300\033\273\371O\265<\346W(=\317Y\340<\"A\036<C\336\007\273\243\215:<\263_==\002c\263\274{6$=2\3132=\027\204\235\275\n@N\275y\252\244\275\3061\226\275\301\2612\274\321)\013<I4\035\275\205\210@=d\231\014\275\245\206\321\274,*\n<=\250@\274\216\343*<\233w\326\274\017\357\230\274\024Id\275\"\312\200<\270\310\333<\351\345\3649\361\362\376\274\302\371\000;\351|\341\273\222[\336\274m\241%=\0048\345<z\361R\275\254\372\025=b\352\213=\3319\010=\266\335>\273\001\0170=\003\207\t=\320\371\230=\343P\002=G\007\251;|\361\037;N\245\000\275\257j\025=!\016\213;\325\360m\274\000\272#\275\\[\034\275\366\033\206\273\252\261A<\263v\302<;\2321\275\223\336&=\3122M<I\363z\275\226{+\2754Z\350\274\230X\277\273HRt\274\210\2046\274\351\260%=\376j0=5\337\351;\317\024\263\274\224\325\376\275RS\274\274\177\214\005<\364dH\2747\351\322\275\301\212\205\274\230\036\314\274\276\214\270\2739?J=\332\346\373\273\337u%\275\300\251\353\275\037\375\277;\020\0308\275\273W\256=\272\376\000=r\260\263\272B\347P=\247\020P=\267\360]\2744\320\007\275E\1770=PLl=\352G;\274uP\215<\241f\366\274\245 _\273\377\004G\273\3744F=)\343\311<\2759t;\245\257\240\275\206 L<`=\023\275\005\003\330\273\374\324&\275\217\312\340=)\037\372<uu\372\273\t\0014;0\r1\275\275\t\316<\310*/<&\264\214=\202\3708\274\333\002=\275;\263{\272\336\352t\274/\340.=V\365\002<9\3730;+\374G=_\227\376\275\2322\"=\2036\036=h-A=o\276A\275\205\352\312\274\002E\024\275\330\343\334=\221\032O\272\302\361\022=\352Uu=\324\027b;I\327M\275?i\231=&\302\247\275H\305J\275\233\303\227\274\204\300\277<\021\333j=\206\n\037\273\341\361K\275\222\n\201=\331\322\240\273\322\243:<\252\' \275\374\312\221\2750\326\247<\246\232\035\275}\360 =lK\336\273\002\205|<\005\214\337\274\\\241\002\275\200\036+=\327\240;\275\rMV;(\260\226\275}\210\340=\000s\215=?|\023\273q\254\010=b\375\255\274\225\344$\275+\313\000=\377F\001\275\'\316x;-\004\254<\252\027\305\274\225d%<_\004\304<\361\234\254<\247Ds\275\265GD=\224Z\033=\347\\\243=\010\205D\271\034B\223=I\036\252<\013j/=\271\227@\274\357\324A=L\014\337<5\322\"\275\017i\356\274\024\022\241\275,\0353=\235z\231\274\374\203\331<\347\342\212<6\264\352<\222\356\035\275\302\300\334\274\266\205\253\274C8\322\273\221\343\032\275\200*\206=J\0216\271\216\033\241<\304\207\320\274\256\177\371={(\007<\016\242\304\274G>\206\275\242\365\367<\254J/\275\306c\272<\360\006\005\275\255\344,=\221\003\020\275\322\243\331\275\\\\\347;iU.\275\251\3446;Vo\212<rX0\275\377C\024\275\223\005:=\3224w\275\374\037\"<-\207\010=\300\177/<<F$9E\371Q\274\200t\317<\261\010\233\274)\273\310\274\364\205\247\275f\263\327\274\013\316N<\370\367\234\275\355\356j\274\037\257\257=E\366\346\275lF-=ZYA\2757\244w\274E\023S=LQU=rJ=\273\020\335m=\2506\363;\211ZG\275k\240\305<\354oq=A\234\243<??\313;\326\0142\275\026lW\275\n\021\223=\013\020,=\317\n\367\274\223\211\300\274\317\273\203\274\351\311\213\275M\300\311\275\336~u=\010F{\275\204^\305:\343\354-=Gi\345;+z$\275\365\223-\275\355\2412\2759\347\235<\177\314\031\275\022\203T=\363q\276\274\223\212\260\275[\336\211\274}\253G=dw\266\274s\233%=ai\027<\005\323\331<o\207\227<\022\250\306\272\365\202\204\273\252\370\231\275\022\005\241<6\354T\274\361a\204\275\247\252\266=\267\t\206;\301\223W;G\253\265<\265\021\201\273\024\325\207<jk\\=\206*|=\256\327\323<\275\344\335<\023\275;=\014\236\356<\3667\'\275\003(\037\275\230O\310\275~\t\312\274\241\351S=\232\361\231<Kg\002=!h\273\275\373\n\014\275LI\027=\321\304\213;\236\225O=\247\214q\275\r/\327\274\364%\273\275x\220\270\275\210&\216=M\035\224\273\007yX;\030\230j\275:\n\370\274\370\341H=@\370\000\275\2771\313\2742\026\n=j\330\037=\227p\000<t\250\301\271\312M\216=1\241\342\274\2672\206\2749q\020=\350\004\344;*\337\216=\300\227\214\274R\312\271<\177\200I\274\205\315\320=x\352\307\275\333\362\241\274\205\357\313<G\024y\2754R\266\272\200\212\212<>h\265=\010\000=\273\232\206v\275M\263\202\275\371:\206=[Zd=\214\2733=\332\207\370\273v\245#<nl\254<\243\211\250:\206\220\261<\t\370q\275 \204K<,_\007\274\222\370\324\273\247\315s\275pm\353<m\346\307<<\3122=\337\370\267\274\234\3327\275\223\030\345\274\222\026\000:7C\024\2757x\032\275\035\2135<\267dr<\330YP<\325\2332\274@3\330\274[\312?\274\211}n<\277\270\246<\032\332h\275\236d\r\275\277\236\217=\323\"\023\275\031\001A<\273\232\274\275-\352?\275\317<\202\273w\254\201\275\332\375\003\275\343\316\204<\364\037\246=\221\345\362\273D\351D=\337\243\317\273\236|\210\275\244\317\313\275\346E*<\260\340\374\274I&\243;%\257a\274\247\361\037\275\226@v\275a\\\251<\027U\317\275\177\3319=-\215\221\274\006bR=\331O\236<6G\207\272\301\260\n=cy\215<D\013\022\275\274\002u=s~c<fD^<g\036l<\331$\357;\264\224\016\275\251\231\327=\014\023\363\274\350\211\347\274\231\334\032\275\211\206\\\274\037\372\003=y\277\225\275\256\032\354\273\255\214t= \006\320<\027\231]\275Q\205\353\273\230\373\223=\237\347\372\273-\314\'=\377/ <\005\214\370<\335\347\263;u\004\330\274]-%<\006\244}<M-\206;\200y\340=A\204{=\031\026\022\274\013\353\301<U\214s\275\2425M=\316\315\004=J\362B\275\331\024\346<\233<)\275\"\231\222\275A\254\360\275\355\312\211=k\323\003\274\020\365\240\274?1R\275C\226\206\274w\016\033=0\273Z=\005:\247<\257{/\275\365\243\034=H\324\276\274\207\336+=\337\260o\2757];\275\326\333D;dI\343\273\024l}\275\245\036\256\274\304;\213<\2456\207<\034\337\212=\346\277C=\234\315\372\274\000\204\234\275\242\020\345\274sB\000\275\307\206E<\347\232\227\274\230\362\222=\301VO=\037>\034=\240\214\007=R\331\213\275{\310\231<L\360\026<%k\206=[\n)\275T\206\200\275Uh3\275\3020R\275\327\337~={\275\023\275\323\360\031\274.\177E\275?\210\022\274\257\356\336=\021\265l;\244A\212=\342\221\002\275\374w\201\274\034\266\231=\270\024\347\274C\374?\275\333d\262\274\365N\034=I\273m\275xt\311<#\023\006=\316B\265=L?\235<U\331\016:\334\235\013\272\274\335k=;\316\200\273\243\002&=f\226l\275\372F\231\275e\330f=@>9\275\3313\004\275`c\214\274H\265\021\274\343\005\220\274\307\264\366\274\212\231\266\275M\001\270;\032\263\277<\365\370\216<\371]\342<\302\203\314<\033j\247=4\001\255=\025\205\266\274\241\373\325\274\254\255\211\274\226vS<\215n\021\275_uo\272\310\320\307\274\3672\204\275H\217\255<\220\214\326<\360\3429\275\306\201\260\272\0015\230<l\357\202\275\374\316\201;5\212\267\274)\375\263;\317\013\000=\215W\333;\365\021\373\274\374\372$\272V\326\214=\315\212n=\217ih;H\252+\275\204\352\334\273a\276\273\274\243]\374;)?[\274\001O4\272\323\223L\275\306\307*<\324\360f\275HS(\274\212\225\251\272{\n\215\275\242\256\365\270\3229\206\274\227\032Y\274a\322\232<G~\267\274\362\363P\275\302\247\256\274k\223G\275:\212\037=\230@\217;)\\4=\r\253\366\273\231\370\215<~\320,\275?\322\270\273m\355\021=\361>\016\275Y2\247\274\230\360\274<{<:=+\237+<l8\205<\006\352\216\275\n\207\314\275fz\335:\342\340\364\274\2577m\275YQ\024=\234\266]\274y\365\026\275\346\325\017=J\231\321<\336\337\272\274f\024\237;\275\000\354=-\354L\2745\001\377\273\373T:\275\220\252\334<J\250^\275`\263\274=h\274p<\232\325\200=A\236\"=\360Y.\273/W\216\274J7\212\275\261\021\257<\270Dy\274\336dg<gOD\275\224\317\001\275tJ\335\2744\357\326\275t\320Q=\004\323\337\274\374\242\303<\3214\313\273\320\333\204<h\222\212\275\376\267\022;%_\243<\331\313\204\274\274\317\010<\006gX<$\021):!\026,\274\235\237\266\273\230aZ\275\334\354x=\210\346\216<z.\245\273\227\ry\274\320nH<m|\007=\345-M=\265\202\021\275e\356\226\275\010\350x=Sx\236\275\350]\226=\307\365\032<\233\273x=\022Ij\275V4\351<\342-\304\274%6a\274\213\247\326<T\323\375\274\347\333\346\274\305\3370\274\254.\272\275\331[\010\274\006\227n\275\000\206\275=\007\324\236<J<\251=\003\t\212=\310,\035\275X~\232=\323\n\234\274\217\3544=\n\261\002=\210\313\212\275\223\352\262\275kY\033=_\356 \275q\031\360=%\236\347<\347\236C=\024U\010\274\324\224\207=\016\302\233\273g\177\036<\352\337\217=!\026\212\274\302\023\330\272\373\364\007<\247\253D\275\006\342\311<]\232\275\274\332$\212;X\371_\275,(\212\275\350l\323=\346\224\t\275\003\027\221:\002\201\201=\234\244(\273\243\243\351<;\226\247<\233\032#\275\177N\205\274\371\350{=%\244\270\275\265u\252\273\327\254\344\274\314\326\007\275\205ZN<\022\346\267;\355\361\037=\255\r\314<\352.\014\275\'\002|<\010\365I\275!R\367\274\332\326\270\274\236%h=\221k\263\275jNX\275\245\236\263\275\373m\006\274*\"U=\302&H=:\r<\275\307\001\230\274-VR=\033\313\"<\354\224\205\2758\251\014\275\220\261\336=\247\303k\275\342I:\274B\005\200=\267\004`=\372ZD\275\361\023^;\313OQ=\241\024\005=\322S\354\273\022\242i\272\247\221o<\225\rr\275\332\236\007\273\035[f\275\370F\304\274\221\276H\274\\\200\205=;G\217=\325\274\006=\231\211Q\275\203\234B=\231\353D=\332\347\263<\255[\273<\221Z\032\275\324\274\370<\035\3050<\224L\032=jf-\274VG\255\273*C\001\276\222x\217\274\014\3371;.B\233=cN\247\275_\361W<\267\261?\274Z\220\000:\014\3243\275\217\257\371;n?\235=\262\225\027\2748\337,=\010\256\234\275\342\261\324=^\370k=vu\003=\311\007\307<eG\264;\242\255\374<\020\221\357\275=\225T\275\243i\017\275\256\275\301\274\017=\217\275\255T\003;\353\371\"\274\204\002\016\275\262,\235=kw`\2754}\006\275\354\360i<\342\027\034=\\\tA<h\307w=\335\227D\275w\252\255\273NU\224\275\024`-=\310\367+\275\352\331\266\274G\207\242=\317#\227=\007\370\237\274`\204\247=\374DF=E\342\026\275\272\200\333<\240\256\277\274\004\265\240;\256\373c=\266\330>\274P\n\260;\031B\204<\216\004\226\275+\243\337<|\356x<e&\310\275K\213\035\275\351\222>\274s\034\205=\025\247r\2758\001\010=U\336\035\275\243\305S=\027\332\016\275\370\232\003\275\034\2441=\266\2718\275\327\032[<W\224\200<}\343\276\274\373\336\203\274\253\027\262;`\221\245=\357|F\2758K\210\275\212,\311\274+Zq=T\330\233<~D\356\274\316\345g:Y\333(\275k\020\347;\267Mz<60\331<\230\356p;0u\266<\3005_=\031\216\362\274E\232\026<\262\253\244;\007E\013\275\365\014\360<!\312\025=F9\256<\323/l\275\313\001\346<\367=\253\275/\315\341<\337\023\200\2756,\366\274b\340\340<\n\n\351;@\363\247=\010\273\271=\236\256\020\274,\355\204;\010\000\203\275\266g\002=\223\220\214\274\250\277\330\274P\021\220<\036\t\245;\303\022\"\275\273\244\273<K\362;<\345e\317;\307r\226\275?W2\273\262\313\247\274\300\353\367\274\304\302\030\271\n\035\254\274\354\0052\274\'\204~\275\246\366+\275\304+(\275\007\201\205:\373\006\232:\3320Z;$\321\302:\263\020$\274\036#\027<\304\202:=C\236)\275\350j\016\275\327\200\315<\252\337\340\274f:\255=\001\3234\275\'\272\344\2742\336~\275>\223\215\275\204\217\020=j1\203=asx=\357\253\t\275\346>\311\274V}\253=Eq\t<\375\022\013=\321\3703=z-\266<)A\222\275h\311\001\275;\261=<\222\266\000\275D\227\362<\031F:\275\000A\375<\006z\256\275\367Q\006=\262\314B<?s\307=~\257\361;y\254\305;2\265\325\274\310\373\000\275\225n\207\273Z\0223\275\333dZ\275\310\275\017\275-\351\221=\002o\272<w\202\373\274\323\322\227:\321\035P<.\224\242:\005 \203\275I\037\244<L%!<\342\236@=\252\227q\2756\013C=b\020E\275\250\"*=\253\244\330\274:\347\010:d3P=\240\030\236=o\201\002=9\362\032\275\227\247\242\274\024l,\275\213\353\362\274\352\373|\275\374\t}\273\334\334\330\274:D\256\274\337\244\037\274\243|\'=g\014\272<\273,\220\275\335;\247=>\007t\273\001\244.=\272\262\227\275\254l\211<\030\201\252=\2642\033\275G\256l<\353\330[\275\207;\'<\207\270\265<\361\"\301\274/.\031=\007\210\255\274\345k\231=#\327\367;\222\311\226:\357\230Y=\363d.=G\005)\275#|\262\275\027\222\314\274\356U\r\274=\322\010<k\306C=\234\365\223\274\274\364\n\275D\206b\2743e\345\275\232\323Y\275\231\252\253\275\367w\254\275] \317\274\273\232\033=\000(q\275B\264\202\274A\227*\274e\341j\274\2154\320\274\264\233\325=\367\235\276=\271$\217;\302\346F\275C\000M\275\221\014\337\275\376&6\275\353\236\226<\035\354\236=\320 \217=\367\352\017=IcI;l\366\274<\200\357\347\274\327f\216\275`\361\364\274*\307\254<N\260\254\274\017\2634=\363G\227;\3260\344\274\343\241\224<\371R\321\273\244,\331\274\244\300\322\273\316Q\025\275 \267\235<(v\3369\312\217>\275\320\325\231\275\257n1\274\314\373\014<T\245\214\274>\305?<j\377d=\':\215\275\344Z\177\275\373F\363;\'\212\262=`\340\215=\003\013!=\0135\326;7\317\262;J\246\r=\276#\236\274\320\026&\275Y\236\025\275o\341 \272\217p\003\274(Ij=\036\016\202=\354\022y\275\211C\003\276\357\232Y\275\232\341\031\274\314\304\025\274\367\377P=\300R$<z\315\004\273\234X%<\320\365\205=s\334\003=\331\204k=\362\331\250\274\243[\030\275\311o\001\275B\344\354=y\353m\275\255\365\215=.I\237\274#\351\374<U\010\006=g_\267\274I\335\211<\274\'l<w\242\201\275#GL\274\341IV\274\253\331\350;J\315\014=n\256\250\274\014\261v\275B\024R\275K\255\002=1<\034=\230\3060=\2220W=\346\233!=4\020\204\275&E\250\274\005\361t\274\306\233\271\274\337\0068\275\324\373\360\274O\307o<</\215<\272\236\240; \233_\274\253\250\"\274X\222\035\274\204\336\240<K\254\352\273\215\204\n\274\241V\037\275\214\326.\274q\276\310\275\020;/\275\370=\302<\330\200>\274d\354E=\364\215\266\275\350[\241=#\217\231\274\237x\215<\016DF\275\022\207\021=\356\373\347< \014\031=\247\234\001=.\362\302\274\303#\317\274\342n\254<\237\"\335\275B\320]=b\340\200\273\320/k\274\222>\213\274\253\306G<\320\354\326<\346k\265\2752\\\262<*\363\243\275B\032\351<NR\020\274a\014\n=>\342a\275\245\245\205=jOl\275\006\336\227\275:gm\275\227\352e=\231K\202=\033\206s\274^\311i\275\335\223\027\274\330@K\274\366T\220\275z\331\321\273\346f-\275N%)\275c\377&=+\244\202\273nb\262=\351\\H=\320Lm\275Bx5\274H\317b\274z\234p\273\213\251C\275T\377<<u\'\340<\242\3344<\227\3047\275\315\343q=>\227\200=\031]\206=\213<\216\274\335\232:=\330\002\203\275\260\032\010=N\274r;\377d\256:X\336t<\243\370m\275\025\236\030\274\366h\203\275:\206\212=\204\241\256;a\274\371<\353(\235;Y\274m<3\313\361<\305\265\243<\376\004~\275}\013\247\274\274\364o\273\200\264\362<\013\234\267<\351C\373<E\266\020<\336\251C\273Fr\206\272*\306@\273\246\013I<\230\r\017<h&\262<\270/\025=q\234\023\274\346\330`\2755\213\305\274\r\273A=efP\275\344\222\357\274t\317a=g\004\243<\251\014~\274$ \026=\244\030\226<WNk=\271\272$\275\212\037\224<\034\333m=i\264\007\276\367\243\311;\222\306\263\275\213_7:;:\367\2752AJ=\332\266\306\274?J.=\304\026\277\274\t\3076;\361\211-=\355T\\\274(\036\263=\022pb\275\362\304\265\273\301\353\220\2748\0176\275F\375\037\275_@\371<\002\336\261\275\236[X\275=S\325<?X\351\273\2026\030=`\211*=\212d\313<\377P\277<\246\257\265<\020\325e<23\n=\317`\354\274\322;\252<,\317y\273O\240k=\262\013\005=\232}\251<_\234\207=\333\325>=y\304`\275\357\227\263=\324\3331\274\251G\254=\307\336\341;\361C\364<\272m\036<L^_\275I#\302\274\031sG\274P\211\370<\207L\225<h+\343;;u{<\254Q\314<\227.\307<\007`\030\275\316q\217\275\262\350\345\275f\224\274\274\032\014r\274\332\276+\274g\352\030\275\n\274\232\274\264\363f\275Z\252n\274\273C\206=?\006U<\271\311\014=X\035\036\275H\311\217\275J\334\325\274P\370\325\275ncZ=\343u7<\340\313C=\014W:\275\016M\204<\340]\035\275\230r\213<\366z8<\376\221\250\273\217\256\207\275N\322\022=\r|\373<_\234\236\273\323|\246\273\265\260\n\275g\355\276\273KLg\275]\225G\275o \212=&a<<\316\177\326\274\201\323\205\275\310\205\000=\300s\017=\006c\004\272Bk}\270\360\024\300=\354\355\242\275\332wo\275*V|=\247\316\366<{<e<\227~\262\273\000<\247<\351\256e\273a\345\230= \334\322\274B \223\274\'\'b=g\036\322;\035\351\356<\244\277\241<\003\206\243;\303hY<2\361\177\275\013{\036<\rL\304<,\252\272;\003\232\312=\235l\271;\0315\"\275\321kg<\r\250C<\034 \331<\036T\301\274\344\271n=0\371\275\275\006\361\";\034Y-=\372\224\\<\3347\233:\216(\245\274\202z\003=\357\265\214\274Y!\177<:\374\261=\2162Q=h*\213=\321\255\244<\021\021\231\274\313\007\257\272I\212\245\275\343\231;<]Q\260;\213j\177<\r\230\025\275\nC\247\274;\017\014\275\251\341y=iV\254\275\n:n:A\360\367\274p\211\237<\037\237\216\275s|$=\300\223\\=\n|\311\274\000\026\223=\223E$=.\234\203\275\274\304\316\274\266\013\276<\254z\035=m\023=\275\374\006\354\275\375\207i=\240\204\344;\010\230\262<\226\357\246=\272\220\237\274\220\271\254\273Te\276\275\036hG=\032\2372=o\243\013\274D\031\006;\372 I\2756pH<<S\334<\277!\027\274?\034\027\274\230r/\2756\230\241<\026\2446\273\004z\231;;\013\257\272\013\374\263<{\373/=\245\363\006\274\017$3\275P{\226<\255r\275<\344\232\264=\014\341\334\272\332!9\274\362\360%\2750\023\000;up\037\275Q\021N=\022WF=\003\323\243=~K\251=\036\276l\2759\263,=t;\360\274iva<I|\035=\316\360\004\275\375\203\377\273n\325\256\274\206 [\275\275\330\225<\271\306\002=\3241\242\275\316\014<\274\264\344\\\274\267\036U;\375\321\313\274\214!\035\275\310}\350<\001\031\221:\026\023e\272R\265\311\274\352\341\014\275\304\347\206\275\322U1=\327\365>=z=\006<\243;\363<\320\3736<l\010\321\273\326\274\256\275\206\357\212=X\363\210<?\305\204\275/\267!\275%82=R\031\234=\315=\211=^H5=vl\3459R\001\221<\206\336\214=i26\275H\"\347\273|`4=\336+:\274\316z\220<|3c=0\215\322<eC\246<k\250\353;\330B2\275\203\211l=\254}\206<\304B%\274\350\217\273<|\316\003>\251 \303:\246f_=\t\233\255\272y,\220;\205\313\031\275\211L\245\274bg/={tf<\247\262\247\275\333\307\251=\357\341\362\274\311X\027\275\203\021\244=\335\325\217\274J\310\010=\241\347\237;\325N\264<\\o\254=\324)\023=l4&\274\260o\234=\270\035\276<\246 \211=\'\346F<\366\201\350\274ur\303\275\022\317.\275\235\224%=@\035\352\275X\"|\275\350\245\020\275L\355\346;\371r\007<\0076\333\274\320bG=\315\230\000\275\331\253\204\274\320e\233\275\2471C\275N\207\245<-\375\246;A\030E=\007\000c\274o\032;\272\370\273\323;\34388\275\306\314\216<tI\211\273\007&\022\275\221!\271=\373\"\220:\306\236\252=\'\233\247=\027;\252<\254\234\266\273\212u\260\275\021\315*=\321\312\306\273\202L+\274;\356\222=\257-+\275&r\311<\222R%<\344\273d\275\366\002\372\273/S\005\275\335\351\244\274\242G\001=c\370+\274&\371\242\275S\355_=\\\335p\274\014a\033\275v\203q\274\232\261\272<9v\337<\341\222\352;\310v|\274\307\256A\275\244Z\\=\034\336D\275\310a\021\266\035\330\211\2741\317\361<\320K\250<g\271\324<\0203\366\274\271o\332<\360;D<\352<\220;\006+\304\275\306\017\t\275at\302\274\375\321\336<H\310\376<\227\246\226<\272H\247\274\213\240u\274\036\272\211;\331\3608\275\321\366\207\275\223\357.\275[\021F\272\344\036\273\275\032\360\246\274\'\325\300\274\367 \302=x\275&\274\213-9:\310\354a\273\303B\207\275\342F4\275W=\034\274\242\273\020<\317\264F=\256\203\206=\'<\362<)\250T\275\273\212\353:\256\374\252;\215d<\275Jik\274\344I\213\275j\327\311\275\204\327p=\363\252Y\274\203\267\027=\362\300g\275\332`\366\272\267\377\375;/\270\344\275`\030\223\274T%\231\274\315ln\274v\225\030\275\034N\275\275l\335\023\274\244M$=\247\304\344<^\320,=g\351D=\032\224\322\274f>\220=\032\222\271=Zz\037=\374\035\231=\365\342\032<\213\310\255\274p\366\246\275\375;u=&\250>\275\221\242\206=\024Cw\274>\322R=\230C\304<\377\215H\274\0032\201\275\005sw\275-\220\001=m\t8=G\211\336<A\3255\275YC\217<0\274a\275(w\307\273\224\022\260\274\343\021\340\274\235z[\273i6\366<\2049[=\355\033b\273\256\220\016\275s=^=\214C\005<\344p\257\274\260\303O\275\260\005\234<\365go\273\2779f=\322Q\201=\210\202\301<M\371\365\273\273\266\314;N\264:\275\363\033\003>\356d\314\2756\207\206\274\307\311\026<\221\265\013\275 pd=[T6\275XjN\274\021W\346=\206\036\251\273y\254\276\272\322\021(\275\254B\244\274\264\323\24598\031\202\273\374\332y\273\025\203\223\274\207\206\177\275\217\010\215;\304{\016\275\245\271Z\273m\217s;\002>:=%\363\233\273\263\347\216\275e+\225;_\004+=@DC\275d\347\356;\352\344\314<\022\332\215\275yF\247\2743\010\275<d\2020\2737\005\033\274I\302H\275F%\222=M\264G=$\204b=\370\n <:;};R\263\367\2733\025]<\003\330\337\274\344$\236\275n\207\341<\330\221\252\275\252\371\234;\353\277\'=\034%\251<\345\253U<\tT!=\325\243!=d\035\331<\314\317\371<\234h\332;/c\031\275J\362\035=\357\351\004\275\367X\270\273}\224<\275\361\243\240\274\025D\346\274/\206@=\003\263\021\275\307\320x\275\331UQ=\304\270\210<\276\357\226\274\254\224l=\030\225[\275=\277\023=\315\304\036:\"\373\231\274|\231`\275,1\362<\202\376\007\276{\351\330<\340\266n7i^%\275f\367\361\274Z\270\305\273\025Q\264\274\0331?\275\023\251Y\275\325\207\376\274 \360p\275\021\216E= T2\275\222\235\355<\010V]<)\035\250=\373^\'<\257\313)<\2076\314\274P\263\250<U=$=s\005\033\274\264\213\310=\360\207E\275J\364\257\272H\3014;&&\\=2w\247<l\255\302;%]^<\250\320\256<`\233(\275E\340\010<\377\025\303\274m/X=$9R=R\300\001\276\260\023+\273~\350G\275\343\242/<,\032~\271h!\034=\247\177\230=K\323M=Y\356\270\273\370\340J\274\351\324\001=\027\000;\275\254\310\333=3\025\344</\302\213=?!\"\275Fr\003<\367\356\244<\220]\2269\3743\022=k\031\233\274\273\341\013<\0200V<\202\276X\275\210;]<\242\016\"<g\215\323;\010^\271\273H\271\351<\333\324><\035\022\364\274Y\222\355;\t\355\026=\263\214X<k\256@<\327p^\275\330\256\333\274[~\216\274\001\321\373;\242\241\271\275\364.\201<\234`\260\275\0030(\274L\3407\275\366\004\353;\353\224)\275d\300\343<]T\321\274}\225\025<OE\254=2\252\206\274}\244~;A \033\274\273N\213\274(\271\301<?\216%\275*\252\261<\345\373\352=\317\017\336<\361\226\217\275}\350\337\275\351\371\333\273\357\265\034\27581\004\274Z/R\275\255\224\224=v\2636=\304\225E\274\316\332\263<\0346H\274\367\0077<Qs\273\274A\375\257\275\177m.=\0250\003;\363\341\235\275\265\030x\275\366\177\030\275R\264?;\350\245Z\275\\\026\237\274\342\027\334<\327\363T<\247\311\352\274N\370\247=\03252=\364<\037\275\362\362\254\273a&4=\026H\310\2749\204\214=FE\271<\234\035\'\273\234\273\211\274 \371\'=\356L_=RC\216\275M\220\313\275\257\375\246\275|tJ\275\354N%\275{\236\347<\\s\211\274A\221(\274\242\252R\274\t\033\342<\316\346\n<\001\340\021=\345\217\321<\371\021\236=\332}\276<\027\2637=\334\275\224=&n\271;\004\253\034\275g#O\274\032\302&\273(_^\275C)\254\273\345_\306\274\275D\037\275\373= \275\323\341\023\273Z/H\275\213\267M\274\276\277\023\275!-\205\275S\331\211\273\362\204\007<S\223\312;\263H\242<\257\352\270;\246Ab=\274\220y\275\205\214Y\275\014\262\216\274[m\326\274m\010\332\275\212\275\230\275\257\275l\272\360\364K<\330\207\003=\033o\234<\\\3042\275\212&N\273\263\232\034<J\260\033=\353\261\013\2744\347\265\275/\270\225<\356D\225\275\313\263a\275\235\351Z\274f\2405<\013\373c\275ccU\274\035\'\357:]\016\315=3\213\261<>9p\275v\364\356;\034\207\233;\004\253*=\207\313\262\273\245\233\t=zt\353<\202%\275=\024\0317:\030\332\330\275\024\335\231<\233\306\224\275s\330\256=o\362B\275\244\375\264\274\001\030\264<\217\350\305\274&\022\276<6\301P<\006\363\371\273\014\312\205\275/\3579\275\332\205\201\2756^\372;\nx\027=\233\214\212=[\\<\274y\031\364=\374\304w\275\005\305M\2755\271\367:\2376H\275\346\217\361\274)\332H<\024\342\236\275\327\212\354<\200Y\032=l%\264\2754\300m\275\r\367\211\275_\006\346\274R3\344\274\350\327\272;/\350$\275\277\0078\275\340\277\033=\037\373}\275\016k\355;\270y\020\275\354M};\361X)\275#A\265<\202|!\276\301\205\021=Y\251a\273\016\374\255;l\306\312=R\262\007<\243{\312\2746m\005=\327O\021<hX\255=7\364\376\272\363\332\244\274w\245z=5e\205=\342\244\200\275\021T1;\020\324\277\2745\2553<\351I\231<!\364\316<LT\177=\013\321\000=w\276c=#\025<=$7R\275+\0238\273\237\017,\271\261\034\355\274\302\300\034=U\342\341<)\233\035\275\260`\004=\242\207\013\274_\360\017=\016\262\352<\000N\005<\010O\253\274\362F\265\274,\007\204\275\013{\031\275\366\036\005<i\032F\275P\344`\274\306\022\271<M<\203\275cx\350<\277\362@<u6\201;\212\001\362\272?\2734\275\211\321\233=\325\356\246;b\365\201\275\301<:\275\000\340\203\274\207\367 <\"\205\001<8f\213\275\361Sv\2741\322\034\275v\214\345\274C\241\3609\231\276n\274b\0170=x\244\203=\261\373U<\261\227Q\275\257\016\322\274\365\327\207<D\037\333<\223(W;?\013\221<\014\350\273<\330\232\006=:i\217= \030:\274\023w\263\275\333n\204=\241\031\222=\034>\035=\025\274L=\344\0020\273h\252\314\274\017\000\"\275\347\361r\275\223\027$<\005w\236\274\2618X\275c\207\243<\365)o\273U\277\275\274e\234&<W\302\371\274\001\016\023<!\274\312=D\267\300\273Q\373[\274o\300+\2758@\372;\347\031\020=\310\221\230;qx\346\274FR\372=\317\010\201\275\362O\314:\373\245z\275\024E!=\356\213\216\274\t\255\276\275\035\'S<\363\256\000=\274\334\207\274\261\302\211=\353$\010<\320\246\300;K\2274\275\221\276\220;\373\310P\275W\216\320=\346\000\036\275\311\227Y\274lG\177=d\"\363\274%\356t=l\323Q=\314\356\003\275\264\306\005\275\357\240\264\274<\216\250\2750\372\001<6\032_=9\316\242<Y\332\033\273\315\013\315\275\204V\324<\223\371\251<\343ss=%\364\216=\206\256\235\274\354O\373;1\\\242:Q\364\332\273\007\030\246\274\343\033p=\037\345Y\274G\345\230\275\366\322\330\274\205v\266\274\231,\357=F\350K<\377\332\207=\305&\226<\224\010\014\275]\357\213\274\315s\225\274\274\371=<\253\336\010\275\314V\266=\345\002\014=\371\013\203\274\206{b\273\331+_<c&0\2747M\266\274\271)\023\275\266\234B<TA\230=\037\001\315\275\270\244C\275\262\022\036<W?f=\251\314\033\274]x =\350&\242;W\377\260<\3268d9\274\334%=D\203R\275\352\265\006\273\304\010\253=]D\014<\326S\361\274\t\336\345:rX\264=\312\330\024<L\343[\275//\353\2742\014U\272\337\362\262=\271\340L\275ey\240\275~\224\271\273\275*\037<\246\033,=O\251\006\274\276_8\275=\354u\275\277\324\202<\211\2136<\316\353\374<[\0212=\036\251\347<\233\373\272=\274U\377;\356@(=.\\\326\275i\235\243<\334\250\310\275\013\311=\275\212o\222=\036g\227:\334\271\277\275./\225\274\261\364\035<P\035E=\253\3504\275\025\344\246=\362\332\244<\235\023n=a(\245\275k\200\020<\343\256 \272<]\375\275,m1\274\234I\325\274\253\0367=z\267\222;\251z\023\273\3276\207\275\327\353V\273Kz\263\274\\\243\226\274h\220\036=\210F\205<Hh\361<\374\264\267\275<c\251:\tkG\275\355Z\232\273\n\022\232<\340E\035=6\2224\275\030i\017\275xU\272\274\367\0246<\200_\203\2748\212\262\275\242\366\"<\307\376\377<\236\216;=\336\013.\275\312\010u<\252\315\331\274|f\336<K\275\030\275\331 \265;K_\241<Q\251\364\274\225Z\375\275jnt\275S\343\003=4\224\234=\025\021\234=6\355\020\275\316<\222=\210\360\326\274\204\235\313\275W\344\266\274\341\252\200\274\223\255M\275\314\260V<|\272=\275{\251\002=p\205o=\020\366\310\273\303Y\202\275a\201\r<t\254$=\330\253\320\273^\240\321\273Q\304\322\271I_N=\264T\363<\257i\253\275!=q\2744Q%\275\274z\003\275\322\027\210=\\:\021\275\177\312\311\274\020\177\260\273\306\037\037\275\345\202\343;7\0025=\276--\275\312\352z<\360Z\214<\210\350\274\274\016qO\274\'\364y\274\260\336\224\274\234=\324\274\250/|=\357\024w\275\340N\351\274\331^l\275\277\375\346<@\337\217\275\247\r$=Y\304m\275\353\325\306\275\021\331^\275H\206\005=\227jY\275V\004\004;\244\354\377\274\276;\027=JbF\275S_\231\274I\221w:^\345\246<3\361[=\211o\022\275\230\310\303<\311\321\232<\217U\261:\374w\014=uT\314\273\222\253;=\247qj<\354a\204=\021+\312\274Y\205\270:\242G\373<}l\t\275Sz)=\220\036\230\274\tq\260\274\313\203b<\006{5\274,\216\311;+\036\033=\275o\215\275\255\337P\275\243\336\244\273\362\355z:\3032\375\272\331\332d=\206\317\264;\217\201\374\274\034\rI<\346\032\303<Ni\333<\366\2107\275c\253\346\273cRv<\r\357j<$\213:=\315\367-\274.\374\350\275\231K\336\274\017+\232=\370\016m\275\220\203>\274y\365\232=\036\254\302\275\2054]=r\245Z<\264\177\200\2753\246\300=KX==~\221\214\275|\255\t\275\307\302\025=e\241~;\035\233\306\274\374[I\275\262\233\243=\321\312\244<\350\013/=\352\275\325<\366\256\221\275I\252\327=\337\267N\275\372\005U=a\335\250\273\366{2\275\314\255\246;\222\356\210;N\0037<y\241\351;\317\310f\274}>\273<\016\260%\274\014d}\275\216\'\277<\025\032m<\032f\033\275}\247\265\275Dtk=6\324\037=\032\320\223=AC\364<B\202\205<\360\357\255\273\001\342\231\274\\y\020\275\003\214\265<m\313\001=\201\207\232=\202n\224;\246\027W<\325\246\215\273\006\305Q\274\177\214~=\254\273`<\245\337\021<\236\371\335\274\233M\301;\377\303\n=e\\\360\274q[B=j|\362<\301|\334<\306\227\265<\021\230\251\274 \352\211=%\306\361\274\371\353\234\274t\036\"\275\203_)=Q\362t<\376T9\275\207r3\274\027U\374<\302\250?\275\020\306\364;bL\321;v\016D\274+\244p=\217\356\003\275)\031\200=\204R\355\273L\250K=:\257Z={`\214\275\212\351\305;\302\366\255=\361>2\274{\0314<!V\222\275\036\221\'\275\013\317\214=\302\334\241\274\022\250%\274\000Gx;\337\373\301\274k\0249\275\204\376\254\275\364l\002=JI\002\274\256\374\331<W7\341<\356\']\275Z\354\361<f\036\243\274\000\014/=t2\321<O\262\203\273\030\231\366<\372]Y\274U\327\310;\241\335\265<,\235\316<O\370\245\273N|l=\333i\337;8\324\243<\'\264.\272\177\tL\274\353\321\365\274\341\265\006\275a\203\334;\201E[<r\013\000\275\002\036\313;\"\373G\275<8\354\275\350\310\340\275\002U<\275d\374q\275\220\244`\274)\321\244\275k\352\216\274\336\346\252\273=\037\222<\'\240<=\300\326_=G&8=\360#B\274$\207\312\274oO#=\375\364\255\274\361\031\242=F\261\035\275\376\265\265=\366\017\020\276\276\220\357<\002\033=<\360\230\371\274_mU\275*P\204\275#\352\"=\374\034\324\274+\270\270<[\201\305<\230\360\363\274\330\001\311;\203\221!<rP\324\275\376\343\346<\301\025>\275\265\364\201<%\310\326\274\215\\.=\352\007C\274E\275\312\273\220\342\230\275`G\'\274\356\307\306\274x\313\251\274\006\204\212=\261\005\004\275\rj\357<\337\026\034=\234\227\300<\037;\361\272~\007\265\274j\005!=\364\235\010=\270\207\214\274\375(<\275&hU=\210n^;9|4=\256\347\000\275\025\035O\273\254\271\034\275\313\267S<M`1=\370\302,\275\333e3\275\317\332\247<>\333Q\275\312d\217\271W\276\016\275\332/\331\275]\322\240<\300}\027\274SA\262=\034S\222\2758\213\341\272\275\030\254\275\021\n\210<\224{\215\275\303\2132>\332\374\221\275\230\254\034\275i\226\276\274\275i\t\275\033$\240\274\3025B\273\237\2702=\247b\205<\203\225\034=+>a<\252\017\016=\304\224\237\274\374\221\243=km\233=\372m\216<\364j&\273 \212\214\275\262R\217\275T\274h;\344\337/<\342J===\020\231\274\364\361\024\275\325\223\013=\020\300o<\006\016\345;\217\265G\275QM\023\275\207!\320<,\\\210\274\225\006\202=\302\351\r\275n\036^=\002Ar=m\372~=zAX\275>\340&<\021\373\207\275jN\036<J\310j\274\023_\316\274\372\367)\275\221ld<I\356\377\275\315\200\010\275\351v\353;4\377\204\274\261\336\232<\323\204\036=!\031\027=;\n\242\273\273\225g\275@\265\267=<\306\221\274\036_\304\272\032\214\007=\177 8=AO\236\275(\226\030:\216\331\266:\314\206\226<\316E\344\274\2333\262\273\032!\322<\265R\273\275\354\200\201:\351\2155\275S\344\017=\013UF\274\355\0239=\246\361\237\2741 f:\255\234\261\2748\207\375\2746\224\257<*\304\355;a\025L\275\'\353\215\273\272\007\270<\306f2\274[\310O\274\025zz\275f\374\016;\002~\351\2734v\327\274\356\n\272\274\264I5=j\250\377\274&\214\322\273\246\315\005\272!\205\\=\226\273\264<p\255I\272J\227\034\275\216y\375\274\"K\205\275Q.&=\005\217A=\262R,=\320\000\241<\206r\027=\375\363\216\2757h\340<\\Nq\273\354\305\245<\255y\302\274\200\003\341<2_\023=\332\227^=\364\027\241:[\212H\273(DQ<X\302\013\273e\344\264\274\321\275\016<\311\252\031>\022\340\214=\370\277H=\342m\267=\277\367\311<\235\353\272\2751\371\031\274\243\017\t=\321\261\257\272\\\225`\274\364\025+<\314\243\206\274\344xu\275\360Y\255\275(y\203\274\332#\307<\360\226\271\275G\337\240<\330\022\226=\251\356\323<J\305y<\207\201X\275\216\022\374\274\325\007L<\266\232\350\273\352\365\224=:\230\017=Q\335\024\2755\232\204:\341\035f;\264\200\010=\000y\037\274\237\332\211=\207=\024</\016\3269\321?3\275\'D\032<\307d\323\275\206q\237\274\362\r\312<w\226\\\275u+B<\333\341\273:\'\360\021\275?\215.<\240\260\207<aU\302\272s\206\300;\324I\346;\324\217l\274\025jz<e\227G=\254\026\227\274\2245\334\274D\333\271\274\267\377n=\261\224\330;-\027y=\002\342\271\274\014\001\027=]\'\001\275\013\235\225<B\364\206=\254\"\"\275TA\350\274]\030\003\274X\205\340\275\327\270\216<\351 ~=W\271\260\274h\250N\275\210\211\177\274\217\371J<\001a\362\274\020\342/\274\211y\347<\006\304\222\275\330\026`<}\256\002=\256\363\364<G\303a;\013\204\021\275gk\352\273\340\334\3628\336=\013\275d\221\"=\363\316\375\274/l(\275\026n\230=\263\004\222<\362\261h=\252\211\211\274\267\271\211;~\332\332\274\">}=q\347\024=d\310\257\273\220{R\275\375P\301<\366\373\370\274\023\'\372\275\030S\205\274w\377\252;\303\236\262\274\226[K=\260\252\023\275\355\224p=\332b\332\274\271\200x<\301hw=Zt~\274\325\361\317\273cA`=\236)A\275\330\364\360\274g1\216<MQ\240<\306\002\376<\210\220F\275\332<\231;\305\306\206<a\330v<I\tu\274st\240\275b))=O\340:\274\177\031\317<\000a#\273\005\0352<\273\207A\274\310\016\240<zy\264:W\257c:\347\nG\275\n\243Q\275\337\200\016\275\037i\250\274\247\253\360\275\376T\301<\251\207<\275\t\302\2509\267\302\'\274p\273j=h D\274\210\367\222=\343\237\266<\266\037\n=\234\274\275\271~\324\211<I\021j\274\217\306W\275\245\231T\275\254\325\265=\356\252\211=~\034\t=\234\217\204=E\037{\274/H\340<\352C\215\275 S\201<\252S@\275\375\212>;\325\2473=!O\'\274\277\014&=\036b-\275\312\231\200\273\377\370\365\274\256\374\220\275\250\017\205=\211\204E\274k\"\202<\203N\002<\317c\006=W]\230;F7\356<4\263\224\274\032\330\265<\273\327a=g$\357<t$;<\335\020\347<W\217\020=?T\350<\251\304y=\221J\306<\246\222$\274\313\377\335=T\033\360;\205\242Y\275\256\347~\272\310rr\275Xy\366<\\\233\027=\'\345\301\275o\305\026=\000\245\300<\223\211\027=\336\224\305<r\332\031\274\206,\027<\025n\013\272[\311B\274\346\376\236=l\226O=\305\316\327<\025\375\274\273\316R\243=*\255+=Z\002`<o \022\274\222\312\007=\356\251\270\274\2621v=\357\354\241\274\"Y\326\275\005w\235<I\343|=\255\262\203=G+<\275\261\177\245\274\307\247\350<\264\005\321<v\004\334:\2406Z;To\311<jg\336\275\020\2726\275\327\360\210\275\214L\221<o\363\314\273\362\305;=\304\355M\275\322\003&\275`\360\346\274\026\334\201:E\033\246\274\007\301\303< \276\032=&\211\312<\327pH\275\303\371\213=\3436a\273X\031\245\275\336\014\255\274\321/\'=U\326\300\274\220!\267;\350\325\246\273\262\242\202<l\016A\275\226\234\037=\270\234\267\275yi>\275K\033\370<m\335\261\273Y\2571<\214\344\224\274\346\006;\275\376\'\242\275\376w\207=\027s\227=\022&\362\275\312\260\256\275\254\202\014=\211\223\237<\373\334\335\273\263\237\311\274?9\371<\231}\365<\233m\020=\2730\\=\312\303W;\245\305\331\2752\300\004<[N\336\274y\254-\275c\351I\275\357\263\307<u<\274<\n[g<g\2271\274\343\374\270<\366u\261\275Q\354\260=\220\244\340\274~k\032\275\275g\326<\257\272A\274\326\341\260\274\027\355)\272\326\2250=\211p%<\203\335\036\272p\270~\275|{\021\276\003\2248=F\345\252\275\024\255\267\271\016\025\326\274<;\224\275\353\364\342\274^\r%\274\033%@= \2723\275Uv\006=\034\215\216=\222b\222\274\231\016\254\275\'\022\331<\341Z5=#\211*=Zp+\275}\334\321=*\237`=\027o\373;\325\212j\274\253`%;\311\000\227:\"\3636<\366\035Z\275\267\300@\273\007\262\020=\275\"#;\257\337\307\274H\327\030\275\340\302\203\273B3\220=?\326\n=\037\233\276\274\003e\242;l+\370\274\362\346\200\275\340\221\371<\213\213\022<\344\345\243\274\311G\037\274\262\345\333<\303M\014\274\313\206\325<4\002I\274V\275\345\274\261\0148<=|\312;\277\367\202<\t\2713\275J\351\212\273`\217\354\274\n\367S=))\225\275\200\366\367<9x\201<\341E\212<\013\367=\274\325eH;]\021F\274\230S\243\2738\016h\275\212\345G\275\360\226u\275\252\020\034\275\217\234?=D3O\275p\001L\275\310h\267=\037\003\301\273~\332\005=@d\354;\010\366E\275uN\330=\254\021\000=\215?!=\025\354\\<\3327\033=\354\252[\275\272\366\322\273N\243\323\275\273\2300\273E?\013\275\021.\260<\003\374$=\301\332\215=\261\360\222=lp\260=\250\310\376\274\006- \273\007v\004\275n\371\031=\341\002U\275\330\271\302\273Y\0135\2758\257\t\275gh\373\274\243\t\276\274\022\'\347:_U\324<\374Y\350<T\214\277<\341\264_=\231\222\245;\225G\023<\372\025\255\275\350\022\027\275\211\216H=\327L\224\274\267\267\343;\312\363\355=qx\031=\323\0226\275Wb\021\275\225l\243<\250\021\211=k\3431\275B\327\224\275\254\0304\273\024\272O=\331\270\031\275J\244\271\274>\260\352<\256R\255=$\224\305<r\374\307=\374\315\355\274\226\270z=K\250x\274\340Q_\275\312*\r<\200\200\251;\253\351\260<-\033O\275\372\004|;\231\247{\275Z\026\310\275\267B\027<\330\371\213\274l\257\333\273\270\372\256\275\265_*\275\261n\257\275\343\035\026\274G\007\035\275\216|H\274\246\205\010=\346\3625\275-\367\001\2744GO\274\205p\203\275\031l\026\275\214]\227\274\020\307\026=\315\355=\275\340(_={\234\313\273=\202\354\274\325;\260\275t\311\361<\013-\242\274Y\255\232\274?\330d=\250\361Y<\032\350x\274\200\226V;.\354u<h\336\356;\302\227(\275.\267\003=\261\200\001\275T\275^\275\336\322\376\273\277u\026;\365\363u\272}z\257\274\352\371\345\274\3035b\275\230\027&\275\177\341Z=\016e\204\274\2318\206<\010\034Q\274\205i\030=y<8<M\240\201\275\202\342\370;\343=\237\275\3115X=\264\014!>\314\3439\275\315zd\275R\013\211<\374\373\224=\324\363\203\275\261_\361<\265\234\200\275@C\267\275\330\006\275<\014\301q=\020\236\203<\215d\013\275\372\272\031\275\311\230b\275\224\304\304\275D\363\201;\337\031\207;\256\000\317\274\n_\243\274m\005\177\275\302V\376<\332\036\373;8\202N\274r>[\275\260u\327\275\306\214Q=\2231\245\275\322\341\235=\205\271\364\270O\223\213\275\003\2219:+\2177=0.\233<\177z\207=\373z\240\275U_\r\275\271\243\341\274y\205\201=N,\030<\355\260\275<X\237\372\274w\276\243\274\256f\202<3x\323\274!hp\275\362oM\275\n(\235<\177\244C\275\310nf\275\331\242\207=\016P\225=2[\227\274\246\332k\275\206\331`\275\210p\253\274V\336\207<\241+6=\277)@=\335\327b;\006\315q\275uY\005=\301\365S\275HJ\341<\352\366 \275\374n/=\026A\026=\'b\377\274\246\303j=9\014Y\274\022\207r\274\240\206\240=\206Tn\273E\023n\274\201\274\207\274\250\253T=\354 \035=\036S\234\274\037\273d\275\274\246v=\227E(\275\303\006\247\275\025\335(<\264\252\211=;\353<\275\203\274\007=\220.;<\027\203\216<\356\271%\275\3368\031=\310\360\267<\211\263\035=7;\330\273\027\212$\274)\026:\2743\371?\275S\204\367\274Nh\261\274 >?=\250\270== \373o\274\211\376\316<\266\005\310\274\324\315\242;\r\250\355<Y\254\227=(\312\257<~\002\023=\273\241\277:\271F\230\273\006\227\251\274&@\310=:A2=\377?c\275\001\356\026\275.\350\243\273\360\'\210;Olh\275\341c\245\272\331\356\354<\274\331\252<\206\037\236<\372\346\242\274\304\307\r\275`\233\265\2751x\263<\345~\023=pW\035<\225ds\275V\004\230\274\364\2617=\260\034\345;*\302\205\275[D\310;\310\311\236=\231\3208\274MI\374<\260%\213=M\232\010\275\244\301h={b\260<\212=\017\2744\311V\275r\3132\275k\236\313\275\231\206O\274O\021\260\275\177_\314\275\256\233\275;\213\256\216\274\225\'M\274\004\311\263;\030\360\244\273\001\320\212=1H\351\274\352\007\201=T\223\211<rb\211\275\002Ko\274\343p\031=\020z\313=\253Q\245\275.\374\250\274?\225\'\273\243\354\316\273T\236X=\346\366\353\273)\307\247=YI\245<^u\317\273\206\340b=G\3044\275\321\336f<!=\220<\014\200r\274\243\314\360\274\017\021(<\267-f<y\312\231<\257\367>=\032\340\207<D#D\2759\021\025<\005O\007<\233\ne<|\221\004:\036\273\224\2746\301\306\274\tK\003;\033\307M\275\305#5=\334D\204\273\343l\206\274\r\034\t=3\366S<\353\245\262;\235\270\017\275t \207=\025m \275\256L\204\274|J6=P\366\247\274\255\276\025\275u\331\\=\036U\035;b\227\321<\005c\214\275\226$\365\273\355\000\314\274)\024\267\275\330|:=\271\217\244\275j.\324\273\177\235\302\274\257\360\023;od\305<|\214\204\2759q\222\275\020\374p\275\370t\003\275\227K<\275r\010\323\274/6\223\275\304\3755\275\200^\254\273\256\232b\273\321)\374\275\346\311\244\274q\353A=i\250\270=0\254$=Vx\010:\330\233[=\304\250\017<\232\"\353\274)g\322\275<\000\256<\031\350\220\275\226\205\217\275\242A\204\273\356\212\000<\357\242\026<\306\350X=xo\210<\327\016&\274\311\324l\275\347o\002\275\026\254\246\273P\263e=\244\010\340\2743\226\022\275N\230|<+l\021=m\177\245\274!\250\244\274\2275\346;\272\233\025>`\273\r\275$c\254\274\262\372\270\274\250\303\314<\312\030M=\273\316\225=@\262\253=\333\003;\275ef\327<\325\242\345\274\323\021\313\271\326[\314\273^\365\027\275i\0018=Dr3<\362\377U=L\205\022\275\203\200\373<\307\262\361\274\036\204\215=\302\221\030\275G\020W\274\247C\322<\222]\020\275\"=\310=\217\0251\274(_\311<\000\234\023=\310\200\305<\336\3037;F\304\365\274\323 \014=\316\371#\275\022E\376<\3446{\275\374&\224;5d\356\274-\330@\273sq\340\274V\326\036\275\263\263\177\273)!\260\274\276\002;\275y\220\356:.\232\225\274\314\343\207\275t\232\277\274-\352(=\3532\330;O\360!=j\302\020<E\301c\274A4\211\275\227\201\021=V\3349\275\371\220\207<\214\240\276:c#,\275;\331c=,P\261=0%-=\341\213K\274\325\233\262<8\266X\275Y\010d=\013t\205\275\224\255\354;>\302\006\275\024\331\213\2756~\r\274:\037\242\275v\203\364<\373\005?\275q\252\031\275G\350\367<\375\332\345\274,\264\365\274\342\2742=-\314\266<\246\354S\275R\214\000<\237\300\037<f\354\205=SpC\273|\003\001\275/\200\372\272\010`\254\274,)F\275E\304N=\003.7;G\033\207=t|\345\275b\306\270\274\005u\222\275\322:\237\275\332(\306\274\2360]=p?n\275\271@?\275fO\001\274Z!0\275\207t\315\274\025\216\255<\234\313U\273\r\202b=l\203\021\274J\257}\275Y\362\032\275i\324\276;\306_\034\275\303?\3068I@E<I\006L;Jm\360\274\375\322+\275\344\313\027=\2050\237\275 \255\265<\332\240\201=\275\272\234\275;\235\335\274\337\310\213<@\335\234\275i\312\306\275H\224T\275\267\357\342\275\344\267\254\275\252\256\242\274\1775\234\274\311R\010\274\270\353\237\273~>\341<\331\342\302\273Xl\'\274\316\177\323\2747|\000\275\"[\207=c|\256\271k8\270:G\245}=#Cd=aK\273=\254E\220\275\226\256\253=\330\2611\275\000\345\032\275\326\367D<B\2715<\232\217.\275\343b1\274rG1\275\222\376\330=\032\177w<\276\231\370\273\375\221\346<\237k\026=\224\177k=\306*e\275\320T\271\274v\236t\275\307m\014\275&$ =\023\275\035=\236\306\030=/\312\321=\374\'\250<\010\203\214<\001>\013\275tx%7\351\223\276\275\261n\203<\030_s=v\023\032\275\251\200\317\275g\000\235=\031\346%<\212\304z<B \335<\266\374\205=\376\371\000\275\214\241\375\274\240\213\017\274\327<\021<\267\034\253\274\344\323\362<\337\002-\275\350?\235<\200\002s\275\323\026\213\274\020\305\335<\235,\225<X\276\345\272\243\336e\275\375\r(\272,w\251\275\"\270\005\275\206\207\203\274\343\207\226<@\034\310=\337\225\316<\365q\027=\361\273\301\274[\003#=<\200\362<\035\257\001\273\257\357\360;\221\234\203\273\n\207+\275E\322\273\274\220\020\212;s]\315<93X=\332\325\023\274\013\rD\274\205#\362<\313\240k<\311\266Y\275D\202\016\275&\361H;\000\243\346\273\014\224\215=F\350\223<\033\342\013\275\002\316i;p-\361\274\177\330\260\275\027\366\256:\307\034\207\273\322{\375<_w\347=;\232\017<\n\367\361\274\332\355\026\275\274\262\224\273r\350\276<\327,\273\273\336\367\242\274\210b\317:\"\177u=\325\306\007\276&\"`\274\017\223\360;4Tm\275\345\256\367=1\246+\272\177GV=\251\377\206<l\001\021\275\274\251);\233l\034\275`\370\006\275}\346\'\275\367\332\325\274\375\302U\275\267\317\231<N\n\256\274\240\370\376<B\017\265<[[\265\275\240\211\341<0\017I=\302\273\014\275-\256J=gr\257\274\213\367\'\275\020\240E=2\346.\275#B\353<\212<\244<\246\264\365\274\007=\370<\252\357!=\356\304%<\023\004\217\275\367#\342<w\025+\275>;\232\274\355\335\215\274B&\343\275N\325\270;}\342\225\273\367\035\363<\365\354t\273;\233\256\274\035\277\314\274\252\223\273<\177\211(=\367PT=4\255\326;\261\227\014<}#\013=B\2464\275\334\272\321<n\327\333\274c\363\244\274W\034\226=\354\013\322\274\335\321)\274\276\3753=q\007i=T\222\033>@@V\274[\254D=\277\371\232\275\243\267\001\275\343Pi<k\241\253\274p%):\311\353\327<\207\310R=\216l\332\274\230\257\314\274\212{\264\274e\016D=\226\250\304\273&\220\005\275e\213\370\275\315\013\240<\332\346\232=\321\237\\<\211\177\r=\257\206S\275\036\200\347<\232(a\273\005\333\204\275\003,\017=\224Me\274\002-c<\277\347?\275. \313<\227E\r=E\006\313\274uWZ<\337:\301\274\255N\301\273>\204\334\274\315XG\275\0345K<c\266\232\275\355\t\343\273\313H\245=\031>j\275VL\201<\320V1\275\004\223\230=\020\214\214=\217\316\031\274\341\253\n;\272\314A;\207/F\273\2063\265=bh\374<g\332\t\275P8\234\275\177\226C<H\2570=\370\237K\274\2578\034=$(\244\273\313\353\254\2742\217\342<\301\027\324\274\375\033\006\275[hD\275\3268\271<\355r\217\273\001\357_\274\267ad\275\305*\300\275~\267\255=L\305\226\273~\232\200\274j\253c\275Z\236\005=\341\276\212\275\306\213k=#\351\324\274\360\323\270<\303\376\004=\341\224\342\274\310\204\205\275\231\374\214\275\305,\243<\313\000\006\2758\374\032\275\241\216]\275Zfr=\234I\250<\002\3342\275\251i\323\274.^\275\273\340\320T=\372\2468\275=x\214\275\037=9<\371\267\001<\2231\233<\347a\002\275!;8=\227\001\212\274|\266\217;\270o\215\274q\273\215\274 \255\242\274\343\202c<\324]~=c\331\371<A\262!=\220\215:\274\233\270\006<\020}V=\313D\276\274U\020\257=\222[\214<\266\332\223\272\021\236\202\275\233\313+\273\237A|:\316J\225<3\246;\275\204V\025=%\206\035\275]=\253<\356\253-=\311\362\020=\337\226\240\274C\035:\275-\230\210\275\3277\017\275\207\n\254<\320\245\026=\026\023\256\274\302VO=Zd\335<;W\263<\036>#<\240\306\t\275)W/\275g}\236<j))\275\270\361\r=\t\007\345:\023\301\352=2\343#=(K\200=\314\235\"\274R\004+=S\264\315\274\316I\017\275\252\351a\275\323%\371\274\007\335\256\274\002O\241\275\230\306L=\204\214K<\023C\252\271\014Z\230<\035u\\\275\357\365\202\273\230{\177\275\337\351\313:\007\007\252\275\376\247J\271\276\022\035=1\311a=!\3622\274\263\326\346\274\026\022 =\220\350\230=\360]\225\274\341\352\006\2743\n\263\275Y\301\261<SZ]\275 \370\233\274\274GM=\220\017\\\275\361\323p=]\016w\275\236-{=\331\277;<\203\332H\274\006J\365=E\322\305\274y;\237<\265\261\255\272\314\223]=\352\343\214\274\205\222\242\275 \261\016=\017\332\204\275qJ\025<@T\310<6\320\274=L\333\322\275r\245\311\274M*\244<lY?<\tg\010;u\225\223=\355^ \275\337\253\t<)\355\254\275j\0327=\252\225\323\275\022\010C=\020%\207<\347O(=\351&\037\274}\020\022\275\203\251P\274_\006\000=t\257(\275\306i\266=\205\232\200\275\311\251\306<!E\261\274\306t\\\274\006D\271;\271T\024=\031\236o<\360\004[=[y\321=$\373\326\273^\363\225\272\274\246\033\275\372\315\362<,\022:=~\232\342;\237}G\275\265\333-=#\365f\2755\304\324<#\220w\275r\277\316\274\364\355(:d\260\017<ovR<\326\334g\274M\247,<\263\246\277;\261\224B<\257\002\254\275\354\225}=\242\005G=\246\'F<|\235e\274!\246^=c\357\014=\226\211\003\275\021\031$=\262\275U\275\263\2132\274r{\031\275\221@\003\275Re\261;7\255\r;c\342\222\275rrx\274\242\257\340\274\305\356\314\275\213\000\336<\242#+=\375}\243\275\212\344\303<iB\266\273v||\275}f\242<\357\"}\274\343\277R;\000\235\225\274\275`\021\275\255\240\265\274\350\204\"<\271\322\254<\013a`<\314\353\227=Ug\225<\200i\211\274e\037*\275\030j\371\274-\267\235<\310X\"\275\264\206+<\341H=\275\350\312C<>\227j\275\371<z=\\`C\275)ge=\342:\235\274\320\376\233\273s\224\374\274\316\316\313;\240\341]\275&\325\272\274\324PN= \022\365<\374\334\272<^\251\022=\300\356z<\332\013S\275\276\365\217=as0\274d\3102\275\215\243}\273Iy,\274W\351:<\352@\357:\274@\326<\377Y\334\274\274;\202=\377D\362<\255\311\223\274\315\256<\275r\254\013\274\020\227Y=\233\n\304<0\331\236\274\266\213?<?Q\235\274\207\374\221\274D\376\034\275\274\351\321\274e.\211\274Q\336\021=\347s\323<\177\220Q\275\222\026\343;D)\247\273S\306\324<\002\025\306\274\2201\207\274\'\273P\275T\2650\275\251\234/\273L\003n<]E\366\273\3309\220\274\346K \274\303k==\224<\314\274\216(\354;1\034\325\274\357\026\244\274\344\346A=\245\334\213=\\4\027\275\304\250\327<;\207\243<\3500x=\350=\205\275\020m(=u\366<\274\327V\245\274Y!\002=ld\233<\236\202\351<\177\331\027\274R\333\254\273\303;\357<\256\021{<\027\000\215;N\235G\275b\307!\275u\025\2079\241\217\361<\32335<\334\362%\275L&\300:e\224N\274\317n\203\271\317\377\273<V\246\370<\335\244E=\016\214\206\275E\251\212\274h8\033\275av\277\274\322\233 ;\200\334N=P\244\226<\000\203\302<\031\323L\273\272\277\004=\256\235\220=\254\207\220=\243y\206<!w\236\275\337\276\224<\273C\201<\251\005\356\2744Q!\274\305\027\014\275\367\302\202\274\371\334\315<`\034\321\273l\3648\274\357\264\016=\346m\234\275gc\312<gc\005\275\021\223#=\206\026\361\275\323T\200=\034\311\376<!\2469=\363\004\336<k\273|;L\3619=\277N\244=\334\353P\275\256\367\214\274u\374\016=\362f\251=)\234F=jX\353\275w\270\276:\2138\030=\376\242\217\274~\001R=-\331\214\275\274\230h=\014g\374\273\244\037\224\274\265\335y\275IR\242\274\n8\244\275q\211\237\272\325Z\361:\267\020\220=\207G\001=\237m\334\273\005rj\274\020\007\320=\356vS=\tVX<V)\032\274\\\244\t=-\216\1779\217\273|\275\360\317\330<vi\306<\352\022j\275I\311\357<M\206\311=\260\265/=\367u\263<\350_\r\275\212\377\225\274\231\202\347\271\340\030\341\274bZ\324\274\261\371F\274|\270h\274\327]\205=w\n\322<2_\307\274\320\340?=\200\266l=&\020\203<\264\243\345\274\227`-=\207;\200\275\254iS\275\215\270\230\274\333@Y<\003\361\315<\310r\260=R\342Q\273=]<\274C\371B\275&\024\311\274\270\030\246\274\241\266\n\273uD\257\274K^\367\274\3649G\275\n\333\250=\342\016\020\275\234U\001;\234\335Q=G\004\304<r<B\275\264xJ\275dS\313<wn\373=5\212\230=\342\340Q\273 !\253;\036\327\270;\212~\212<6\361\267\275\210\tE=\353\324==D\270\376;\002\230\230=\314mr\274\376e\226\275E\204\030\274\014\025\270\275\t\367\301<\010[\212;\205\231\321\274\340Lc=X\026\315<\313\233X<F\317\357\274&\334\r\275\211g;\275\352\2214<\376J\241\275\340\215!;a&\016<\246\215s\275\277\006I\275\261@\305\274\224\202&\274%[\361<\306\263}<\330>X=7n\354=\364\372\001\276\023b\"=(\374\361\274\324\335\014<>e4\275\366d\034=\222\022P=\342X\003\273\010\213\331<3i\230\2750Z\035;\344e\244\275\001\313\244\275Xy\032\275\264\260\';\356\307\003\275\035\220\020=\035\266M\275\235|\350<\001\007\242=3\210\016=C\370)<\330\236\255:\230\235\251\275\234\026\r=~\276\016=/\t\242\274\332\317W<Q\305\305=-\321\255\275\026-\212\275F\215\213\274t\237\205<2\350z=\004\035\017=\334\255#\275\347X\375;\314\014\301<\312\317\345<\'\013\275\274\2703\022<\227\027\020=\204\270\347\274\025<T=Rq%\275\177SQ<\274\372\304<~+\373<X\370\013=u\030+=\317\013V=b_\201=$|\007=\303\344G=|\317q=6\020l=\210\031\367\274\212\247\226\275\272XU\275\217\272\354\274\302\300\234\274\373x\341\272\326\316\223<E\253\362\274+\023H;!\255d\275\230n,\274\361\\\210\273cu\241\275{\327\357\274C\0320\275]]L;*\n\306<\016\277-\275\200\3214<\020I\345\273\027\r\337\273\314\334\327\274\267\204\272:\264=\213\275\244\336G\275\001K\242\274\254\327\314<36G\275\324\300\321<\345\013\356=\211\210\261\275\003>\204=\241E\367\274\2179N\275g\027\220\274\354am\273(oi\275z\212<\271\223\3559<%\250\216<\021\032\253<\"+}\275\223Y\t=\314\276\334=\307}\240<\207[\273<\223\322\242<\177\375\202\275I\001\312<\222\273\371\273\327\314a\275%\351W\275AM3\275\302HG=;3\266=~\034B=\266s\262\273>}\007\274\301Ix\275\255\377p=@\300\300\274RSB=\234T\177<\030\007\247\273.\220\t\275\216\245^=\304_\204\274\202\356\231<\346lu\2756\0305=\207\006\016=\317\367\206\274\353El\273\347nP<\342\262J=\260\036\223<b9#=\264\254:<@\177\r\275\233\216\247=\332\207b\274\2213\252<\333\345\014=\002A\020\275\361\235\003=\240\245\022=\003qP\275\355\271\022=>\022\276<\377\265&<\212\320\263\274\221]d\275\323\371D\273\241>\377\273\021\210~\275\316A\322\274\313\340d< \325W=\344\323\027<\032\031\214\275\216\227Q<c5\327=6\177L<|T\200=\354\307\217=\236\240U\275\366\331\035\275\324\235\020=F\260\364\274\255\177\237<<~\234\275!\200\000=DT[\275\002\306\"\275>^\226<\013\250\246=\007\331\234\275\n\333m=\355Y\234=m`\275<\304P\264\274\370\253q\275\004H$=3\232e\275cp\234\275q(U<qM\227<\360\2349<I\215\005=P\255z\2745\\\r\275\314\320\037\275\317$;\275\3732\357:Q%\263\275Y\262\023=\336\221\033\274e\001G\2742a\311\275\245{Y\275\311\010|\275\023\251\033=\271\224\311=q\222\254<)\305\213\275\tk0\275\376v\377;\034D\177\275\0227\227\2747G\244\274\330<\344\274Q0\005=\374\316\273\274\024\003\014\27596\320;#y+<\307^y=|\374\206<\271\253\247<\230w\214\275s\222{\274K\021\240<\371A\260\274\342\2122<\306Ay\275\220n(\275$\t\001\275\014\240\205\275~\260\202=\177.\253<\370\347I\275\274\005b=u\271\215\274\177O\275=O\234\376\273\223\032\354\274wv\232=g\000]\274\357\326\261<\022*\204\275\330Ai\274\332\237\034\275\313\326\246<\216\332\277<\306b\216<\337>)<\202J\033\274\030\320\361=\"\350\224\275\0240,=\010\225\002=\326\256>\275`\272);7[\271<L\326 =\031\246\336=\214\324\351<t\264@;X\"\245<p!\371\274\341\275\323\274\014\343\364\275\217\340\007=\364\177u\275\256[\024\274\021tH\274K\217\204=t\026N\275$\020\371\272\204\267\235<A\021.=\303\232\253\275|z\006\275/0T\275,\366\221=\335z\'<Q\274\234=Z\227\357\274\230\370!=c\034\306=\355\016\265\275K\177E=\367\347:<<l\303\274\242\272\310;\034\372I=l\313f\274\023\326.\2757\016-=V\276\363\274\0053\377<\220\'{\274U\224\030=i\353\227\2749\270\230\273A\301\'\275\277:\372\272\306\356\275\274\337\276b\274\270r\265\275\311\266G\274\373\027\027=\343h9<\230\315r=\331}R=\256\310J=\200\304\362<\323\2151=Hmd=\t\245\021\275\375\031{\274\267\306\256\274\374\241i\275eH\027\275\325\311A\275\376^\316\274\030s\330\274\2231.\274^sa=)\374\236<\026[\352\273\314\007\n\272\3033\331\273\026\231\037=\353m@=\010\346\202=XM\202\274E\221\231\274\326\253\353:\362\3746=-?C\275\216,\363\274 \226\206\275]a\305\275o\346v\274\205\2738=\314L\200<_\005\263\274\005!\253=\371n4=\037RY<;yW\275\216\305\014=T\364\302\273\332\230\035<\210\231\262=\241\241(\274O\336Q<\313\3551=H\361\210\275x`\373;\035\260Z<U+d;\227cu<q\014&\274\314\311\037\275\323\006\004\275\300\351,<t\230\210\275\251P\003\275yD\005=\010\3200;\223\000\243<\367\205\275\275\020\255y\274d\363Z\275J\235^=\270\312x\275\336\264\311\275)\315\261<\365\n\335\274a\216\006\275Z \212;\214\372{=`5P<S;}=\375\342\202\275\360\252:=\367\033\225\274\370\366\344;\300\007\310:(\304\204=\214m0<T\317/=\257\255L\274\277\r\023<\376\345\031<d\n\010=\341\221\016=3\203\004\275{\013\347<OM\340<\032\23759\333E\227<[\321\013\275\335\267l\275\244E\244;\246\024\253<\237\377\364<\265\366\220=\241b\253=\232l\2139\306\225\260=^{\201=\362\240a\275\251\367<\275\323\375y\274\250x\306\274\232\205\027:\016dZ;z\001\372\274n`[\275\026\236\216\275H\341\t\276\251I\277;q\"\256\275\333\3004=\241G\244\2736P\306=B\017^\275\336\354/<7\260.=3\300\013=QN\016<\223\177j\275>\263\203=Z\243l=L\333\301\274\202O!\275\303\000\262\2740?\017\275\300$A<\326`\207\275P\230\315=\3450^\273\245\001\234\275Q\035\022\275\246\250\033=\253?\312<S\013\225<\252-\036\274\275J7=\331r&\275z4s\275\316c\353\275\275J\021=\342\232\343<\214\375\265<\323\303\250\275dLr<r\243\023\273.\232\032\273\377\233-;4u,<[Q\005>\210\2717\275\256\354\357\274\373\332\377<\021\300?<\213\331C<z\214\232\274\244\304\372\274:\221\022\275\351\224\231\274\304u\251\274\371e\013\274\001a\375<\251\034n=\374R\211=\364j\035=/\373\r=%m\330\274\303\237\277\274\021n\205=\353\353a<\260\316\271\275_Tm\275\357\345\305\274\031&o=zs\262\274\204E\200=\372\325)\275\034w\003=\2051\204=\347\372\324\274\201\367r=.\"\020=\\\323\373<|\3267\275\237kx\273\223\207u=\233\325s\274w\206\201\2737\224\234=\300\244\305\272\351\335\221<\242\304 <\376.\340\275\331\327\322\274\306\372\013\274\230\n\210<\343j\204=\324\256D\274\223y\263\273\023\304<=$\332\t=s\344\265\275S\241\203<~\276\234<\006\353\307<8\222\032\272[\355\271\274\217\177\246<is\013<k\274!\274\3200\n\274z\307O\274c\"\312:\261\312+\274u\340\267=\230\255A\274z\250\304\273~\245q=\347X\354;\372\257\325\274v\215\207=\013\244%\275?\226\243=rc\355\274gJs\274,&n\274\272ft<d\216\345\274\200\371k\275\031\024\007<\032\370-\275}\307\275\274\363%\317<\264\3150\275\203\024\252<V\r\347<\313qa<\037\n/<\023\321\225\274\355\004\006\274!\031\236<v\274\206=W\270Y=|\032N\275\257\206><T\221,\275~Q3=\311\215\314<|\302\"=\"\321m<\270\"\247<`\246{=\034\034\247<RW\241\273\020\274\016\275\210\366&=\335=\313<df\253\274_\231\256\274D\004%\275\306\231\324;2\356\023=T\223\204\274\344\027\372\274\036p#<\373\366\272\275\342b7=\213\t\'<\357\360\333<\310\206:\274\373\246\237=\250\342\034\274\307\200)\275\320y\361\274\254\226\375\27336\230=\253\374\016=\207j\201\275\203\310\234\275e-\035==6(\274\331\215B\273\373\202?\275u9J=\323\021\205\273g\335\347<\335Ct\275\324\222#=\213\324\233\275\250\0044=\376\321*\273\005v\276\273\261\274\250\273\213t?=\201s\226=m\371\344\274Ky\'\274r\n\326\274\305\256{\274]\025\016\2758F&=\357__=\226\223\205\274\037(v\2749\320T\274\264O\"=h\271\205=\2746\024\275ax@=xI\200\275NT<\275\246\255\327=\240\177!\275\242\037!=6\201\322<l\360\016\274f\033\006=\003\214\3228\211\276\201=t\2617=\207k\205=\264\313w=\203\351~=}\0308=+\355h\275\370\316\367<\3632&\272\0255\010\274\005\327i<T.D\275p\240\220\275\002\337P\273\367\273G=\231 \241\271\316}\030=O \303=\256\310 =1\031X<\004\374\030\275\265\377<\275\033Yi=\313\003Q\274Rn\337=\310]\310\274\027\200\211:\374\230e=\347V\323<\267P\021\275\3667\270\275\264\340\016\275\227\236I\275\351\207\007\275\346g\003=\320m9\274\3466\334\2740n\365\274&|\016<\305k\002\275\361\031\262\275[;\002\275\313\345\247\275\221\205\010<\333a\314\275\374R+\275N\346\230\275\267\353J=\332\257\223<Y\227\327\272Lf\021=#\362\314\275\345\204u=\375D\224\274\333\304\235\275\336\265b=\003\237\034\274\324\205G\274z$\301<%\310$=\334\010j\275\010\361\350=9\026\335\274\227;\360\275W\250\203=\010\323O=\376\352D=\336\235\214=\301\310\203=z\037\250;x\266\010\275/\320\250=\374\344\270<t)X<\013\270\273<%\317\251\274k\247\202;\362\264\007<V^\266\275\000\233\236<\20212\275\321K\315<7\'T=\213F\204=\352\213\245\273\013\371U=\253z\223\274Pg\232=\254`\t=\004\231\230\275i\267K\275\003\006H=\214\232\304\274\327:\034\275\251T\246\275ck\017;\363-\312<\306\0218\275K\274M\275\022R\007=X\204\211<iFc\275\357f(\275=\366;=\211y\025=\246F\r<\313:\314\274\216\232\362<\247*\177\274\326.\224\275\354W_=\375a4=\301\350(<VHa\275<,5\274\232\321\372<<\351;<6\271/\275\310\246\361\274C\2262\275\263)\355<\353\200\033\274\252u\252=\265l \273#}\210=\321WR=\316\200\273\275c\004G<\276\346\324<\321\'6\275\260\203\033=p\202r=\353\003\027<\177\224\002=\351.\344=D\271&=\231\325\236<\272&\216\274=@)<\263\325 ;\023\327\244\274\347m>=\222\030\211<\355\337\231\2740\0052=T&\257;\304\020\021<8\221}<\320\002\251\275\036\027\373<s\027\022<\243\235i\274\002\031(=\376\216\030\2744\275\237\275\\^\262<\342\351\363:\200-\"\275\275\200>;\354\3100<\250\255\256\274\364\2571\275\323\2614=\004]\310\274\216\363\201=G\236\302;b\336\344<5\232^\274\365\333\220\273\0214\233=\364\202\215=\3700j\275%Q\224<\255/J\275a\240\231\275-\314\032\275\245p\333<\037\035m\275s7\017>ZU\001=\251\312\341\275\251\261\250\275D\023\236;;\204\'<\301\257\266\2732sC\274t/\215\275\355\244\330\274*\254H\275d/F\274\226O\347\274)\313\275<\324\213\211\275\360\362@\2741!\303<\304\257@=\r\333\022\275;\257\301\274\'z\216\274\202\327!<\327\276R<$j@\274\217\236\r=\231\031\225;$\021\004\275\300\200\247\272\371\353y\275\372\n\t\275]\367\201\2754\3741=yn\312;:]\252=\216?\\\275\023\377s=\231\231&\274\363\326\017=\241w\355\275\2012-=\333i\\\273\256\310M\275\3143D<K\373\224<\271\2202=.ob\275\305z\221\273<\001\366\274l\370\031\275\212\322\252\275\356c\365\2749\202\301<\341z\014\273\033\211h\275\323D\205\274OV\000=J\204\342\274\362\370\010\275\233\361%=\324C/<|\211\372\273u\212\326\274\211\205\0179\020\205\372<\321\270\237\274\322\221\210\274\370\245f=)[\203=\021\375\001\276\000\365\360\274\321\214o\275\026o\034\275\327\022\345\274\001\207\007<\246V\311\274\345\347\036\275\226\336~<\272\375(\274\004\"\275<\250\320\210\275\2502\377<\013\033\017=\237\322t=\244\343\014=+\276\022\275\356\335m\275\013\327H=\314\021\014\275\320\300\223\273\300\277\302<t;`\275|\231:\275\006\010\310\274\024\340\343\274\364\t7\275\332%\343\274\235\'\356\274,\244\203=\357\252(\275\006\216J\275\215\242\312<\032\205\036\275I\242\255<\321X\300\271\341K0\275@\226\221\275\337+\235\274\327s\003\275\331\025\030=F\330\355\274\315t\224<_\227B\275x\373\200=(\311\003=o2S\274\2223\331\274\260\362\261=\331\023\234=\361\321\211\274\321(\250=V\232\256\275^\227\247\273\237\223\277\273=\036\250=\351\034\365<\016\256\373<Be\200=N\342\202=u\017\374;w\277,\275\244\204(\275\021\344\222\2754Xz<\022.\257\2758c\265\274%\335\246\274\032\267J=\250\220\301\273\230\2075\275B0\267\274\333\260\210\275\3648\307:.\252\357<\0048\237\275\356_Z\273\024Q>=\360h\255\274\327.\346<\347s}<\266}\321<\311\371\363:<=\252=nc\347<)\226q\273)S\334<\245\317\264\273\304\014q=\256\237X\275\r\215U\274a[\224\274\347\3447=\227t\273\274\324\"\252<\021\236\230\274\r\213a\274\036m\230\2751\001\355\274\343\345n=wL\005=a\246\334<\322\336k<\350\203\026\274o\020\373<4\030\342<\271\365\246=\r\024\275;!&\264\273\224\225V\274\270\t\200:\237\303\027=!\254\235\272\373\254C\275\266Z\203=+\313\256<\265\260\016\275\r\371y\272\264\225I\274,=\316<\027S\220=|\252\033\275\017\202\207\274(5\263=\003x\351<\026\340\237=\246\227\276\274\237[h\275\314\020_<(G\200\274\326\014\262\273Ao\267\275\0101\302=l<\253=\273\247#=\017\3071=\307\362\302\274\021\267\021\275Q\334\177<\223C\366\274\313\3545=\023\251\255\273Y\336\371\274:\240\307<S7\010: 7\003=\337\227&\275\003Q\235=\374t\t\275\257u\253<\302\363\210=\216\316H=Kmb<\305\003$\275W\266\223<\245I\321<\005b\017=\214\335\2478\253\370w\274\212\253\340\273\204\207\273<K\236\247\274\236\244\257<5%\025\273M\335\226<mm\203\273\310\345\237\274\330\010\313<\234\367\310\274\274\026\230<K\225\342<\256\266\252\273\206\344H=D\027\212<\2774\026\273+~\227<\025lU\274\201&\250=\374\210v\275\031\035\030=\306\272\256=R\203\202\275\032\322\006=\261\362F\275;\275\327\274\220\201\204<\356F\t=9A\350\275\027\376\t<Y#\305\275\237\365u=5xp\274~\230\312=\360\234,\275\330\020\234<\265\257\323<\301V\001;A\003\204<\352[\335<;\037\246\273^O\217=]U\230=\227f;\275\372#\316<]\201\334\275\211\006\002=]\367\236<\271:?\275w\225%=]\277\261\274\nO\265<J\370p\274\231\244\375\275\033\202\213=\033+\361\274\016I\313\273\021\314\273<\241\311\272=|\305\353;u\275\231\274\205f\270<\353\343@=7\017\014\275\257Ks=+\261\030\275\213\344\"\275\2014\205\274\266\025!;\274~\351\274\026O_\275\232v\261<\006\226j=\263NI\274\200\335\252\272??\205\275$Y\234\274\016\367\202=\220\2521\275\024\365\363<\203\016\217\274\273]\315\274\2450\360;k\362P<\234a\325\273\200Q\003=\031\326p\275Y\024\312:\202\311\220\274)\342\310<(<y\275>\001\234\274\212\363\216<\203\374T=\366\312\223\275\251\240\260<>\303F<\031\313#\276#YE<\241\263\216\274\037N\003\275\377>\"\275}\376\234<\021\352\254=D\005\005\275\t{X=\331o==P\356\227=\252\354\277=2\267\002\275u\277\003\274s\243K;\272\377\361\274\264\241\263;\206\r\240;7S8\275:\346\270\274,\\\353\273\315X\240=\241\273?\275\261\251\'=\361T\267\2743\027V\275\253(\203\274\207\346)=P\364\371;\224V\273\274\264I\007\275s\"\242=}d\316\275\3104\212=\210\261\027\275\300P\313<yh\314<\222\205\021\274\277n&=\007\307\335\275vD@\274\236\233\335;i\034Y=#m\317\274\335R\214=\002\3464\274\332\034\236\275\363;\232\275\0134k\274\005\361y\275\307\304\226\275u\216,\275|\373\005<\3644F=\223;\270\273\354\017\232\275\'\335\036=-\335&;\025+\236<-\301\"\275\272\274_<\\\'y\274\204\325m\274*\323\251\273d\347\306\275\204/W\274\201\301\201\274<\033\314\2733\211\267\2741\267f\275\272\\\034\275\336\r\006=Fju\275\217k:=m\327\006\274\364\030{<}\335k\275\314\242I<\301\375\275<\363\252\203\275l\0328\275\026;9\275O0\372;8\271\222=\362\374\212=\021}\200<\245\034\222<\240\370Y=\2213\256\274\024\006@\274I\332G\275\033\224==\274\232{=\252\0161\275\241\337\245=\265\317\227\274%>>=\337\360j;\235s\023\275w\231\231\274\027\037\323\274\201\372\021\275\010\224/=\t\3375<\213km\275\257S,\275(\253\036\273\266\\\265\275,\352\203<vr\'=gr\235\274\025\3341\275%\315\264\272!\014\366\274P\215G=hm\277\274\243X\304<\275\2119<:\025\312:\212\327\022;*\t\316<:\004\241\274R]\327\274\177_\244\275S\3236\275\030\200\230<\000\006\n\275\206\200\277<\027\022\003\273\2359m=-R.\275?\243\353\272\016\'\301<\2609\256\274p\346\224\274\230;\206;V\353\363\274A\227\303<N\265\200=\240\344\257\275\324\354\013\275\032\022\216<\264\300\026<\033\334\201\275(\261\027=\000\2613<@\035\215\275\235!P\275Rb&\275\337/\351\275\360\360\023\274\030{4\275\300W\010=\344#\240<U\267\365\274\210\'\255\274\205+\314\275\3631\201\274\247\372\227<\313\033E\274\037\277D=\362\236 <\303\313\213=_4\243<!\350\337<\372\236\321\274F\3768\275\322\231\200\275\'a\004\275\007g$=\tQ\243<\037\265#\275\t\004\'\273\363e\231\2730\323I;\007\363\226;\356\314\223\274\260Ur\273\300,\272<\340\032#=\271gE\274\237WF\274\313\246\346\274\020\032\022=#\211|<\257\237\241\274T\t\264\275\233{\234=`\300\202\275\216\310z=\2434\314=\264\243\031;\316B\232=6%\023=\034\001\005\275\033\353\235<\350.\032=\220\205\034\275$6\303\274\256\302\330<\262\213\235\274\252eo=\312\255\027\275f|\212<S[\261=J\313\304\273\n\373\377=f\023P\275\002k\037<L\322\266<\253]?=+R\317<\035\246K\273R\036B\273\350\331\033\273\365\022\300\274\325\236\201\2739\021\326<z\'Y<U\356\316;\241\230\310<\210d\320\274`\337G\275\274\016 =\215\341w\274\\\266.<Ac>=\r\010\206\274\003Y\326\274\303\332\014=\250\363 <\034\024h=\037JW==\027\260\274\333\360;\2742\357\022<<:\320<\2152\315<\345\0349\275\345t\221<$\316\265\273n\2015\275\200m\332;\022J\025\275?\221M<+^\262\275\212+\310\274\347\374\260=\333\316~\275\010;}\275>\027|\273X5\232\275\000\016G<\224\361\241\274\344T\251<%9\215\275\007j\364\275\002l\253\273\245\200\357;*\320\'=nm\324\274\307]\r\275\377\207\204\274\374B\004\275\002\236\202\275\327Ta\275\230s\203\275\356\r\220\273\020\217\255\275F.%\274\345,g<Zj\266;\326\267\257=9J\202\274,\316\337;\202U\343\273[\303B\274\264(\204\275\032o\347\274\376[\351\274\376}D=\365\337\005\275\031BO\275Y\251\272\275\'\016\223<\263G6\274!\270\014\275\026e\027\275\213k\003\2745#\017=K\356\016<\27487\274\027\314\034=\177\010\324;\024\3341=\377\003\024\275\241\340\020\275o\013\213\275\331\264\024=\255\317\340=\302J\356\274/\310\236\275\317\342\341\274\216l\014=\007aI\275\260\365k\274\277%c=\001\232\305<G\373\326\272\375\326\237\274\267oM=\356B\314\2744Rn=v\215\221=\334\327\357<\202\304(<\026\311\001\275\260\261*=\366\207\302<\335\021$\275\0256U\275.\340\013\275\264\034L\275\257\270\274=a(\254\275\341}\217=\t\232\022\274\241%\376<J|\302\274\240\334?\273\340\336\350\274u\016\270:.\035\255\275\231\233\363;\202+6=*\257\221\275\275Z\255:\\\267n\272u\212\030\273\311\304\034\275\217i\004\273\233\372\253<\253\002\342\274\022#s;\317T\230=\333[\260<\224\254\364;\251\000\337:b\201\247\275LV\227=\310/\016=&\301\210:\342\256\234\275\251>\341\275T_\205<\375\005\216\273\307:\342<(3\275=Ld\264\274\211\375c=\037w\207\274\215d\272<\344s\020\273\002Y\005=\351\270\"\274d\316\261<\334\203\272\274\211\031\306=\317\267S\275W\227\244<\201\0222;\302\314;=/\213==(\016!=J\025T=\342\020\247;\310\301\365\274c\3275<3\316)\275\331\344\004\275y\217\200=\323\303\021\275\272\351\301\274h\332G=V\332\265\274\003\233b9a\326+<p\211\204\2755$Y=\0230W=\201\217\372\272\335$i<\027\321X\273\366lY\275\215\326\210\274\213+\234;\200\\9=\3273\r=\223\206\273=Aj\201<\2323\277\274\3530\272=\003<\326\274\344\364^\275 \277\341<\212(4=\260\301\333\275\010\332\t\275\027\302=\275Y@9;n\026l<\263\016\206\273\205\234\r=pt\201=\340MK=Q\002\036=\246g\347=k\265\225<\211\230\023=\033\345f<bV\363<\240\020\220=\304\204\031=\'\314\377<9\253\340\274i\032\210\274\314\273u;\220\304\020\275}C\247=*\340B\275[\206\273\274-#\255\274\274\\\005\273U\363q=3=\010=\025 \n=\203\'\243\274\371\242\233\275N\340\306<\203\t\252\274\023\216\247=\222\261\366\274/\334\270\274\003W\220\275\375\343\241\274\014\207C<\037bg=\025:\334<\375\362\341<\000\231\261<\334\010\266=\321e\334\274\002\020\344;\023\362H\275\306\255G<,5\336<D\177x:\313\\\"<\252\2367<\271\243!\275\301\331\377:kv\212<#Z;\275\205\306I\275V\254\010=_\340\t<[5,<>\246e\275\334\320\r\275\020\213\030\275q\265f\2754\225\302\272\224\022+<\300\344h\275F\224\314\274\n\237\\=\023-*<\257\323\353<\213\344\204\274\255iH\274\245-\321<H\271\201=\341t\022\275\353\321B=\010\231\213\274\002\302M<\007NG\274n\032\010=t_\332<Vv\254<\237Gf\275\2113\335\274\347K\336\274Ts\230=W\260\311\274\021\333\242=K\232_=i\342m\274\235\274\213=\221O\021=n\361\204<\014o\322<,1,\275\244\223\275\274(V\200=\316b\'=\342#\217\274p\260\000=\03712\273\346\203#;\214\031\221;\346\330\251\275\304\213\225\275\032\373Q<\271\334\302;\325C\033\275\353eR\274\221\250N=\366\355\005\275\031\016\376<\266\265\337\275x(c\274<\003\352<\253w\017=\246]\376\274\234\262\006\275\216t\260\274\241\005o\274(\315`\274\216+\234\275Mj\005\275z\3756\274\263\300I<\212\255\r\275C\245-=\335wJ\274,\342\016=\262\234\315;\337I\305<DY/=bT\377<~\243G\273$>\276\274~\304\235\274\017\335\010=h?\\<\n\302M=\361\333y;x\216\250=-\275J;f\215\330\275Z\305\274;ia\320<4U\"\275ug\002<\313r\345;\340X>\274\323\255N\275\023\267N=3\245*=P\262-=\271\235\221<~i\246;\205\2753\2747\032G\275\370\264\002>)\312\003\276R\261g\274\271\340l\274x\006#=hw\210=\325G\275\274f\004\346\275\356{B<\372C*<\226^\304<\355\2165<\036\177\240\274\264P\310\275\001w\214=]\262\314\274\205\243\024\275\321b\232=Z}\350<\343\217\025=\352\023E<\374YA=\2336\377\275\246\311\331<\350\347\216<L\216F=v!U\275V\350\363;\001\315\030\274\030\340S;\341\366\207\275\252\211!\275\335\303\274\274\010?\266</\216\236\274\361\332f\274,\341\257\274G\244\322<\330)\247\275e\224\216\274v\347\317\274\'\025P<\230\244\251<Z\302\200<\241k\221\275\215K\337<\351b@\275\007W7\275\025M\312=\224\222\321<\334\201\352\274\262\030\251=p\312\320\274\355\024B=\027Nu\275F\361\345<\256Y\343=\377\2232\275\252\262Z<_iZ\274\032\216\235\275\345\270\335\271=<C<\3641\3329q\233$\275\254k\243\272@\201\322\272\346\220\265\274f\260\271<\251o\334\273\262\001\264\275p*\267=\236\\\360<\307\220\315\274[\357\222\275\0231\320<\n`\200<D\265\354\271O\t?<F6\010>\nr\211<\225^\373<\220vO\275L6\373;\357\235q\274\036\375\237\274\304O\347<e \201= \3247\275\241\206W=\363\355$=c\226a\275R\027E;K\013\333\275\222\236\233=\025\262O=\234cp\275K\017\327<\211\222\034\275{\316X=\336P\375\274J\367\235\273\020\032\235=,\346J\275Yr\231:D\2032\2757\3441=\322\3551=\"I\022\275\222V\373;\3115\343\274`\260\324\273\353\371\301;\017\340\321\274\353\321\033==(\001=\355\tO\274?\243\277\273\357C_=\023p\211;l\027\"<\217\305\221\274\277\254\317\273gu\\\275\353\333Y\273d\022,=\372\320B=\231V\366<\314\261%=\227aK<RdS=\2730?=8E]\274\031\3650\273\275-x;\324\2724\273\230+\350;P\336\362<\326\301H=\333)j\275zu\265\2750r$\275\205\354\356\273\366B\351<xU\331\275=2l\275\025m\306<\207\020\301\273\343\017\031\274/i\305\274>1\230=@\r\236=c\330P\272\342\366\205\275\266\237\253\275kb\237\274u\007 \275\260\002\010\274\216\332A\274|\374\215<\305\233[\275p\257.=Y\364\303<q\026\217\274\362\322\003\275c\333 =\352\277Z\275\235\311<<hs\207\274\233\"\360\274\263C`\274V\225B\275\261h\313=\251iS\274\262,\203<&\254\201<F:4<\251\372M\275\360\315?\274|F\210\274\013\302\001=IH$\2758\354\251<\313\026\252\273j[\010\275=f%=\241\212\377<=\226\335\274hr\226<\317\221\350=\223GP=\312\002\222\275\316n\267\275\242\"\272=\300-A\275 \344\277\275|\\|\274\251\213\"<y\230\361\274I\375\352<T\334O<\212\242Z\274\300[I=\332\031\023=N\026\363<\240\370\306=\352D\370\274\377\321d\274\325C,\275\3222\r\275\373i\367<e(\027=\344\304\304\275\023M1\275\027\303\355\273\'\316e=\255I\007;\371G\222\275,\206%=\327\246\215\275\313\374\305;\267\374\213;\246.O\275\373\256\260<\n\203\236\273oj\244\273#I+=\007+\251=\273|O\274\321\030\235<\305+\216\2751Mc<\260\321\350<\201<{;\211\377\223\275\'\312\241=\254\302\370;*\267\234<e~\342\274\314\341\021\275\013\200\334\274j\306\031\275\365\277\200\272\300:\224:\324(\016\275\352\010\360\274S\223M=p6\222;#\222]=\217\256\000<\273\276\342\273\267\256\257;\'Q-\275[\025\236;Cs\177\274\325\226\005=4\250\347\274\232\353U<\326\254\352;\356\356\347<\234v\177<\227\337D\275e6w:\312~\233\275\240\343D;n\014\236\274=z\266=sp\215<\335\332\240\275\321\312\036\275\016\250\004=5\204B\274\260W\274<\347\357\317=\036\007\\\275\210\274\252\275\232\251\r=\365p-\275\351\207\213\274\330\373\204<\025\330\001<\323\254\355\274\346\356I<\037:\240\274\256n\340\274\004\270\016\275\030\177\365\274[g\237<TiG\275\033\203k<\242\264#<z\t4\274D\276\355<[\177\275=\003..<\334\257\215=\373\r\215=\302`#<\235\346)=%\253\251\275f\307 \275\363\"\212\274_ua\275;\244\005=\\e0<\210\312\253<\306\355v=+S\304\265\210\177\254<8[\000\274!\233a\274\301\201\n\275),8\2756\234\230<E\375\034=X\"i\273s\337l;\313\036#\274\rW\255<\317\302\t\275\374v\204;*\336\371<VYR\275\340\3104\275\247\016\320<B\365\333<\241\345\n\275-\230\231\275\207,\006\275)\222N=^\223F\275\313!\357<\326?\"\275\330\3715\274\360\316\361\274?\273\207=\313\203\254\274j\035\317\274D=\003<V\206j=\375-\365;(\231\206;\003\263\322\274u5y\275u\243\265<,^\006\275~\270\2658\200\177m\275\311\233\254=x>(\275\325m\327<&\014\013\275K\024\211;\301!B:T`\200=\276\273}<\177\001\006=_\245\365\274J7\351\275\033\311\021<<\314\273\275\313\277\214\274\024]4\275n\017\242=Hs\323\275{\250\000=\301\307E\2753\r0=k2\216=\234)\265\274\263>\022<\355\244\224:\245\346\025=\003\224Q\2736\211\027;1\356\333<\"P\212\274\272+H<zf\001\275\001\212\006=2\023\270=\221\256\005<\036\304L<\367\246\036<L\235\021=R\362>=O\313\021\275mm\253\275t\002\346<\013{\024\275\033\336\r=\0312-\275\223\260\273\275\000_\031\275\260;\n\274\353\001V<l]R\275Re\006\275\261=\004=\225\3175\274f+\330\274\245\211\330=[\365\331\275Y\3778\275\307\301\250\275\217c\335<\341\2100:\301\202\035\274{\204\237=\024\250\000\275B\2552\275s\375\243=\273\t\207<\311LU\275\352\356\026=\352IP\275\034\340\250;?\352\273;1\002\034<k\330\001\275\375\312\201\274\211<\335\271\315U?\275\243\020\\\275\353v\201;C\245\220;\257\n\017<#\"U<?L\375\275\266\177\331=\335\265\251;\030V\212\275B\337\303=e\343\254<\n\177\027\275\201Fz=\371\323\037=\234\304\217\275\226Q\243\274\3769\233=\035\365/=\243 (\275\004/m\275\216\222e< b\270<\265v,=!G_=\014\227\021\272\214\222\035\275\003\020\322:\014\313\206=m\217\323\275nm\334\273J\202\352\274=\027\220\274\243P\014<\375\374\000\2752\252B\275DJ\234\275\254\026Q=\2173\321<\203\372.\274\251N\204=\262\251#=\013A6\274\367\0363\275\004\003f\275\322\311\237\275\345\307\230\274\246\274V\275\2046{<\301\371\256\274q\267j\275\345\360W\274:pT\275]\203\244\273j\254\275\273\330\217U<\341*\016<\227q4=\220\254\311\274z\034\r\275\\\224e=\264l\"\274,\r1=\021N\325\274\337\222\254<\252\360\253\275\350\346\021=I\263\212\273J\301#=\2457\263;\220m\254\273\235WN\27186\204=\374\231#\275\"vK\275\027\035\205\273*r\231\273\362`T=\177\247E<Q/x=\212\237A\275\321@\214\274\\\374\002\274\212\202\247\275\213#r=1)\t=\003\026\232=\014\211\315<\243(\024=\340\357\t=\352dF=<\334\203=\225\n\224\274%\327I\273\024\373\032\2751\035\227\275\353\355\327\274\243\t\301=Es\355\274\224\320\246\274\230l\023\275h\315\225\273\350\034\310=8\312t=\312\317\352\274\371\204\364=\347\304U\275\235^\021=G\321^\274\020+\020==={<\3607\360\273\213,\326<\003\205\307\274\255/\016<\320\330\013\274\363\033\010>\340\0059<\235\222\031<;l\031=\335g\331<J\270\375<E+\216<*\013\324\274\327c\246\273\344\024\025\275h\020\334\274S\177N\275\323\335\353:\257M\224=\372u\255\274.q\225\275\024\260\300<\320\222\372\275Xu\t\275\247\0249\274\347\312\253\274\037\347\200\273\350+\343=\364k,;\026\251\027\274\324\023\244\274s\205\224=D\237>=8E\223=Dx:\274\035v\306<\027\344\322<A\307N<\254\202K=\341\200\212<\267\333\207<\032\326\317\274\336\340\324<\002\352\213=r\247J\275\\\356\370\274[\254\021\275/Z\240<=J\002<\035\307W=\320\301\261\273\3359\302<\333\304d\275\220~+\275\350\302U</\307\225=\214P@\275P\023\031\274\315\270|<q-\n=G\215X\274\230\014\021\275Q_$=$\210>=$r\032=s\261u<g\263\207=\276\223\356<\320\025\253<6>\227\274\370#\310:\207\343\'\275\370\201~;\264\366\271;s\307\024\275\206;\242=\351\251Z\272\316\355i=9\036\016=\014\010\004\275\331.\305\275&\000\220\274?\341\372\274\031ad\275\252\213K\274\233\0167=\026`~=U\345d=\022\367\243;\000\342\275\274\230\273\361<0\253\344<\203\331\250=\340\177\231\273\344\345P\274A\2256=-8Z\273\007JM=\347\230\347<\241vv=)\301\301\274\365\026\037\275W\324\036\275\222z\355\272x\0217\275IBv\275a1\316\274\255\343\243\274\332\023$=\013n\245\274\326\3318=\2178i\275\216\247\366\273\022\000\216\274\2630\225<\211\262/\274T\225\211\275\rLO<y\233\234<S428\352\254i\274\025\305\3677\"\001V<_\022\034<\376\3077=\264_\357<88C\274\270\246\220\274,4\255<\236\023T<{\241y:\276\226\240<\220g@\274)\2428\274[\340\014=nbH\275\023\330C=\302\244\3079o\230 =u\337<=m:\224;\327\316\271=\005{\356\273\214\206\330\273B\354\200=\177\021\003;`K\260\275p\352\252\270\177\341\357<\306\256g=\315\253\317\273E\232\037\274\374i\256\274\262\256\030=\n.\351\275h\332\376\275`,\262\272\210\265\315<\375\2359\275!\035\360\274\260\035<=\375u\203\274I\244$;\020\315\202=-\333N=\244`\321\275\346\257\204\274y$\301\273\227\002k\274\355\2629\275\201\340\374\273\225\366E\275\273\340\224=Eog=E=\"\275!\237 =\237J\302\273@\030-=\335cV:b\013\3029AK3\274\271Z7\275\020\207\315;\316\235b\274\276\375y\275\257 R;M;V=@\354h<[\326\226=\242w\250\2743?\272<M\315D<[\330\303\274Y\221\352\274\2749\363<$\025S=u|\022\275q\331\003\275\025pl=`\205A\275I\260\301\274\016\026\265=\006h\250\274\347\222H=c*:\274\275\313\335=\315\342=;2\326\357<\365\0331=\330\230\007\275\262\242\342\274X\331\214;4\376b\274\"\361\364<\346Y\263\274M\217\177\274\226\363\214\274\250\343\r=\373\305\003=R@0<2\276k=\233\'\353=&\027p=\367\001\241\274\2446\207\275v\2266=\301J=;\321\021M\2756\302\276;u\242\304<\n\026\227\274\212\303\312\275\366\320k;\212\346\240\2747\307\337\273~X\220\273\260\251\312<\227\\\030\275\020n6<\204\303\251\275\n\246\224<\002\n\010\274\341\313i\275\204;\177<\347I$=\256\016\374:\276-N\275\207\031\326\274\233L/<\217\030/\275r\346\251\274\232\317\207=>\350\212<@_j=\270\223K\274\025\263\021\272\007]#<\r\364\261<\330\256\223\275A{L\275\326\323^\2759\350\361<X\261!<w\362\365<_\351s\275EN5=\366F/<\340t+\275\230\240D\275\210\231\277<\3234\325:\305G\226\275tf\031=L\002\217\273\332\002\374\273\306z\251=\352\217P\274\256\235\374<\264,V=\226\370c\275t\301d\272u1\375<\346\321m\275\330\024\324\274\267z\204\275\\H\210=\322\350E=\256/\376<L\177\\\275\224Fu=[\013m\275\013\220\375\274D\r\227:8\314\222<\305\311e\275Fn\205<j\276\206\275fs\215\274\241m\201\275\331^\331\274\006\027X\275\300\265\021\275_\037\247=\321\364\367<8\264z=\210\2440<\n+\330;\0046\326\274v\014\210=\331`\362:\236\333\347\273\036%\303=\363\025\023\276\261/_=2a\032\275g\360!;\364\315\263<\214\276Q=\353vQ=\n\275\023=\307/\202=>D\367\274\3708[<\214Y\217=X<8\275}`\325=\013P\330;O\246;=\307\354\014\2755\262\306\273\210\330\024\274a?\020\275\222\022\265<\217m7=\243\360\010\274\377.\275=\200\326\377\2746\267\354<\232\351\025=\240\2657=R^\375\2749i\256:\306\"\002=\320:q\275\217\314\235\274!\2674<\020\0311=\2616K\273\263\016\265\275?\000\373\273\350\005\240<I\313y=\313\253\210\274\013\207\266\273\3471\344=?\303\362\274\316\237w=\005\251\215\273\003\006\336\2735\\\010\275\254CO<\303gg\275\200\311\027\275+]\330\274M\024\310<\201\272\004=\347s|\274\356\274I\275\256\267R\275 U\307:R*\004\2757.\226\275KV\205\275r?\311\275\213O?\275\252\256\201\275\035\375\352<\261\372\316<\371&\014=\233\314e=\030U\266\273[T\340\274\030?\366\273\367\311Y\274\211 \361\274\370\031\006;-\376\355\273\025\331\013\275\3130\216=\305A\006\276fU\205\275\267\324\324\274\353#t\274!\340\274\274\013\346\364;u\311\010<+\r\004<\262:\345\274S\017\204<vMI\274L]*\273\340\310\177\274\304\374\202\274\014\220\014=\272#9\275\321\306\251\275\317\374\026\275\036\221\375<\270\364\235<`\347\241\275\224z\264<\325\263\211<]W\212\274\021\341\376<\311\n\3149FA\016=p\302Z\274\334\\*\275\000l\244=\216\352\270<\031\207\250\272\253\317\203=\342\267\r<KiV\273\266\327\212<\374\177c=\247\261\027=7.\n\275\034\356d\274O\277\230<\372\267M=\273~\020=\016\363\246<L\3373=\2315\211=O^R=\"\n\237<\337\006\274\274\030\357K\273l\2102\274\256Id\275\032\253R<\223{\273=\t\304^<O\245u=\023\324\030=\210\252\312<p\264\275\275\216\353\326\273\003>}=x_\223\275\177\215\342\274\370w\203=\327\033 \274\301\230\232=\276G\264<\013v\225=\253\256d\275\024\202G=K\224\304:\341\375\206\275\267u\251=\353\204\271\271\223u \275\361\r\210<\204%\302=\035\337\332\274g\354\264\274U\375\"<\006d\362\274J\332;\275\330\315\365<U*9:\367y0\275\0242u<\363\277\021=\201\377\025\275\222\014\245<\325\333i=(\204\037<\037Af\274\374\350\003\274E\0263<k5!\275r\213\314<\001\274\226\274P\'e=\216\200\244;\002\3117\275\253\337&=\310D\233\275\312\217\201\274\241No=\024\013\333\274i\"\205\274\014\307\213\275\266\nR=\321\006Z=|}T<\213\345(=?\t\t<9\310\232\274#\217J\275\250-|;\251{\210\275[\250\331<\374\266\236<\024\211\023=vh\212\274\320\333\207=\356@\334<\364j0\275O\234\323<X\222\002\275\025\322\267<\273X\345\274\343o\324\274$\255\355<\316\265\024=\030(\014\273\263\307\305\274\316-\247\273R\210\261\274\271\245\202\275\"_J\274\257\326\322\274\010\3759;\215O\234\275\366~c<H\027t\274\r\005~=D\022\326=\346\344\374<\374/\274\275\331!\005\274P\214\016\276\333\264\266\275\263x\023\274\014>\213\274S\376\230\273\212\277$=\264\236\237=\030\333\005=\332|\245=\314\361\316\274\305\006\323\275\020\246\200\275\210\303\207\274\374)\367\274\226l]\2755\260\310\271\027\227\211\275\312\373E\275+%:=\321(\233\273\274\021?;\025L\211\275^\326\314<\306\277v=\326K\324\275]\224\346\274\266\0131\274\0066)\273\266g4\275\204\201\312\273\375N\030=\2308\010\275\031?\343\2745UM=\014*\r\274\031\377o\275\013\261\265<,\013\377\274\020P\017<\375\272\005=\252\223\004<\340-\241\274\375)\217=i\357<\2757\0161\275]d\260<\245\230\271<\214\304+=\342\030&=\325\255\240<^9\263\275n\035\013=~\002\347<\247\306^\274\201\333\006=q\360\226\275\277\004\335<qn\227;\347\366\033\275\235\257\206\274\220$\016\275H:p=\314\256\245<d3\303\274h~\211;\203H\216=\231\315d=\014)A\275\374\235<\275\027\233\013\276\305\344\313\273~\n?=8\271\004\275\375\366\314\274rF/=\342\374\247\273\224\000\221\2750._=\325@\023=m9\020\275\236q\203\27527)\275\177MJ\275\205B\004<,\341\300\275=\036l= \020\027=(M\235<4\376\033<\353\322\235<nU\244<\227Rn;N\376\334=\207\\\353\272\212Z\211=\246f\r\275\336I5=\345\316\364\2744\252\330\274\215\324\226=\351\246\007\274\3259\330;\305\327\203<\321\034m\274\016\240O=8\265\007=\214R\332<\005\303\037\275\000C\346:\337\267\221\273\267\235\r\276H\340\253\275\316Q\275\273\342\366\201\275[Y\346\275\267d\371\274\364\307B\275\267\357\324\274\205o\033=;\266\242\274\3368/\275O<`=\341\371+\275\311z$\275.\242}\273\351J\235=\241~\206<\332\360\245=\000\316~\275\332C\251<\313\205\262<\004)\323=\016\304\346<\003D\312;\230\324\323;\341\244\252\274\345\213\242=\371\341]\274\301\222\253\275R\321\376\273\325d\033\275\307(\272\273\362*\334<P\247\014=Y\351\216<s\317\006=\001\024:<)/\211=\200\3337=\025\340\234\275E,L\274\273Pc=\263aC<\234/\267\275\363U\204=L2n\274\333H\352\273L\345S=\345Q\261\273{\246]\275\235\341\220=nW\214\272\360O\022\275\204\354\030\274&;\227\275p\036v\275\356\030\345<\353m\201\274\233\010X=\030\250\220<8\355\215\275\034{\226=N\007\000=D\231#\275\351\276,\276\347\370\t<+WN9s\335\321\274\370\306\237<\333\026\177<\220\302\004\275Ds=\275I\206@=- (=\204Z\022\273c\205\367<\274\320\224=\034\021$=\314\221\003=mFg=]\014H=E\240\t=\353lL<\335\3758<\'\205;=\000\236)=#\315\270\274\310z\n=\022\360\200;\234o4\275+\222\023<.\357\365<\232\373\237\274|y\346\274\210\271\325;\026l\245\275Dl9\275\326\255.=\302\356\007=\000\300\272=j\276?\275*oT<1\214\235\270\206\2608\274T\3344\274\223\251\235\273\t\177\235=l\031\216<j\321^\274\314\317\313<\241\3026\271\000W\236;\225\225\211\274\222\322\000\275\244\371\027<y\246\201<X/$=M\364\335<\r[A=\037\030\235\275\230\271\001\275*7\314\274\337u,<]E9\275OPF=\213U\325\274b\035\255\273\265\216*\274G\200\214<\245-\212\272L\025\347<\301j0\273\260\243t\274\367\344\226:\222\323\302\274Xz8\274\201Z`=\354Ml\275\025 |<\375\324\037\275\222\003\237;9a?=\"\275\356\273\2277T\275\025\307\351\275\310\2731\275\362g\370\2717\255\022\275\241\3700\275>\005)\2751\231\223=~Q\273\2748\t\224\273;?\264:\255\371\323<\032\rQ=LZ{<\300L9\274\327\307\336\274)\263\n=1\244;=8\274\235\27381\206\274F\205\303=\313\356\232\274\037A\333=\326Zm<\374\211:\274p=}\274?\231\202=\0343U=W\340k;\036\202=\275i\227\254<:]\343\273h\272\016\273AQt\275\034\340\232\273\306\332\037=f\3419< w\370;ew\235<T=\256<d\333z=\321\333K=\351f\263\275\233x\325\274\325\036\r=c\210\346<E\254\252\274\360\310\017=\367\215\311<0\215\263\274K4\005=q\317\276\274\207\226\241<\240\344\256\2745\226\350<\\\247\005<\365\375X\275\027\355%<\261\340\342;\022\\\356\273\200\313\017\274\375\3072\275\016\374\223\275\236\263s\274\314td=\274\014~\274\336\277d=\337E\035<\230\3621\275D\334\001>n\341\255\275\255\2511\272/\206#\274\263ld\275\341!\217\275\013$&\267r\260z\275\357\272>\275h\367\375\274\241b\347<\200l.\275\177\307\207\274\325\347\363<y)\216=\034\366/=\320=\307<\324\271\002\275\031\356{=\331<\332;\216\347\206\2743&\254\275\031\236\210<\034\323\014\275\322[\303<\204h\024=\270\314\017\27511\361\273\203;\005\275[\225\250<\020\034o=\244\335~=\242\037n=\235m\275\273\272\346s\274\332_\266<w\301{\274Z]\270=<~\343\273$4\004<\226\230I\275\tD\312<3#\244\275\371B\025\275\313`\213\274D\241M=\223\307,\274P\232\"<\r.a\275\316\302n\274A\267\020=\344\266\216\274\223,)\275~\224a=\305(\206=\273d\205\275n\305\320\274xT\313<(\323G=a\300\302<\366\344\271=\001\2650=\254\215`=\334\264\260\274\262\202\245\274\365f\224<@4\200\275j\355\205=\266\270\337\271\222\271\352:J\313\207\275\246\236\006=\227-\340\275#i5=\365\rN=6O\000\276y\3637\274>Rh=\351CD=\264`\006<\024\225*=\017&{<L\244\217\273W\327G\275T\307\243=\203ra=\024\000h\274\3005/=f\270?=o\227\242<\301\347\327=\215\315z\273\225 ,\275\245\020;\275\2261<=k\001\021=\234}\336<o\321#=S\220\375;\262\t\247<\3746\233<I\303\251;1Bs\275\333\334\304\274L\006\035\273\207\237\342<\345I ==\230\247<\302\217\350<\374x\227\274\332?\220\274\204S\245\274qF5\274\005i5\274\255\302\017\275\021\212\017\275\343\357\254\274r\313\266;\t[2=\275@T\275\241\223L\274\317,+\2746\0014=:\232\306=b\374\316<f\256\201\273n\370h\273j\302\343;\276\277y<\261\n\006=\020J2=:\")\275\202\262\260<\206\370u=\217\262\317\274?\267M\275G,\235\275C\375\323\275\213\r5\274\256\310\224\275\031M\347\274\334\350+\275\301#\251\274C\276\336\274p\254N=\277;\223:\243\221\301\274B5\037<\005\022{=R>7;\207U\307\2758\227\006\275u9[=\0223b\274\241\023\301\275\345\364\332\274^\307p;\344U\211\275\316H%<\016P\303=r\361\204\274\235\214\366\274\365\021\207\275\236\215\036\274\223\006\204=\242\204\360<3:Y=K\2650:eP\217=\264\2433=\n@\307=d\260#;\001l\264\275\343U8<\273\304\213= \234\035\275\271\n3=n\2425<S\277\251\274\341l\262<\372\025\276<\236\345\255<\230\275\277<k\245\230=9@\215\274E\231M=w)\030=\301m|;\320\203\217\274 \270\210=__\302\274\r4\306\274O[\356\273\254\234P\275{\002\016=+\016\266\274\010]M=+\035\333<uh&\275\214\200\363\274\332\333\013\275\254\203!\275\267\252\024<s\333\216<*\220\202\274*\216@\275\020z\025=\273\352Z\275\306\315\022=\220\275a<\263\272-<\242\353G=\177:\257;\321\241\305;\356\223\003\274\211X\375\274~\342\r=+|I<\317s\021=r\336\257<\3018\373;\374\243\250<\362\021\030=\021\203\376<Q\nA\275\370y\177\273\302\373\002=\301\355N;#\215\014\275c\224\220\274\215\330\000<\325\214\326=j\374\273<\'h\364\274\0168\364:\245\376\301\274\006o\231\2759.\021\275\025\277\212=B\345%=iU}\273\334\304{\274\213[\307\2744b\017= 3\227<[\214z\275\005x\255:Jh\211=\270w\270<\216|\204=\205\307\020\275\307\3325<\320J\035<Ne\212=\264/\216=\262\312\007<\314&\213=u\375\272<wwn<a\031\266=\320\207\031\275\215K\303<j\364X<F\341\250<ve\006=\2037\360\274\354\023\023\275pm\002\276\026z\217\274 !H\275O\000`\275\023\357\274\275\371\273:=\304lt\272\225\352K\275\200\036\003;v\245\352<\251|\234;\2702\234<\250X\014<,v\226\274\351]\020\275\316\352g\274\t\214\255\273\257\330\3138\334\370o=n\017O=\242|\345\275\320\273\217=\347K\237\275\237\356\032\274\255Gh\275\027\332\201\274\201\240a\275e\207Y<\204\237\271<\330[\337\274\210\314@;\0323Z<y\324\372<<\256\t\274+s\360<\200\014\312=t\256\375\274\334}\321\274\355M@\274\200d;\2759\206\262\274\200\330\254;\336Tg\274\342\374R=\305\320\005\275\346\215`;[\276\271\275\324>\377\274\216\363[=\204J\212\275\267u\202<\237Y\323\274l\267\276<\303\315\004=\321\333\030<\354 \224<5|\261\275yQI=\214!A\274t\361D<\177\333M<\205+\211=s\234\004\275\313\233\002\275\250\200\247<\263\315\361;Z.\302\274\304\353J\274_\310\257<\265N\212<\000\336M\275\240Ya\274\000B\363\274d\373\234\274\311n\'=E9\277=j\222\227=\377b2=\014\351@=\257Y\336<X\335\214;m\370\014\275\273(\261\274J%5\274\206\256\317<!\333T=\333\t$=;\'9\275\035\2021\274\361\022\205<\230<\235\275\24475<\346\246%\274y\031!\275\243Y\312\274c&\023\273\215\344\252;.Y\335\271-\313\216\275\343\265\203<\177\252\016=\217G$\275U=#\275|\232\200<\327\225\r\274K\267\377\274\333\224\270=\246\311\214\274\327\273\244:\303\002\360\273\341\237Y=\"\242\035=\244\222\021\275\032\034\t;\321\026\202\275\207\356*<O\224K=\002\303,;E\n$\275\026O\254<~\235\270\273\241\356\263\275\333\221\024=Vye=\030\261M=\352k\000=$\206\210=\275\247\225<\235\260\037\274x[\243:\237\243)\275R\310\223<\031\372\005\275\223\353\356\274\321\3506\275\234\235\260<.G\273\275\233\276*;\342\007T\275\022s\243\2745\260#\275\303\227\367\275D\243\020\275Y\207\350\272\301o\026\275;\036]\275\340$\236\273\002s\346;\260\332R\275\262?\037<\260<E=\t`d<\342\202)=\375\255\225\275\323)i\274\307wR\274\340\325\315<\224yp=e\362|\275\247\322E<\325[\330=-\201i<\271\327\021<\217\232\370:\033\037E<\371\035\013;7\3518\275\323,\214\275\020\203 \274G\031)\2750L\3109\263\225\033=\340F\020\275\231\246?<\363s\302=\233\235>\275\t\247?\275\3363\202=\002\177\365\275nA\177\275\247=J<_H[\2740F\241=\005\266\202\275\320\214\210\275\247\266\032\274\372\017_\275_~\243\275\206\375\343\275\315\006\240\274\352;\203=\030(\250\2722\262\244=\300\035\205\274\301\001\250;\r5M\275io\262<0\265E\274\007\223g=\205G^\274\305\313r\274\200\3637\275\335d|\275Oq\225\273\364\254\313=\255\036\341;t)\223\275iWK\275\362&\263\275P\033\273<\240[\360\274o\225@=N\216D\274$\367\272\274-\276\253\275^$7\275\332\355:=`\263\230\275\265j)\274R{\000\2755\347\241\271\316\376\333\2728\364\216=\201\232\013\274\343\004\031\275\347\216N=v\"j\274~[\n\275\226\013\257<\314%\254<\"(\336\275\271\2673<\356\235\023=\277\321\336\274@-\034=\\\331\014>\363\300\237;\347e\035<\031x\260\274p\031\026=\274o\337<\022\3214=]\364\033=\370t\206\2753E\331<\376,!=]zA\275~\262\025<\235\025)<S])<\n0\250\275\335\201\005=vK\272<\302z\250=/\272N\275$0\221\274\326\351I=\370\222U=]\234\215=v\204R=y\0135=b\002J\275\307\317\255<\003\027\226;\366\223\220\273\360\374$<\324\017\202<oQG\275\200@\256\274\360\nN\275\374kh\274\272\2567=\306\330F=\366\242\327<\274NV\273\246\025\"=\217\226\213<\372\034H\275\367\326&\275\005\002\026\275\321\304\371\273\235&\234\2734\221\t\275LZ\304=O\244\313\274\210\260\225=\017\215\275\2751P\314<\233\030\324<\341R6\275\236\201\035\275q\213!\275\314\231\360\274\347\263\251\275\234\306\235=\220\010\010=\276\277\373\273\"\251\374<R.\207\274S\253\353\274\272\035\205\274\330D\\\275\004\002Z;\263O\336<+K\330\274\347_A\274F\332s\271\022\206K\275EVU;m\203\307\275\225\254\017=\020\243\214=E\r\266\275\360;\230\275\201\363N\275\230\003\362<\001\364\266\2748\237\010=\020\010i=\313.\311\275\000U\364<\014K-\274\272E(\273\205\033\001=+\035\374<Q\240\r\275\371\264\341<e\\\261\275\363V\301\274\024\256\352\273P\350\001=}Qu\275!\203L<PX\231\274\243<o<\350\307\274\273,\366U\274\355\r\367\2740\234r=C\223B<\273W\025\275\241F\n<az\303<\211\r\031=\313{>\275\032j\026=\233\362}=\0344 \275/\373\252=LQ%\273\306\351\006=v\2114\274;x\323;\002,\247<\277\244d\275\341\371\244\274\027K)\273\3051f\275\261\003\352;\320\214\363<\023/\372\275\242\317\021\275\373\033\323<i4a\275H\207O\274w\007\230<\376w~\275\204*\257<\344\033\342<\016<\254\274\3057P\272\225>\223\274\014>\007=\003\363H=)\253^=\032A]=\236D\360\272\313\337\203=d\331\027<\315J\t\274d\232J<v\217\352\272\021\337\216:\261q:=Ek \274zF`\275\214\267\004=\372#\323\273V\256K=@GR=\2045\007=\223\360:\274\203\027\023\273\310lC;\273\010\202\272\362E\013<\316\323\264:i\225\200\275\376\200\312\274\376p\377<\311T\032=5\331\032<\2010?=\3720\207:\324C\t=\025s\277<v+\225\273\220\336\007\275\316\224\251<$\032\010=9\025\311\273h\252b\275\301\234\340;\032kM\275w\037\212\275\271r/\274\335\242>=\251:\t\274\023H\213=\030\244\364=\372\257\004=\213\231W<Ah\256<+c\202;0~==:l\347\271v\201D=\305\205N=\271\027d=2`\017\274E\303g=\374\203\232<\214\223;\274%\1778\275\220\225\263=\020\3650\275\037E\316\275Iw\000\273\331\254^\274\367\203\000=\276\271\005=o\243\350\274\270\216?\275\030f\025\275\214L\213\275\273\346\377\2749&\253;\331-\277<2\230\302;1\235\002=\210nE=Y&u;\t\027\243\274}h\242\274\302\214n\274nFY\275\036)\006=K-\302\274>\247\340<\274?\210\275\"\200\202\275\364|\217=\201\322(;\200;\237<\340la\271\212\230h<\014\037\235=\233\201\274\274~\032?\275\356bO=w:\t\275\3174\323<\207\350\315\274\252r\250\273\033\rF=v\234\261<\313\302\201==U\231=\020X1=\025\313b\274#e\300\274R\305\350\274\214E]=\246O+\275=\036\034\274\033/?\2747\200|\275\306X\263\275\203k\035=Q\003:\275B\241\253=\325{\207\274\030\263\360;\027Np=\\\214.\274y\230\341=\322S\316=\200f-\275\216\037Q\275\307\275\352\274\226\340\335<l%R=N\021\253<;p\235<\361P\365<\000\r\002>\005eU\275\224B\005\274\360\206k\270\354.\316=)\2415\275O\3079=\313\275\222=\346\250\235\274\362\314|\273\205\2675=\362 \271<\262\371><C\231P\275\253\244\202;\001\027)<\026\020\035=\033\225M\275\206\230\200\275\214\010\305<\216\261\000=\231\304\023<\247s\2369-\007y\275=\n\006>a\340!=O7\300\274\274\017P=\220[\347\275\301\220#=\367\023\"\273\364\350\235;L\264}=ml\000=k\215i\272r\350\217\2741\250\236\275\232\'\250\274oVA=#\233@=\363\222Q\274jr\023\275:\324\203<)9g=\231\355\230<8N\213=\357\310\310<O/\376\273\244>4\275X\263i\275\3216\312=\326\367<\274\256\315\201=)\201\275\272\253\252\030=\232?\327\274P\210\355<\235\n\243\275\331\232,=\022S\272\275x\221\025<\354\274\n\275\021\331\026\275R1\201<\215\312\335\274\356*\205\274uK{<\303\314\351\274Fx%\275\205%\"=\352\024\316<;\301P\275\340\254v;\240\032M;8\322\311;\241\303_<\005\335*=\023\272\243=\347\277:\273s\332\027=%`\001\275\200\315\037\275_\227\211\274Z\021\000<\362g\032=\372\276@=FT\024\274\241\221\336;\200i\236<\241\032O\275\031+.<\254\212\330\275T\307;=4r\013\274\035\240T=m&\225=\006\2320\275\300\266\353<\013h];8!\341<\235uh\274\276\023\274\272s\032&=%z$\275\322\253\221\275r\346A\274\365\317\271\275\376\325n\274\375#\t=9z\002<\220\330\327;i\273\267<\r\\\014= \370\034=\242&\t=9\'2=\366\260w=\030*\334\274[\037\367\273\267^F\275\361\\\200:l{\310</\321\277\271.$S=;\214\327\274\260.f=N/\203<\270\0061=\325\3444<5\200\217= \212\306\275\2706\211=\267\345\356<\322\226\264<\334\277\235\274X\255\r;#Z8<\360h\344=(g_\274a\274\246<\231v\204\275\254\231\313\275\277 \206:\251h\032\275\375\2701\273\203\354\351;g\007\255<\314\004\224\273\345\206O\274\205\226\364\274\327S\254<\223\205b<\034zC=\315\026\374\274\370w\033=\244Kj\270\313f\247=^.\335<o\236-\275wY\315\274\206D(\274\"\025\"\275\243\220Q\275\362\305V\273\025\325\\=)\273\355\273;^\025=\'\303\303;9\006\225<\373\233\216\272\003s\320<.\227H\275\345\001q\273)\214\267\273\255\006\035<7\270\344\274\246\216/\274\036gg<x\307N<\177\215p\274A\362f<\037\262\004=\0269R=\275q1=m\310O\275S\215]=\t\220I\274I\007\221\275\240\260v=\325\362\270\274&\277\200\274\251L;\275\214\216>;\254\233\215\273\324\250\014\275\224\352\240=\324R\250;\314VT\273\263\032G<\357\353\251\272\212\343[=W\246\031=\003\017\365\275\325Hi=\351\207\207=k\361\254;h\231s<Y0\245\273\300+e\274@_\224\275\252;\016\2752\327e=\350\020\221=\213\330\320\2759D\230\275\326\010\354<-\021\373<\203\235\270\273\320\333\336\273\303\276\206=\344\235\032<\203\302\n=:2\030=\325^X<\375\316U\275q>H<\271\366\000\275\214\322\334\273\236\310\361<\323\326\220\274\355\211z\275\3176a=\251i9\275\\\223\247\274\356\232E=\254R\3319\374\242\242\274\252.\021\274\342\005m\275\207\222y=NQ\351<;h\244:G\221\341\275\025\321\270\275\320g\020\275\360a\373\274\024\333\013\274\217\261\233=\010\356\'=\033\213&\275\231\311\344=\342\334\003=*\343^=\354q\257<^:D\275\035\267\320\267\267\272J\275\225\312\256=\2243\216\275:\355\232;\266y\224\275\007F~\275nh\354\274\027I;\273jP\322\274/\200Q\275kg\n=[\261\032;\034Uo\275\334<\357<\223\212\361<\332\313=\274\245g\022\274-&\262\274\207\315`\275\226\262-<\255\343\025=\014\233\'<\347C\320\274\242\376\352<\344n\254<\025{\010==1\035=\314;V;\305\320\243\273\244\264\223\274}\030\353\274R5N=\315=h=0\261+\275\270Lv=\014\345\222\274\323nY=\242\261\236\273v\\\222\275\177wG=*\220\266\275\362\031b=\014\321\036\275\334$\036=\337\327\031\275\247\274?=\345k\337\273\222\367\255\275\022\3068=\256R\\\274\316\276\214\275\367l\363;\010*}\274\266;\016=kT\256;\314\250/\275\341l2\275\254\347\243=\272\314e<\331\016\'=0\362\224=\233\232\032=\255\276\223\274y\334\202\275\035Q[\275\017\006\345=xL\241=\347-\212\275\013Y\374<\177A\274\274P3\342\274\314;\265=\266\304\236=)\257\010\275H\313y<\n\"\370<-\263$=\0335Q\274K\002\203==\322j\274\261Um\274\204m\322=\030>\350\274\246Y\232\274\257\256\037\275\204p\222\275\230JY=\221\2204\275\353/\036=\362\337\325<\233\327\244=\026\272j\274\304x~<2\362\337<m\372\237\273k\211\t\275:\332\025\275\256~\t=^j\'=\334\2415<\0048\\\275\014\341r\274s\375/\274J\207\034=\320N,\275&\366\241\274;\324\177\275\317{\253<\253\377\027\275\034\016\220\274<\222\007=\ru\203<\235g\030;\261T\315\275\251\327\377:\032\376\275\274\225\323\231\273>\n\232\275Hb\034;\224\n\004\275\204\312\324\274\037\237\367\274tk\302=\343\226\212\275x\330R<\367\246j\275\236b]\275\220\315\205\274_\276\001\275\274\300\022=*\022\247=\"\237\r\275\037\023$\275$\177\202\274\261v\t\275h\347m;\275?\303=\340\207$=]jM=\220\265\033=\352\363\210\271\241\235v\275\021\301\260\275\216^g=\372a]<P\\\035\275\224\345\353\274\206OB=\244\326\206\274\321\337t<o\025e\275!h\034<\223\375\300<Uh\035=\243\275\371<\tP\241\275\325uW\274\376c&\275U\323N\2732l\270\274\375N\"=\\*\000=\250\006#=\251\221\210=.\005X<\265\327\014=\255\341,\273R\352\323\274ypv=\211OW\274\212\332\234<\356:~<\342~/\274\221\225\326\274;\"\027\275\311\304\264\274Sc\226<\007\321\023\275\305\3410<4\350\357\273W\2455\275]\004\356<\203/\220\272\314\202\227\275\255\313\365\273\026\356<\275\342|\001\275\302\335\352<3\370\254\275\215\322\246=\372\000a=*z\233=Z\'\322<\310\216\321\274\257\256\215\275\316v\031\274<\214\342\273o\206\006<\313\243\255\274\262A\272<\340\257\017\274\300\373$\273\377\360\342=\027Th=\376M\026\275te\335=\233\267O\274\355\023\212=h\247\233\275I\177\224<\325\213\263<,\213\034=\027\026\217=\343\370\\\273C\010\310<Z\3505=\260Z\207\272\332E\225=\342\351\'\275\032w\353\273@\314\305<5(\213\274\'c\036\275\326_\311<a\234\340<\250\201\013<\031\313\210;\260\321\221<C\372\332\274\343\362\273\274\2148\";\241<\251\275\033\341N<\000\260\276\275q\347l\275\033\'\224=53~<<\212\313\275\354\240x\274\034\341G\275L\202\261<\245\212v<\235\277\r\275\311\024\032\275\006\330\3708\004\004\377\274\352v$<\026\372d\274\373\034\252\274S\264\241\275\306Gj:(\323\314\275s\036\262=\354\276\030<\345Zs<\254q\312\273*\317+=8x\277<\333\254(\275\301\177\034\274\371x\270<\353<\235\275\267N\001\275\204\261a<aJ\200\273\207h\333<\227\336\273\273:H\226=P\337\215\272\3476\307<\016\347\027;,\005\210\275\322\304D\274\377_\'=Y\314\345;\006\006\222\274q\026\316=\374\204a\273\342\235S=\215\250\020<\233S\203<\304o\005\275<&\251\274\351)h=\323\211\214=J\035\210\274\375\2612;\n\260|\275\202\335Z\275)\363\337\274\207\n\214\27485\265<\351]\207\275k;\313:\260j&<\023~\252\274m\020\014\275\033\334\';l\223\251\275Rn\000\275\034r\250\274\266\273\212=@\273\3619\365\3434\275\336\337\212<\036po\275@J\362\274\226\315\206\274\177#\264<P|\367<W,#\275\234\236\262\273\013\010\364\274\010\207\343\274W\357\010\275\340DI\274\036\026\266\274\367\2350\273\276x\343\273\235(\023\275W&\264\275\345h9=\203`\200\273\205\354\026=\'\342]\273d-G\274Aa\371\274\244\031 \275\214mu<\354(z\272\367+a\274?b2;\202\305\351:p\245\342\274x\213\004=\367\210Q=\240:\237\275sX\266\275<\367\315;\306\300\257\274\037_a=\001\262\"\275\273;\177\275H\250\330\273Y;\337\273\302G\213\274,\030;\275\022\t\374<T\271\037\275r%\245\274\271\210\253\274\223\232\237\275F\266\357\274\326i!=\211mq\275\264x\245\274\3535\254\275\342\315\220<\024j\304<\260\005G\275\333*\r<\266\006L<\212\023]\275\370\346\245<\312\254\212<\365\302|\275!\371\202\274\212f <\350\335`\274H8\357\274\2575\227\274o\316b;\346\014\373<\240\272\213<b\216^=6AY=\'\244i<\001\322J=\0316\005\275~~\215\274AfX\274e\374Z\275\371\343\372=\\\262\361:\013Y\006\275\223\236\217\273E\335q<\353s\312\274J\315\353\273#\232J\275\t\255T=&\273\025=\3112\030\275\262\303\025\275*\017\277<\366\320\240=HY\200=\204\030>\275*\332z\275G\t\246<\000t\215;\210\273\022\275\203\314\374\274.` \275\370h<\275.{w\273+\253\235<\264c\216=\022\367\300\274\030\363D;\223H\022\275y\014Z\275\331\303\'=p2\225\275U\206G=\3160\274\274\0276\023\275\325\311Y\273\030\216\354\274Q$l=e\233\316=\004{\346\274#\300\335\274\253\302\234</\312\224=\373T\251<\013\245{=\215\275n\275}\263\213;\204O\020=\270\226~=<\016\341\275\216l\256\272\376\224,<$hn\274Q\270\221<\316S\357=+\3216\275\345\232%<_\3140\274\336\320\215\274\236}4<$\010\030\275\326\275~=\245\356\346<]\315\254;\327\025\205\275\013\312\334\274\253\370\304<\344\344E\274\211\030\214\273\364\317c:\177\312\216\275\235\021\021\273\2633\300<V\313V=!=\026=\255v\301\274\372\311\216=\351\264B\274\032u\220=c\207_\275\027\206\017\274\334\374<\275\326?3=\205\313\324\274\270\367\022\275\370\035\002=R\207&\275~D\223=\354r\245=\302\312\333\274\013L\213\272\214g\245<\274K\350<\260\232<<e\206\371<!\241\001\2756\221\310\275J\205\221;\022\275:\274\250b\303\274\275\365S=O\326f\272~:`=\3664\352\275\302\272\242\274\362\367\245\273$4\257<\316\361\001\274\341\337\254\274\005\264\231=x\305\202\272\244\305\237\274\350\362\215=\221\357\023\275Z\252\352<&\241\315\273\344zW=Nj\022\274\340\245\251=Le\362\273\'A\036\274\"\227\014\273%\343{=\305r\242\274\240\001\002=\266\214\354<\034w\226=I\250b<4\353\250\274Rs\256\275\271\204\257\274j\337\n\275\002\274\003\275M)\031\273\252\210\317;\334~\262\275p\302\021=\265\ts=\272eV=\275\010\022\273N\334\346<\344B <\020\263\365<\007\233\037<)6\232\274\241\236\264=p\375\362;\000I\203\272\210\377*\275\221\3006\275f\253Y\275\256\007\243\275.\014Z=S*\032<\244\030\327=\312\307O<\321\346\253<\203F\017\275$\207\341\274\263I\306\273$\223d=;\t)\275y\254\214\274C\375\003=y\231\305<F\013\273=\343\255R\273\213\007\346\272B \224\274\376MA\274\253\2151\274\364\200\001\275\211\332\273<\241\203\242<\243\277.\275s\347$\275^\354|=\227\021\014=\223\370==\246\271\212=\006?\255\275\307\n\035\274\334\232\373\274\334\037n\274\017\226\004<\207 \204=\375\263\330\274\310+t=3Q\255<b\210\226\275A\323\t<\r\010g\275\251}\244\275M\313\242<2\251\312\274\006p\237=\013:\345\274\020\030\223\275<oH\274\246\371r\275\023\261\244=\275\020/\274_\2767=\312A\000\275\254\215\275\274\003\235\351\273 \3045\275/\201\263=\010R\272<\013\277\027>\252\252\333\275\372$5\2726Dy\275\225l\337<W\250\017=\020\226\315<b\311\277\275\223S\210<U\242o=B\273\257\274\335)C=\311v\331\273q\231O\274\033\210z=\262\245m\272wf2\274\003=\332<@_\024=I\316<<0\310\363<7\317>\275-H?\274\346\035\206\274\213\367\206\275\275\270\307;\r\325\313\272\241T\202<i\302H\275\3478\321\273T/\023\275|\342\356\274\255\211\330\273\3755B\275\0333\237=\263\027P\273\022r\016\275sG\270<a\241y:\317\000S=\235\356J\274\034\341\002\275Y\013P\275\257nN<\244u\341\274\352(c\275\t\326\014;\013;\340\274sq\344<\251\241\237\275H\360\017\275V\001\177<~\367K=}/\244<\325\353\321\274m\345\006<\261\344E\274\264-,=\000^\307:]vU=\303^\216;\316\342\331\273J!\353<g\301\373<\377\357\036\274\232o\345;\310\027\207\275\324\315\253\274\324\252\022\274-6>=1\352\360<t\201\247<\267@\205\274\304\320$\274\251\024\344\272\213>\347;\225{\372<\236i\347<)\313\n\273\230c\315\274\324\213\036\274\236\002\235\274\325]\262<\033\032\017\275\215]\241=*C\217\275\202,\301\275)!\322\274U\002\215\275\270\257\211=\006]\336=\222u\241\275\023\276\237\275\003(\025\274\236d\007=\304\312\366<-\347:;D\254\231\275B+\204\275\275\254\232\273#j[\274 \025\264=92\375=B\325\213\274G\343\255=w\260\243\275\315\326\316;\036\036\t>E\313\313<\033\002\367\275l\363\276\274\344\343J=\361\263\210<\212\177l=\236\273\257=\353\266\r<\253\324j\275\2468\312<&\323\272<0\1775\275\260\233\277\274\225M\252\274\204\342\235<K\246\352<%\375\353<\352_\010=?\263\301;\337%\254<\302H\000\275R\350\306\275\353\212\010=\365O\371\273\'Ix=\3642I;\270\312v;\251\216\000=<\224<\275Nt\274;\257\343*\275\346\204h=\212\252*=[~\234=J!H<i\331f=\025\271\213<\246\005Q\275\355\237^\274 \214\345;\244\n\313\274\231\312\212\274\036\204\225<\313\\t\275L\241\233\275<?0\275a\237\214\274?\177(=\257\331\276;\005\300s<\267\206\345<<\016\016=Rp\250=Q\206\244=A\026\305\275\307\nu<h\350\302<\325\000\036\2740\274\217=\343\226\3149zo\213\275?k\376\274\355p9<\n\230\017\2736\200h=\361\272\230=eO+=C\270\350<\212\377\\=\232\271s=\2623\220;p\272\204\274\221\273\320\272\303?\365\274\311\316\026=t\321\034\275\033\'\220=\020\241\247=\022$5<`\340\030;\\\272\244<R\222\231\274\375\344\332\275\"d\033=\246bg\274\343\300r<\034z\351<k\262\003<\332[j\275\302\211P\275\321i\237\275\024\322F;\264I\326\273\346d\347;\337w\275=\n\316\201=Mk\215\275\377\202\315\274\377\246\350<C\247\213\273\227\t\245\274\330\352\204\273J\032\333<\210\351M=P\354\240\2759\220l\273J\226n=\0260\341<9\276C=\316X\316=\324\001K=>\372\210<}\230\351\274\263h\010\273\3516\324\274$#V=\nW\303<a4\004<\315+\333\274!B~\275\351=\013=9\377\313<\340\367K\275\225Hg=bR\276\272\013\031u<\347j\222=\2722.\275\'X#\274~#\242<\320Nh\275\267?H=?\353\361;])#\275q\232\002=\244R\001\276\035{x=\355\373\231;~L\233<\2448T\275?\316\224<v\306\004<\030\257\231\274\227BY\273\372t\032=\356\267X\272\004|(=\344\202\026;\026\202X=\371s\245<Y\3475=PL)\275,u$\275k\321\323<\022ql\273\262\347\025=\023\316M=3L\232<\000\362K<\030!\266<\013\027\350<\333\315\027=\305\205\255<\007\3666\274\004\200\025;\306k\004\275C\267!=\245\200 =\320@\210<,\261\260;\217^\013\273\007\350K=\312\324\243\273L\023\233\274\301\243j=\346\024\276<\324\2042\274\334\316\376:C\301\233=\036\'\242\275<A\210<$\203\211\274\321\272\001=\334l\006=\023\242\224<\0062p\275A\302:\273\203\320\020\275\302\213\210=\302\252\237<\010a@\275\341\300\355<\257\307\031=^06=5}H\275\036\'\201=\3045,;\204:\360\273\302\266:=\324c6<\013s\336<\276\2417=\345\370m\275\350\007\266\2758xx\275A\221\204\274\265\r:\275\207\303\220=\320<[\274\221\001w=\342\243k<}\333\221\275&+U:\276T\224:r\326\222=q\276\274\275\327I\002\275\223\303\337;>-\003\275|M\220\274\335g%\273Q\313j<\010x#\274P\215\006\274\254E\262\275\326\276\344\273}\005k=\330\035\315<Er\303:\316s\n<0\233t\274\241*-\275\323b\013\275\3211\257\274\315tP=cLz=\360E!\273\006\252\276<p\267\006\275\242;\212<\\_\203<!\341\252<\326\"H<[\000\233\2755\234\361\274\213\311%=x\201\246=\321O\232<?\311)=\264K\023<\233\206\253\274d~\204<\342\361t\274\2375\273;_\353\224=\000\251\037=/E\001=\210\357U\275\241K\352\274<\243U\275\275\255\210=!\2475\274\002\272k\274\326W\320<\344b\005=\221\336P\275\210bk\274Y\210\265=S?\365<\247\225\351=\371\362\251<\210\267\271\275\366\377\202\274\034B\'\275\376\327\242\275>S\223\274\377#M\272\247\355);\372\201\232\275KF\003\275\230U\241\275\0329\356\274\237\316\002=\310|\020\275\261\323\223\275\251\246\245\274o\225E<\225dz=\275\021\214\274jm\253=m\241\031\274\346\367v</\360\t\275\354\010 =?s+=\217\232\370\274\0265\210=2\\\267<S\033\003\275r\035\274=\2238r<\305T\235<M\023\010\275\353!\203\272\314S8\2759\035`\275?ne\275\301U\013<\354\006\n=Y\220\003=\324V\235\274\310+,\275\224,\020\275Q\2751=w#\350<y\341\337\274\222\252%<,\336\3568e\326R\275L\257,=W\250\253\273\366\013\210:xG\034=\343\022\016=\314nv=?\004d\2746#\002\275\275G\025\275z\013\344\274\2772\220\273.\233\300\275\005\370\253<\216\351z<\236I,=3/(=z\245y<q\270>\275\223\037\2249\243\3715\275\rRW\275\346\247J=n\241)\275B\367\005\275!{\261\274j\366\360=]\316\240\274\245\342\274<\257\235\t=\026$\247\275\031\354\272\274\201\035\013\275\255\336\342;\230\220\241\275\216\256m=\014\342\344\275Fj\243=\236_\334={\206T<\254X\330<36\207\274Ej3=\243i%<\215\316@\275}\033v<\010\357 \275\337S,=\253\271\372\273\335\316-=\204\310\241\274\037\335\253\275\304\314\315<\317C\315<#\362\311\275X\263{=\347\307\020<\000u\264:<\216\344<\352D\177;D\314\232\274\337y\324\274\030r\370<\356\250\034\274\021O\n\275o\234Z;02\204=\002\204q;P\253\n;J}c\275\205\317E=P\273\312\273P\203s\274\014\225m\275l\215\221\274:\1772\274`\231\200;R%\252=?BF<!\000\267<\036\306\226\274\ts(=\236p\203\274H(\304\274s\315/<\366\372Y\275\373\236\201;0B\367<\020\330\315\275\203\010h\275\365v\321<D\277\240\274\211\266\260<\245g\033=<L\364\274\371\032\007\275\377a\342<p\204[:\337\305\007=\025\356\003<*/4\275o\330\005\276\273\341\374\274\035\225\034\273\001\231\262\274)-\300<pt\235\274s\367\017=\tf%=6V\233=\305l\240=\255\217\210<\274\340^=fxT<\031\364\n=L*Z\2737\032\245\275\224o&\275d\267\"=\207\252\024<\255\307u\275I\363y\274\221\266\353<\274\262\240\274U\373C;\227\2741=N\274\242=\245\353\217\275\225\273\206<z\332\341\274\001\0348\275\n\213\036<\370\311\216\275\361\340l\275\360\\;=\030\254\256;\204J\357\273v\004\352\272:\350G=\217\001\206<\223\335\026\274\305\302\'=\362?q\274\355\027\220\267\244\177A\2752\"\347<\017k\377\274\200m\210\273\365\377\265\275J\r\367:\272\372\233<\0057\020\275\323\231\260<(>\027=\315\232\006\275\232\366<<\035\260`=]-\321\274\276\362\205<[9\210=&\021\201<D,\204\275\315\313\203\274J\247\215\274\357%-=\354\035(=\321\227\260\273%\222;=\031\376\004\275\347\216\234\275\240}?=\255s\253\275R\3463\274\312\327\230\275\375M\021\2743\236\\\275\306^&\274\036G\206=\263]^=\244\337\331<\243\032\223=\364j\264\275\r\r;=\202O\014\275\n\206{=e\252\252=\213s\253\275\347\210\'=\327\3529\275<R1=m\202D=\243\nl\275\304\333\031=\237\372\326\275\260HW=\r;\332\274|\236\234\274\240\265\232\274\200\001J=\234\004v<\000[\214\274\212?\213\274\310\246\220<+\352\021<\240>\216=\033\317\t<o\213\025=Y\322w<\356\364s=\235\322\211\275\220\320\010\276\275\371\207\274\337:\300=\214\224\301;\207\320\277=\200\356\215\274\331}\235\272\241cR<_=\327\271tX6:\256c\226\275\374\025\010<\rz4\275\327&\021\275\302\213k\274UJ\241\275\301\021k\275\n\003\250< &^=\3276\237=\325+\005\276s\347\272\271x\337\346\274\\\201\000\275\361\214\235=\030\233\276\274\n\335/\275K\203\374\2716\347\347\274\027\317\024\275\306`+=\24418\275\0143\035<:x\217=G\257\214\274\265\242\355\274T\254;=.:U\274\013F\370\274\232w\r\275Y.L\275K\316\324\274\330\303Q\274\324b]<S\005G=\021\2451<(B\026>Iw1<\276\344C\274\341\202\257\273-\341\347<\204F\025\275t\371;=\233Z\267\274|\027\024\271\236\275=\274\331}$=oZ\032=!\2336<\n\345Q\275\363\020\233\274s\223]<q\344+\274h@\244\274\206uL<\217\312+\275\234\233u\2750\005?=\230\312v\274\016x`<!\207X\275\331\331\277<nK/\274\257%\300\273\327\365\220:\243\020Q\274\252[C<\033\021c\272\023\006\014=\"\304\032=\243b\375<\035.b<\334\300\265;X\352\264;\356:\234=\037\2235\274\312D`=g\t\036=\214\003\246=\000{\235<\353wX=\020\306\275\274\002!\201\2747\2212=\252\237\004\275[n\343\275r\360i\275&P\227\275\271\325\240\271\271\327\264<i\377,<\003Z,=K\205\360=2\034\264\274\020\253O9mc\252\274\366\264\204=,\246\001\272\372=\200=a*\242<\362\250\246\274\254Em\267\203>\313\275\203\313\037<%\331z<\325\027\306<\224y\304<&{\027\274j\214\341<\333\326\354\274\317C\360\275I\354f\274\361\377&\274\324y\177<\352\343\307;\234\205<=R\037\215=\236\343\004\275\320XO=\301F\333;\251\257\347\274\336&\372;\252\325i=\233|o\275\313\255\266<\343\365\272<\362\020W=!\343\201\274\207\255U\274\005$%<\022\267:=j0\264\274\024\177@\274Sx4\275U\2521<\377\220A<~\017\204<%\033\006\274+\330\005=`L^\275\254\272U=\261\340\357<\261\250\220\275Y\2218\275%\376P=\233\177S<9\344\023\275c\014\254\273\220\217\272\274\244h\207=\021\203$\275~\221\304=\331\275Y=\313^z=\330\240:\275OO\237=(e\212\274\005\001\370<\235\352s\275\\\002+\274\344|F=\227\374y\274\355\330\332=\324\024\274;\254\327\215\275\250{\243\275\256\371\336<\300\021\\\2732\3138\272\347\314\252\273\017\"w\275\206U\352;\355\335-\275\327\0323\275\021u\031\275=0\250\272E\0011<e\234\0139O\313\234\274\261]]:\351\230\214=\321ME=:R1\273\210t\251\275,~u<\274w\260=\022\325\217\275b\370n\274\366\250\327\275\311\240\t\2746\"o<\030?Y\275INn<\027t\325\274\206D\311\274+\316\265=\202k\213=\3229\202<\274\017\r\274\361\275\202\274\026\257M\275\256\'.\274a|\360\274\236vf=\326E\315\274gN\253\274\352f4<\225%]\275T/\000=\367\034\274<|\261\370\273^\357I<\200\332\233\275\373\220j\275\022\247z<V\324i\274\010\253N<\003|\277<\334\025e=\375A\221<Y\355\214<[\000\271\274\332)j\274I\335\177=\txy\273\252c\007;\373K\256=\315\357\331\274\373\027\327\274\346C\002\275\2609p=[\231\024\274\276\277\'\275\237\224\272=S\273$\275-.\336<}0\220<\304\307\020=\322bf\275Lug=\275*i;\215\023\330<\036\270~\274\344\002N<O2\034=\361\224\277\273\'S\201<\306 \331<w\265\216=&\317\202\275\354Y\254\274\205\262Y=K\265\221=LTE\2757\223m\274\236\362\010\275\211\337\267=M\305\216\275*\304\263=\260\372\226\272Xr\353\274@W\034\275\247\017\232;\0341==J\317\013\275!\013\233<\342\256\325\274Pq\225\275\033\013\375;\272-#\275\354Y\265\274\275E\\\275&\207\253<@g$=W\010\267<\367~\021=.U\2149\236\232\371\274\253V\241;\345\010d=Br\313\275\353[\203\275\013\372\327<a\315\231=\337\267&=aoH\275\335>\274:\236h\274\274\225\0362\274\362Y\277<\2100\023=\003r\343<\010Ba=\202Z$\2753\347\360\2743ug=fe\t\275\\R\027=\001` =\246\304/\275Wx\\\274\267\342n<;\271\014\275\337\335\221\274^\357C\275\366\311d=)\253\376\274\312\210\343<i\326I=\266\351\"=\306\365/=\300>Q\275 !\273\274\241C\2079X\327W=_\253\211;\000\336\312\274\016U\033=\253\221K<\332\033\030=]e\220\275K\t\020=y\204\':\271\324`<\3002\256\275\207\030\251\274\310z\210=\370 \274<\\Z\204=\361#\032<\204nl\274\003\006\240\274avT\275\327\\\361<\037V\330<\200\334\310\273\257*\214\274\352\277\225;\rQ\270\273^\010\034=l\204\253=\373\337\n\274UjQ=nS^\2745\327\276<\335G0<\204h\264=\006\321\306\274\264\037\265\275\2221&=\336\343*=GW_\274Pp\251:\340\266&=\231\244\361\274\360\241\300</\370\203\273\233\337\202\275\342q\242\273\036\177?=.\266\223<\333O\200<\230\3745\274-8\216=\017&\267\274_q\t\275tV\222=\255\355q=Pj\240\275e;\202;iZ\327<\364s\031=\024\177u\275\370\036t<\255wg\274\207\021\266<\002Q\314=f\217\237=\033F\3469<\234\223\275\343_G\275\362b?<\005\036\263\273\375\2031<S\277w\275\017\003y\275\022\215\262=\020{^\274e\3526\275U,\212\275!Kc\2741\243\277;\324`\215=\332\255f\274\312\256\221;!eH=\334\'\204=_Uz=\370\231b=\265u\347<:j\350;\362\370\272\275\220\317-\275\235\203\237<]\200x9\004\250\340\274\2532\215<\227\037\"\275\257,\375\273\331\274\204=.\2723=\257\203\035=\246\030<\275\314\240\253=\322G\312\274(}\267\274\004h\263<\031\"\027=\356\023\365<\361\316\177<\255\001\335<\256P\027\275\353uG=\274\205M=\037A\356<\237\302Z=\236o\201\275R\235\335\275\225aA\275\315\273\212<#\213\371=\374\010\326; \\\213\274\337\367J\2752q\347<\316\250\201\274\223#\344<,\331z<\2217\354<n\200\203=\274\300\276;\025\177\t\275\320\233\242\274H\213u=\003\351\027=ll{=\335\252\346;I\035\036<F8\233\274\224\332f\273\263\211D=\265\250\267<\261\030\215\274\204y\375\274\321\344\332\275\365\317\231=1\r\177=\2245`;\322n\357=<>{=c\320\242;\300\300\023=\277\345#=a\261\223\274\362\262i<\203y\006=l\373\032\274\322\327F=\211\253\322\274\022\367o<\014\001\234<\357\256\210\275\3272s=\213\032\026\274\3205\340\2741\366\254<\212\022v<\350\252[=\315\375,=\035\373\021>5MC=\331\254\016\275\240;c=(\230x<b\273\365;\272\247\036\275\235\274\304\273\311\377\217\275\261\315\307;\227~f\275\375\344\030=-\361\312\274\270\345\223\274\2227b\274\352\267\206=\344\372>;\231\275\213\275\374\343\242\273\034&\313\275\032\263\031;\244\303\021=M\212\276<\307\261r\274r\250}\275]\005\023=\207\245g\275\200\211>=\227\236\200=\327\326\206<\346\353G\274\033\2604\275\252\026\331\273\323\255\216=\272\316/\275\027.\t\275\003u\205\275\377\262:\275\022\177t\275q3\005\274e/\346<\'nD=\3762\006\275\307[4\274[H(=\204\274\365\274\377\217\310=\022\'L\273g!\247\274\234\355\306<T\363\315<\2205o=\227Pf\275\002\'\000\273n\223\200=\325B\201< L\233\274Y\177\216\275^\221b<\216\323><\331\336\245=\355,H\275\326\275\212\275\275%H\275j\"\'=\351;\374\274\316\234w=\204\317\266=\264\344\203<H\'\256<\340\331\005=B\374\177==\027@\272s5\032<\271-\026=\237\241\033<`2>=\007\270t;\335\276h\274\037\322\017\274\037_v=\313\300\350<p\310\200<kd|\273\245\013\036=\207;\220=Dq\346\274\210\006\230=\233in\275\004XA<\231F\023=0\230\204\275\202\255W<\t\376S\272\255\270\031\275,\221\020=M\357\022\275M\005c\274\351\023@\274\030\027`;bN\273\274e\347S=u\310\373\272\004\000\312<\014|\206\275\007v\034\275((\341\273\335\025\030=\261\357\262\274B\3258\275&\233#\275\344\340\224\275m\207\200\275\261#\303<\374\326d\275\003\n\257=\314G\350;\273F#\275\255D\362<*\317\226<\250\267\032;)#\234<\025x\273\275\2175\332\274.gh;<\345y<\326Mn<\033\233\002\275\247\330f=\2660\267<\253ok=\2613\325\274wE\275=yM\000=\320\277\267\275\234\214\236\274d\n\201\2748\332W<\272<C;\337\300\024<\246V\256\275\036\356\010=N\375%=\217||=\017O\024=\272UK\274\231\304\t=\276\200\216=\232`\215\273\246\316\227\275e\360\237\274\242\356.=c%\213=0\261\016\275$0\202<\3133:\274\310\037\200\275/\267v\275$%\217\275[\335W=-\216\026\275\0036\376<GH\334=3Lq\275\r\304\026\275;\334\216<9\246\303\274\364\202s={h\246=\007\337\265\274\034\270\n\274_\353\023\275\255\234X<\205\232\262\275\362\241\267<1a\267=\236\212\316\274\327W\267\274\177\001(=]\357\224<\347\246\206;fh\332\275\203\2663\274\226\266\201\2721\224w<\253\353\216=8~\003\276\354\331\235:\2266\r\274\344=\203\274\341\313\346=\026\263\234<I%P\274[y#\275\224\236\276\2737\262\021\275A]\227\275_j\034\274\243\271\203\274}\346\302\27309\203=\023%8\275\347\221\010\275\\\375z\275\370z\234\274C\267>\275 \006K=7_\333<_\027\021\275\304\212r\274\265}\315\273k\255(\273\334\353\210<e\224\t=\223\351\251\274\371$L\274|\366\266<\351~*\275\355\027\373\274\300\346\353=`\202!\274\302\273\337;\200\307\214\275\3127\236\274j\217\021=\341\337\016\274z\223\360<\337\2376\275\005\r\314<\207\372,\275%\003\344<!\nd=\320\231\214=\320=J=\243\203\016\275\367\210\331<\243KY\272\273\266Q=\272\203\202=l/(<\327\0004\275\214\365\234\275\244\234\331<\257\272W<v\245\376<\033\343\221=\206\202\202=\247\017\360<\037\252\240\275\006+e=\205~R=F\275\252\2732vM=\343\003u\275\356\306\255<m\361\257\275*NL\2754\371\231\2748F\236<\017\261I\275\222\234\250<S%\362\274\245\030g\2742\325s<$\035q<\217\036\\\275\016I\027<[\006\330;ymP\275\242\267\253\272r`\221\275\315\364\375\273[B==_\273^\272\366\213\250<P\304Y\273\017k\301\2755\343\212\274\031bD=\207Vi=l\360\014\275\2604\256;$\334\256\275\315P7=4g\021<\303cQ;,\251~<\221<\006==|6=\177\231\034\275\372\373\373;\264u]\274\204A\326<\2464<\274\370\2671\275Wv?\275FS <\tt\254<\345\360}\275\332/\304<\002\250\337<`\354!<:\022\230\275n\337\222=p\335\022\273P \363\274\367\001\210\274\233g\t=\rF\033\275\210\276\202<}\365)\275\t\346J<[E\357\274\235E[=9k\331;at3=D\372\262=a\347\024\274\224\020X\273s\332\007= B\262<=\272e\275\213S\002\274\254%;\275\022q\372\275\363\032\220=\204)E=\207<\223\274\214?\356<z\347~;\345Cc<1\362\216\275\373\371\225<9\037\300;^\371\275\273\254^\204<\275\023\230\274\302\367H\273\214\021\212=\257\355\341\274p\267\177=\2727\013\275\346\316\217<\345\263\213\275N.4\274&\237\276\274G<\353\274\334\302\363=z\220\205=\333:\270\275`@\243\274\223\014Q\275\217\303\373\273CC\301\275\311l0=7y\275\274\351g^\275\214\016Z\274\014H\215\2754\252\004\275>\245\013=\251\335J\275\320X\005<}\342\005=\233\000C=\272\213\224\275\204\321a\275\216\022L\274\302\035&\275\212u\240<Q\277Y<\335\360d=C\241\232\272\327\3505=\253\212\344;:\347\360\273\232\305\360;)\241/\273\034d\002\275\031\t\000\275\206\021e\275`\353D<\246d\232<\216\3254=\"\325\361\274\306$\036\275H\034\314<\324]U\274\273\267\277<$\335\272=\333p\202=\030\376\021\275\340\377\306\275\"\317\254=\275\262\364<\266\324j:\250\'\000=\013Zf=F\204p=\277\036\377\273\272\247\204<\261fs=\250/X\275\252\211\256;\035\tC\274~\226\360\273\364\315\027\273(}\230;\005\023\221=N\007\330\274\211\027\002=\265\2228=\243=\017=r\272\223\2746\n\001<\226;\235\275\225\277\222\274\327\031\203\275\324\242-<.N>=\346\034\005\2751\300\304\274Zc\016\275\370R\370<%\317\375\275\377\013x=\271j\305\274S\214\326:3z\014<\252\277\023<\321\004\241:z+y=\246\t\203<\254#\205=+\312\237<\251\203%\275m\006\215\274(5\207<\341\247\216<2>~\275b$\367;\256\3113;\263\276\017\274}\360i=Z\364b\275\211|\376\274\241\337m\275\314A\003=me\026\275W\365\'\275G\365_\274\371\355\224\275\225\245\204\275\000\252\230\275a\233&\275W\201\317\274\355\210\252\274\023E\213=\215\236\034<3\013\332\274\313\311d\275\032\243\240\274|1\223\275abT=\315\325/\275T:\020\274\332H6=\356~\313<\2650\356<\376\336b<nb\220\275s\336_\274\232\037\030\274?\376\245\272\376\260\260<,6\207=p\022\314\273F]\026\274\310}P<\215ln=(\377\363\273\034/\177<\206\243V\275{Hz=c\373e\275W@\201\274= \265\275\372\002\007\274\032\267f\275\034D\314=\245\362\204\2753G7=\256m\234=\002D9\2752\326Q=\t\005\267\274V\365?\275hu\361<7\337<=p\364 =\335K\263=\336E\231;\374\221\305;!\001\200;\014D\3129\217\226U<\250\266\267\274c\315}\274\317\356\r\275\371\340\207<\346\255\016<\324\301\236<(\177-=\027\354\203=\253\r\022=\000\002\033\274P\3311\275\374}7\2742\270f\274\215\n\223\275\244UA<\255\305\347<\3270\246=\225\325Y=*\344&;Z\243[<\274`\036\275\245\310\324;\333\006\367<!\007a\273%\265\273\273\246\372I\275\274w\005\274r\216\204<\n;T\274\270\265q=3ds<\321&\003\275\215\006\203=\244F\177=\313;\217=I^\261\275\177\313\003=\230\032 \275\272e\225\275.\211\"\2745\313\005=\337\354Y=C\361\236\274\3572\337<Eo\036<\355\253\004=\306\265\002\275X#\357\274\rG\320<\004f\341\274X\002\254=\177\212\355<\335\007X;\267\362\265\274hB\322\273\027\345\237<\271W\003<\032\037\341\273\\\325\345\273E\026\221\274Wzt=\032>\002\275\005\301\252=$\202\252=``\003<\352tc=a\200\367\274?\375X\275D;\225\273\226%K<)\235\254=\212\344x=\002n\322\273Q\210\234=\211\226`\275jh@\275\251\211\003\275\320\370\212\273a\026Z\275[_\036=\273p\225\274vWl=\350q\376\273k\310P=\010\302\350\275\tqL=\376a\276\271\213\367X=\232\211\204\275\013\013\337<{\214H\275\010O\333\274P\"\302\274\356p.\275\262F\201\275\264R =\346\t\260<0\242\241=\271\360\353\274\252\212\030;#\"\261<\324\351\221\275\325V\n=\372\2603=\217\307\\\274m\020\373;\311\177\"=\361u$\275\201\311v\274\'0\032<\360b\240<?\021\031\275!\317a\274\352\312\233\274\347\274\272\274\376\023\252<4\234\302<\364`\023\275c\t\233\274\226t\343\274e\271\225<\232\343\037\275y\002\356<\326\037.\275NN\022\275\337J\204\2751\354\350\273\014\236D\274<G\303\274@\345\350\275\262\3263\275\316\351\254\275m\032\236\275\341\265P;|~\261;\010\221\206<\032\205\202<\000`u\275XW\037\275\215#\216\275\237\003h=6}}=NF\304<\312\367\376\274W\265\032\275f\225\223\274\246\002>\275\304\337\3059\216\323\323\275GG*=\352\337\342<\3207W\275\272\211\264:[L\214=\325.\270\2756\0220;\\\351\000\275\240\222\336<s\312j\274\t\273\022=>\022&\274\252\207\021\275\333\320\261\273\246\"\034=\313v\363<N\240\217:\373\005\343\273]a\034\274\245\252C<\262\032\317\275\374~\007\275\3447\205=\340\327\275=\370\206\272\274\335\276\377\274\355\034\236\275\246+\3669\001\035\260\274\000\221\353=\363\275]\272n\265\022<=t\223\275[\362\221\273)\335\272\273\031\277\"\274|\347$=\303[\355\274\305\371\016\275-\216~=\270\377\362<B\223(=\334\2602\275y\216\022=w\005\310<\351Y\227\275\365\307\231=F\350\"\275D\343\204\273r\271\203\275u\353\271\273\2244\n=\216\307&\274\r\354&:\214G\377;\244\n/\274\320\360\356\272\335\000\240\275\r\241\r=<\325\231=\225\244R\275\362\300\000=(b\021:\263\226\202\272 \215]\274\017\\\374\274\353S\237<2\366s\274^4\366:\214Q\255<\255\331\024\273\010\274\360\274H\365\031<\307\230\375\274\243d\315<\206V\207<\243\203%\275\023\354n\274\027P\205\275y<6:5\027,\275\3169\242\275\206\302\227\273\313\231J\275g\306\375<\374\341\234=h\021\245\274\005\312\354<\371\013<\2743\017\014\275\273\374\263:\362\351\226\274\311\337\223<]\362\330<\323y\347;\016C\000=\014\312O\274\000\340\245\274\366\032j\275\244|]=K\013\315;\272R\006\275\363\313\315=\230\334U\275\324.\016=Z\346(;\213\212\010\275{\363\303=~\270\364<\273{\302=4\325\221\274\004\003\302<\301|\226=f\033\006=\014\n\025\274\316P:\275z\225\353\274T\032\376\273\313\222h=\203_\177\275\247\252\323<\203\246`=\262\000t\275v]09\033-\233;\361\242\327\274^Wp\274\326\351\213\272\007\034\346=\026\243\344;X%,\274#\270r\274\304\2523=\243\331m=\"g\327\273\253^\203\275g\207\344\275\214\253\005<_\356J=\033:b<\376\031\351\274\372\263\345\274\232\320\250\275\206\013n\275\355\t\253\274\272\270p\275\364Z\006\275Es\r=\325\302\005=\201O\243=\020M\365\272X$0\275db\215\274 \354\267=\003v\265\274\223\355\031=\016{\205\275\212\2376\274%F\335\274\200\244C\273\020[f=\256{\354<\330\307\343<\344R\010=\224\017\313\273p\330\037\275\231m\372<\322\205\002\275m\317\032\273\335\026\217<\256\317M<\001\330\257\275\252\3547;\230\364\000=\272\3703\275V?#\275rf\007;~\032\212=\334\317\370;L\361\201=\031\274<\273\324p\'\274\251.n=\360\335K\274qq\254<\271A}=\320\310\220<\253\335[\274\377{\312\274\250Hu\275$\375J\274~u\035\275\222\312+<\345\003\224\273\325\330h=\177,\303\274Ws\314\274B\252\313\275\247D\006\275B]\371\274\273\304r=w\330\t\275\355V\235\2740\234\246<\023+\270\2738\314\225=?P\020<\323{\303<\263%\374\274\272\031\277\274M\217\232\273\207x}=\213\"8=\315\376\256\274\000\273\377\274Z4\205=l\270G=\200\023;<F\014\334\274q\004\246\275\372p\222\274A\242\245\275\374:\007=\205\322\024=\2169\377;\021\303C\273\037\360k\275q\256F<G\006\035=\321\2303=\325\223!\275F\341q\274[c\307:\\\030<<\207\357Y\275\363u\034\276\217x[\275(\\\221\275\254[b=\0270\272\274\224\343\211=8m@\2754\251%\275\233\375\356<.\210\001=\274:\247=\256\301\303;H\343C\274VF5\275;3}<\033\362\007<\327H\335<\355\3217\274\240\373L=K\373\027<\342 l=\215\002\021\274\022\021\010=\305a\226;\227\234\207\272\206\\\262\275\244\335\314\275\214o\217=\356Lj:\010\223:=\263\"\024\274-\003q\275\230\333\201\275\214\200\247\274\032&C\275i_\276\275Z\277\210\273\321Cm\273gP4=\007SH\274\266\2204\274\331;\376<\307\002\313<\024\023\340\274\210\032\376\274u\231\353=xk\312;q`\200=\307\271D=_\300\372\274`\005\016=\274;\035\273\356#\347=\016\240\200=$\267\003\2744\016#=\204\243\302\273@`\345\274\025\325\016\275\350{.;\037N5\274\235\204\221=\305E{\274 f\303\274\206\341\323\272X\355\301;\250\317\257=\357~\304\274,\336\305\274\276i#\274\225|\247\275\005\252U\275%\335a\275\244\224\222<\366\022\t\275\301}\223\274fG\321=B\270\211\275\005Df\2750\364\232<!\321\017\275\327K\201\275\037\371\203\275=\202z\274\364g\034\275>\353\354;`\357]\274|\346r\274W>I\275\353\276\021\273\322\367C\275\206\0328\275\234\267\225\271\007_\266<Ip\035<\250!\177<T\324\200=\356\355\356<\003-D\275\364\004{=_t\327\272\311c\262\274\314\350\265\273\023\000\207\275\377\2111;G|\023\273\213-:=\236#l=Z\365\207\274}U\023>\231\317\322\274\206\027@\275,\272A\275\214]\270\274\323Y\202=JW\210\272kQ\247<(%\331\273\t!8<\'$\356<\n\241\\\275\026\326\212<A\274E\275\244=I\274\242\303\276=<\376\333\273\332\n\353\273\370\324\227=\007\226\361;\003\302\301\274\245\312\020=\010P\320\274\002i\002=\007\224x:\212\273g\275p\255\221=\033\3349\274\346\354\306<\r\237a\275\306\343m\275\275\257\202\275\273o\322<Fm\354;\364d\035=\342)/\274\233i3=P\266\022=\005_e=9y\276<@Ec;;\250B\275\373\013?\275\323\315\003=\323\007`=Xk\030\275u\357Z=\223\223\221\275u\031\246=~S\303<s\212\203\275{\\>;\257\022\215=\216\021\034=\377609\242\317G\275\374\253\203=\2330\353<\0347\007\2754\033%\275Yv\243\274\262\266U\274y\361\323\275\340\202\024\274\243\224\265\275\217\224>=Y\277\210<\252\3728=\356\017\214\275>\256C\274\331\026Q\275\352\002\376:{-\233\2756\260q\275<\304`\2739\244\n\274\006\267\265\275d\335\315\273\236\363\216\272l\202+\275\257RG\275bL\241\275E4\330\274N\\\304\274 \316X\274\353vG=\252%\372<\276N\261\275\\\237\317<\263\274\270\273\034\020\233:\307\262\231\2719:\034\275\356\255#\275\376\\u\274\331\210\351\273@r\200\275\352^\207<i\372\371\274\252\030V\274\314\024\013\275\322mr=\214\024\t=MJ\013\274#\276m<\3278\"\275h\374h\273\352|7:\265NC\275\030&\201\275\366\021\227\275+\247(\275B\024C=\255O\277<\373\241q=(v\036\275h\351\210\274\2253\203\275t_~\274iA\207<\216\220|<\3034\321<\313\263^=\002B\021\274\363\352S=\344\345\271;_\251\245<r\331r<\336\244\212=Hm\367\273\2464\031=A1\372=\357\251\177\274R-\020\274\031\026\274<X\030\342;\036NT\275\310\\\274\274ru\366<\265CX=\"\306\241<Aph\275\030\317\016<\031\305\025=\005\317\236<j\217\200\275\221\305\303\275\320(\226\273\211\362\236\275\264\373\321;3\330\310;[j\242<3\006\364<\313T\251\275%\244\222\275\243Y\353\274\310=\035<\217\352\254\274\275f\315<\300\026\003\275\241\354+=\306\001{\275/\027\247\273\210\362\224=I\372Z\274WR$<\235\233\361\274\027\030\207\273q\230\241\274\236\nB<\345\221\374:\027\206\365\271K\305n<\'\231\332\274\377J3=\342\357K\274\361.\210\274u\347\336\273\222\200\251=(\307\363\275.\027\017=\345\313\317\274\222\351\037\274E\334\021=\003\023\354\274[\334B\275t\301\210<\233\213\245\274\366I\313<\362\367\254\274tG\367:\276\317\237=\375\314\226\274\303\251\306;<\272\2358\327_\226:D\t\255=\332L\014\275\r\030i;\237u\025\274u\'T=\367\206\335\271\311,\200\275\301.\327<\361]\237\274<4>=\326 4\274Lv\203:\001x6\275\334`\206\274\026\315H\275JT\326\274\272\037\326\274\253~\313\274XC\320\274\343#L\275\226\243\355\275\245\334J:qu\274<\344\202\236;\345t\264\274\266\350\204\274L\207\310;\223\301.\275)\324.=\320m \275\255\"\312<\036\340\272\271n\343\322\2724v\351\274\256\356\\\275\007z\225=\240\332\233\274\310<I\275l\030\373;\2468n=vs\247:#\306\222\275\256\245\355<\240\276\251:n\017\263\273U\370<\275\357\250d\275\362\360\021=\201\251T=\275v8<\274I\"=u\302\235\274q2f=a\030K=g\027U\274Q\265?=t\371\203\274\277,\003\275\301\245\261=\"\037\030\275\250\243\n\275\257\"\272<\347\222!=\336\257\277:\260\252i;\026\356\266\272-\333\321<\003\036(==\034\236\274\320\3560=Nyy\275\340\316\226=\234\3575\274\021\210V=f\036A\275\266G\013=\014\320\241=\310\312\221=gU\340<\273\233\013\275\201j\247\275.\014\036<\017\223\210=\306$\225\272]\303;\275\021\225\316:\232$\213\275Xb/=\014\365=;\226\345&<\017\003\3149\274ae\275\013\036y=\303\332\303\274\316i\205\275\224\321o\274\333\257\215;$JA\275\032d\002\275Jd\221\274\354_-\274\275F\232=\200\030\252=\207p5\275\256\017\377<\221xN\274\336\324\350<D\246\027\2757\177~\274g\277\202<\346\032R<\212I\270<|\177\270\274d\333\\\275\206\004^\275\2157S=V\377\212\274y\232\372\273\365\n\312<\023\253\264\275R\261\205\274\022\350\336\2747cT\275B\333@;\243}\202\275;\357\010\273\326qe=\335\004\243<!\351\231\275}\275\351<\354\020K\272\177\033\272\275\026o\256<e]p=\227<V\275\356\033\321<\321G$\274_\204\266\274\026\327\353\274\314~Y\275\024\260\240=Ey\004\2756\016\332\2743\235\362<\367\236\232<\334S\263<\025\323+=a\233\367<\216\200\205\275\326\264n=H\302\273\274\344E\010=\360\342\035;\346\264\354< %x;\3205!=F\252?<\306=\223\275)\031J=\217\2338;7\252\201=b\025\360\274\227Bs\274<aH=\310\276\023\275\005$Z<\307\232@\275\254K\305;c\305\021=2G\030=\262\307\205\275G\364\022\275k\0310=\325\265C<\353c\357=\343\274\203<\370G\010=\347c\277<m\022\222\274\020\350+\275\243S\356<x$\236<l\255\213\275\215[\n=\232\332,\275>\361A\275%\364!=uI\271<w\026\\\275[\036\032\275\330\332q\275?\'`\275\376\371j\273\036x{\2759\2308\2740\031\257<\373\034\n\275\222\346\"=c\351\005<\034-\377;3\317\017:\303/\320<\336<\005<\036\252\211;#V\217\275=\030\302\275\002>~;[oV\275\307\355\365=Y\010w:?\231!<\213(\014=p}\235\275\033O9=\006h\201\275+fm\275\211\010&\274^\211`\273\243\023n\274\240\230\231\275\212F!=!\267-<\250\337\013=c\036\224=\371h9=X\363W\275:\304\277=\220\211]=\321\350\006=\264\226_\275\271\333^\274.\3311\275\201\331\006=)\"\321\274\177@|=I\003\244\274\251\322\257\275\262\247|=4\376\312\275\263\355\250<\222\303\322\275\223\033\225;z\212\277;o\232\220=\207C[:\023Ab=BX\333\273u\270K\275\2233\352=S\024\230\274*\035\n\275\313\016w\275\211\2005=\357\363\347\2746\275\021\275\005Kx\274Jb3<.G\201\274P\2315\27547\343\274\265<\330;\300\370V\275l\324\311\275\234v\007\275\226\353\227<\027\002\025;\22589\275\030kw=\024\206j<9s\207\274$a3\274B:1\274\231I\300<\302]\226=\267p\202:\217|\256<^\344X;W\302\255=\312;\337\273+M0=dW4\275\341\276\261\275e\257\227=\257\374K<\204\303\267\2745\263\233<\037E\307<\311\014\321<e\'\212\2741>\274\275}\3258\275t\221\304;mI\026<\235\232n=\271O\036=\223\002\253\274\266qv;\262\350S\275\'_\245<\003\273C=\265\203\230\274\216\230\244<4\247\256\274\274K\213\275u\263:=z\362\267<\2369\013\274\270`\306\274\\\225\360\267\312B\205=\357X\216\275\r\024\263\275\007\363w=U\365}=\241\267U<\036\262\370\274\314\223\262\274,\367G\275;.\256=\275\377\r=\217\212*=\232X\206\275\000\324\227<Z0\301<\233\361\024\275\017\n\037=j\313\256<\262\371\217\273\266\334Z\275uML<\006\377[\275i\352\317\274\257\001\353;\261\336:\274\330j\325=\335\006\326\274\247u\350=\031\376;\273d\267\022\274\301\370\300\275\267{\205<\021A\354=j\\\264<\357\300\014<\275 \030=5\017\017\275\030\343\271\274\200\026\014\274\246r\001<n\200\301\274\375\276q<\375U\033\275\245,\355;\0029\320\272\267N\206\275!\005\264=*\242\230\275\224l,=9\230\310\275h\007\205<\242x!=\340\302I\275\212|\342\275\022\352\220\274\250\363,<\316\350\241=\203N*<\'\2404\275\037\250_\274]\372\212\275\035Gg=t\220[=R\007\216\273\350\261A=\204L\242\271\377\220O<\027b\324\274\224\000v\2757\241&=O\251\004=S\017\335\274\034(\033\275\371\035<<\247\031W=\336h\233<\216\t\013\275\221\351a\275\036\2208=1\374\214\27497o\274\260\363\270;\204\305\207\275\246\362\267<\343\373%=K\257\261\274<g\211\274\213\340\233=\021\327\363\273\303T\320\273\214D\217\275\325\271\212<\212\337\230\274vc^=\252+\233=\214rm\274.0\003<\354v,\273\352\024\r<\254\212\223\275\356\302\000\276\320\366\201<\335\322\217<,$\023\275sx\213<@\247w\275\037\217y9^\202\004=\206\225`\275\324\230u=\341\371\205=\3235\305;\302\352n\275\312\031^\275H\204\226\274\010\007\342<\206q\010<f\231\252\274\343\350\322<\375BP\275]\324\211<\200d\201\275\247\302\017\275\247\3049=\261`\225<<\330\221<\246=\261\274\350\016\254<\253w\277;\266S\274=\337}J=\361\254\254\274\000G\220<2\302\204\274\330\347@\275\251/\224\274\372@\030\275\217\306\225\275\245\207\231<h\037O\275Y\207;\275F\360\276\273\231CJ;R\255\301\273M#\013=\271\013\257=d\256\233=+\310D\275\270\250\241<0/\031\275\027\027\333\273+Jp\275\200\212\345\274\365\374e=\035\237\243<\332\343\255\273\016\366W\275\034\215h=XN\367\271\324b\024=\325e\027\275\337\322q\275\366\241C\275\371m3\275\207bh\275{B\310\274\302\001\207\273xt\233<\004k\034=\313\247x<\331\262[;\266\r\332;\235\n\304<woR\275\263\2546;%|\337;\035\345K;\376\222\177\273W\205\334<EN\027=\264/\241\275\230\2306<F\001\251\274\326\214m=>\265X<\037V\005<\2117I\272g\226\242\274\342\353\262<\323\205S<g\004z\275\311o\375=\332\250\340\274[U\336\274\217\261\360<n\307v\275\363Nw\273\344\314\262\274k\3002=P\010\257\275\225\220\026=\247\020K\275\265\304?\272\215n^\274\333\027u\275\037D\250\273~\2752=1\257\201=Ez.\275\235\337\264\275\017\346\235=c\177M\275h\013\222;\333Q:\275\321\301\033\275d\255\277\274\250\256\027=\257\361\200\274\320\204X\273\371\r\237\275m\034\276\272\261\007\303<\213\270\265:\310\220\212;<\2770<\251\022{\274\316]/\275\034\341\247\274S\"\201\274\244\030t=\261%>\275\247\022\377<\375g\3169Z\371\351<v\033\302<$G\000>du\252:\017\013O<$\017\363\274}\200\307\274\037`\270\272\016\016*\275\210\204H\272\350\255}<A\003\t=\314u\276\274E|\305\274_\204\203\274Fc\005\276\225\310\312\273k\374y\274\235\016\352<$@\245\273e#\332<0\353\001=\3158\307\274\325\277\376\273\231?\025\275oL\353=\316\225O<\220\001\247\275\307\356e= \351\023\275\026w\265<y\024\302<\211\013\266\274\323\374\215\274\310\024\255<\020\323\001\274\373\370\335=\"\020\n\275Y\240y<\032?\371\274\302\034\235=\005Q\376:2v\021<-\250\234\275\021\230\030\275T\033\272<j\216\023=Tu_<.\331\004\274\370\220\025;\334LH=\251\203X=]f\247=P-\343;l\245\215=\272\352#=+\230\217\275\036\2049\275\233\326\315:\003J\'<\375\030\014\276L\320\276\274\267\311\263<\346\371<=~\316\247=\014\323\001\275s\035\221<\214\026U<\212*\247<)6\224<>\256P\275\014\036\240<Z\210\300\274PP\323<\260\372\233=\203\312\240\274`g\306=\221\273\252<\360\277\\=y\332\332<.\356\232\274\232\270?<W\340\031=\346\r\214=\261\206V=\237\315s\274\310\275\266<\025\273\332\270\252gu\275\270Z!=\260\224\022=\231\355Q</\254\261;\017\247#:\034Y\037=\te\260=DZ\360\273\212\302-\274\260\277\244\273Qo\240=\237\241\331\274Y\321,\275\263e\023=\325u\246\274\322i\376\274$y\203\275\343\367t\2747BD\273O\3513<%km=\351\317\350\275\234\226\220\274\277,\213\274\226\007@<{\201\256=\253\224\201\275\035N\204=\025\237\264\274x\316V<\305\"M<\250/W\270\366\317f<\272\361Y\275\034D\330\274\204\261I=\373\25789\222\"a\274o\216\211\273kE\016\275\032\230\367\274\n\010.=>\353N<t\246\344;\244\247\330;\247F\321=\347\010\316\274\312\037\324\275BRw\275d\324\362\2745}9\275_\n\000\275\373E\316=\315\300\335<_$[=Tu\257\274\'\223x=\345IQ;\004k\264\274\237\346\255\274\311%/<\200\022\n<\250\312\014=\306|\257=\3346\233\275\270\277\027\275V\037\221\2754J\253;\330\025\352\274\370\300\n<\324\036\r\274\364G:\275\316\200\373\274\304\350\301<\320\316:=\322\333\366\274\251\221\231=\004\2009=W\"\246=\003\344;\275\007\340\016\275\221\263G=\301\364\037=\030\000\333<\244\351\027\275D\031&\275=]\333<3\024\036=X\223\326<\272\366\010=pbN\275\261\023\255\274\244\264\035\275\215\245\277=c\317\321\273t\016\254<\242K\255:\243;\210=c\017O=d\255\336\274\364\243\027=\024\203\223\275\262\305/\275Me\200\275Sp9\275\344Y\323\274\204\024\226\272\370\213\236\275tC\221\273\350\371\023=!\t\001\275\226\3608\275\346?~=\225Bq;L\017~\274%\003\222<v\335\221;\230H\316\275\361\022\271<i\325\204=\207P\265<h\362\237\274>\313\004\275\t\330\n\275f\271\315\274\\\333w\275\262\203\220\2756\242\037\275\026y\265<\232,\366<|\002C\275\231\371\036\275^8;\2747\022\326\274\266\370U\274\222g\337<\371\215\250\274\336\036R<j\010\254=,?\311\275\023k\t\275\246\365\362<\370H\341\274\026I\312<\271\277\r\275\021\307\241=\322\313\223=CS\355<~D(\275LUg\275v\371\237\274\316m\002<\306\346\236<\335L\177=O\232\254\273\307\361\020=]\231g\275\320\350\310\273\356\222\341<#*\027=\007t;=\244I\211\274\275\336u\273\272\346R\275\266\256\010\274\245\"\227<\3643\243<:\310N=c\373\373\274J\273\330\274\241\010\217<\233j\307\274\210\024\330<\221S)\274F\335\273\274\307\013\232\275\272P\013=\332\330V<\270D\335<2\336i\275j\320%\275z\330\017=L\016\006\274\036\372\344\273\370\323E<\252\260C=\010\007\006=\244\304\250\275v\351\276:{%\375\273\276\3310\274`\265u\275\263C\222<\356\224Z\274\203\331\306\273\237\2679<w\330f<\034q\312=b4\222\274d\353\341;lG0=X\346E\275\210\264\225\274\241\220\244\274\234\031\272\273\375A\363<l(\375<\0239&=\213\360\255\275\327\212$\275\032\001\277<e\302\372\274\016\0341\275\236\377\253\274x3\261\275\337~V=$\\\372\273k\331\333<\375~U\275ku\232\274b>\016=\364\344\312\273/\204\021\275\200\305u<\\\356\267=\236\003\035=\236\nD\274\n|)=;a\334<\243S?\274\3415\353<\251&/\275\224d\371<\t\245\241<y\201\276;\330\345\266\274\235(\306\274\r\373\226=\334\352u=\302\033\320=\031RT\275\026\344E\275{w\263=\230\010~\275\243\000\017\275\234\372\"\275\235\2054\275\033k\005\275\224(g\274\304\320,\274\002,i\273\355\274\250\274\267!\250\275\376\261\242\274W\310\363<\203\305\340\275u]c;l\213\254;\250\201\245\274~\014\201\275j$\375\273P\375\243;\221,4\275\237\253\017\273Q\030B\275\205\354H=q\025\332\274\025\2051=\277\217]=}\270(\275{\237\221\275\346\242V=}C\245\274rP(<\177B\233=\353\022\r=\360\350\207\274\304\343\312=_\016\372<=\200\027>\235bz\275\366T#=gj\274<yh\217\274\025\327\026\275\010a\022\275\221[\307\275\343\377\214\275\237\303\030\275\252\350\241\274\304\212\247\275ujR<Mb~=[\'@=\323\3310=\340\024\313\273\200|\005=V\177\221\275\333\265\241=PlU=BS\377<\022\221H:2a6\275_\370\302<\215r\206=R\241i\275.\200K<\356\300\361\273\2564J\274\312?_\273:$\240<k\303\275\274\301<9=\264\360\252\274\376\231\320<\022GX=r-\000\275\314BK=\306\252\334\273\251\373\301;\203\272C\2754X\204\275z\307\020=\372\320\014\275\332\223p;?\352\010=\271\215\344\274\t\003\356:\035z\326:u\303\201\273\241]-\275\003z\203=\035\365\"\275\311\023.=\347~\306\272_\227\343\274}\202\334\274A\023\241\275\275q\"\274 \341\227=5-\035=X\334\342\274v\354\251\272_m4=\r\213h\274.a\'\275\366c!\274\243\226;=\311\024\374\274\r\203\225<.\370U=\013\255\232\272m\007\373;`\006\233\275\003\024\024\274\303]\213\274Y^K=\271\246\310<\204?\032=\277\257Z\275\"\365\237=\324\365\275\275F\354\252\274\220s\213\273u\245\222\271</,=.p\241=\005\010\215;\250\350a\273iKg=\365\342r\275\200\177t=\345X\263\274<\006\303<\245\244\240\275F\217\376\274\220\034~\274\354\007\226\274+\336X=%qU<\307\244\376\274t\310@=\333A\277;\021\301W\274\222\036\247=`\017O=mk\010=<.\364<s\335$=\2067%=\357\010\230\274\367\222\223\275K\3026=\360\341\252\275\275\242\332:o\245);\266ms\275\2474\372<\006\357`<n\302\033\275\342A\277\274v\331=\275\210\242\\\274\343\206\302\274\310!_;5D,\275\313\320\210=\274\240;\2749 \010<\320{U;a#\207\275\374\037\001=L\303\252<1\316\010=\370U9\275\022\310p=\354\327m=W\226J9\356\366@\274\266\210.\272\214\351\021\275\275a\'=\220\033M=3q\347\274{\366\245\275}\216\004=\036\222S=\263\005\260;\252\344\030\275\253VC=\034\031\371\273\257\010\223\274\216\343\226\271\276\021\201\275\313\276\320\275\326\226\200=\221t\'=0\351\301</d\307\275\353\254\202\275e\375\004\273\241\311j;\023\342\215<\326@\217\274B\200\206=I=\204=m\264\365\273v\234\023\275\214e\311\274\323\357\233<\231\003\200=U\257N\273Ko\344\274\270\2316\275A5b=Z\027\251;\320\271-\275\000\000=\273\007\237\301<\351\270\314\274\250\232*=\r\254\001\275\\\300\245\274\336\216!=\201\322\006\275\\F\303<\211\261\014=\314\226\221\274\364g\010\275\206\375\317;\312S4=\313\267\000\275\320&,=\t\006.\275\217\t\323\274@\177\314<\031,<\2745\302\324<\307\371\024\274\367\342.=\026\236\023<\374e2<\264T\317<\014$\010=?\327\t\275[Q^<S\332\254\273\247\364\336<\210#\014<4\021\371\274p\2112=\314\317\023=,\204\023=\221\347\302\274\375\322\360\275\253\r\324\275\300\364\272\274\210\310(\275G\203-\275\366\276F\275\261=\262\274c\037\300<1\344\276<Q\227w\274\263\367\013=e\320\266\275\323K\214\2758v\243\273Z\267\212\274F\024\235\275*\350S=\221\337\216<W\272#\273\0173\326=\276`?\274\244\337\022=\332\002c\274\314\363$;|\2413=\353\214\275\274\\\365\323\273e \314<:\253\335\274rY\223<j\371\004\275\366m\236<\337\256\212\274\321\350:<%6&\274J\340\210\275\210\263\014=\262\037\364<\2575\022=\266\370\371<D\221\257\275<\240\"<V\3021\273\031\010,=\374\034\205<\314\337\005<\025\230\'<6_\374;h\333\254\275q\036\225\274\346W\301\274_Y\302<\372\203\365\273\273+\302\274\203o\312\274\312\003\201=F\350m=5F\005\275n\272\214=\013\313\256;\"U:\273Lh\252<\000\023\224\272m\006\200\275~\254\210=\246a\303<Xu\201=@R\206=h\230\227=\250\376\027=\004\257\371<\317u\030=\350\310\024\275\226\357;\274\023\335\026=\303\032;\274\353IR=\032W\236\274c\342\223\274\013m\247<\224\330\274=}_-<\262\033\022=\222&$=\302@\273<)G\271<\361oh<@)\273\273T,\343\274\367\211\326\274\337\372\032\275\034|\356;(E3\272\356\217\310=nt\252=\246W\311<\245\364\037\274x\3720\272\201d\201=b\224(\275\231\232\'=\'\336\335<\241{\226=\017i\203\274\336Y\217\275\372\364C=2H\270\274\032*\255\274\316\013\307\274\035\366\005\274~\026\003\274\343za\275\335\273\227\2753\021\231\2752C5\275S\3545=|l\337\274\215[\226\275\000tT=\177\273\206\274a\261m=:4\314\274\267\303`=\261\377\203\274%P\200\275P\242\202<4\270\020=\213\307w\274\355q\r\275\344\354\250=\212\344\017\275\375\320[\275\272\352\003=\305\342?=\005\226\307\275i\376\245<\300\227s\274\264\262<\275\023#\230<T#W\273\307\023@=|\344\034\274~M\036=5T\340=*\007J\273q\346L\274\317\277U\275P\240\343\275vJM\274(L\201\274=\361\n=y+\202;:\324$\275h-k\275\267\030h\274\213F\335<\370\003x\275i\025\253\274\244,L\275N\221#=\252\2602\275\231\376\025\273\364N\033\274\005\031\272<\253\376\313<f\372\311=T_\333<\377s\221\275\312p\346:\344QV;\037\016\033\275T\221\036=h\302\013=\215\036\206\273lP\323<\237+\004=\260]\207\275\320\226\006>\252\364?=A;=\275o\326`=\300\236t\273\003\032\002\274v\222\n<\377\325\342<\314\205\005=Q{\024=\351\357\n=\265^\337<\267cP;K\335\230\275\340F\203\275\\^4\275\222\263\020<\271\274\212\274\311\340\202\275\370@,\275\232\207S\274\216\252\265\274X\367n\274o\212\332\274\274\377\023\275\221\177\266\274\001\371\202\274\\\352m=\331i\231=\352Rz=\002(\302=- +\274\265\266\241\274\317\253\214\275c\225\210\275\207Aj=m[T\275\022]$\274\332\246\200\274|\346\307=\265\021\311\274\373\324V\275n\266\303\274\221;\022=0\307\313<J\236\020\276\301\rc\275JW\222\275\304\363\220\273\037\267\033=\206\3040=\272V\t=U\345\207<\027[\225:lT\003\275?\235\356<\024l\t>\245\025\370;uil\275&]\214\273\000\375p<\247\361\234\274\032S@<\241\326?\275\311\315\321\274\216,e=x\227\222\273\315\301n\274>a\215=\210{\230\274\035\326\227<\264\303\332\274\020\376J\274\026\265\025=Y5X:yb\214\273E\377\266\275\236\313\313\275\310\030\211\275\222*\215=d\261\303=l\312\310\274D\206\022\275\272]K\2736\250/\275\234p;=\030\266\327<\377\362\260<jc>;\212*\361\274\212k\035\275dQ\243\274T\275\265\274^f\225<\217|0\275\367a\367\27499\030>\366\000\233=*B\023\274\003T\324\274%\312\305\275\227\347\246\274c\304\033=\325t ;\206b}\274\315\363\211\275\332\270\220<\222\253\310=\031\373<\275l\215K=\005\2028\275\266\323<\275\224\276x\275wt\023\273\016\263\266<u\367X=\035\322\317\274\240}!\274`\320Y\275\344\220\312\274q\260W=\230\237\363<T\317\021\275h\244\002=\246\215&\275\361\312\255<:\232\'<\022\027\"\274_~\215=\300\332\177=\"\007\351<\237I\303\274\001:\267\273.\267\204\275\234\352h\275\010[\260\274\270+\256;\2746\306;\261y\301\275\016\036!=\252\033\224=\261\354Y=\237\354\233=~\330L\275+)\304<,O\227\275\212\332\214=\277\366\022=\230\rS\273{t\313\273\337\004\351\273\256H\217<\007\006\200\274\336c\326\275\262\266\317\273\307\020\017\273X\345\376\273_\373\201\274\342\014\266<(\323\021\275b_\"=R\037\337:\200\335\020=\252GK\275\270\3521;\tD\361<\252\333\234\274\325\350\215\275.\017\014\275\233\007\216\274\241=b\275o\n\300=g\276l:%\313u\275U\002\220\275\250\250\207<\253\222\327\274\256\206:=\003\371\036;A\220&=\r\362\004\275\214\317\267<\002Hm\274~\371?\275T\362\236;\301U\007\275%%#=\307\330\017\274~\347\224\274;\347\362\275-\006@<\010\357\201\275\005#}=\027\240n\275\220}\265\275\242\252w=\3452D\275:\257\222:\272C\n\275~F\003\274F\"\324\273;\3403=\221\210\264\273\321\205\342<\304\306\211\274\005\003\212\275\0161\016\275\200\346\271=\212\002~=\' \317\274\244\304\224<\r8\306=\255S`=N\016\253\274\214;\316;\223\214\221=\245\315)=H\276Y\275\357:\227\274Z\354\'\274\036\224\231=GS\234;\2464\205\275}\246q\275\307\254H=M\023\265<\253\n\257;h\235\016\275\327\315\004\275\327\260\356\274\257\212\020=O\311\206=\324@\274<\330|l\275\340\2623<O\007\243=\001h\343\2729\345F=\010\\\222\274\025}\216\275\024\260\221\2757\024\020;\240\327\325\274\273\331j\274e\300\231\273z\311E=\3717Z=\343\307i\274\247\010\010=\217\035\207<\302\344?=\260\020\253\274\326G\027\2749\322\361\274\260\342\\\273\362\325\331<\302\270\264\275clE=\036MF\273\020\\c=\206\341\277<0\225\303\274?\305X\274d\305\007\2755\205\231<\\p\017\275;av\275\177\351\026=A\377q\275\223\364\211\274\t\232\374;\365Q\312\274\362J\003\274\026A\207\275\016\3441\275I\223/\275\362j\200<\225\331[\275\352\220\213\274+\330\211;k\373\005<\275}\275\272\366\0363=\243rd\275z1\206\274\255\270\262;\177\274\024<\236\266\037=\375\376\016\275\344O\236\273X\356\345\274\235uE\275x\245\233\274\243\305]\275\237]\240\274V\345\014\275\014\023 \275W\355Y<S>\"=\010g\342\274\274\235C<ZV?=\203\231\005\273\305p\334\272\376K\347\274\265# \273\277Xe\275\306\374\210=Yo#=7AD\275\200\372\'=\027g\261=R\347\002\275\211F\335<\210\277R\275g{\213\275aU\022\275\026\032^\2749\026\010\275zT\276\274\307\307\360<g\027\242\275`\234\215<\251\2444=\036y\034=\256v\035\274\306\341\371<x\t\312\274%4\216\274\357NS\273\253\256\305;\261\371s\275\266%\270<\252\231\210<\276\016\024\275\334\324*\275l\310\"\275\257\267\204=J\241\264=\306i\321\274\264\376\311\275\302XA\275\\\020O\273\237-\274\275\033#\253\275\265\215H=\0107P=E8\004=&?\351\273\320\307\224\274^\022\320=\363\231\350\273?\334\230<\273\320{<\376\2359\2745\274\371<\310\266\265\275q\240$=\317\277\207<\rE\301<=\022\246<\374\025|\270I\266\252\273fX\211=\307\003R\273\016\247\007=ACU\275:\274\207\274\345\226\212<t\"\221=\313t\331\272\017)\032<ia%=\\s==\271\343\220=x\255@<\301\262\315\272k\001\350\274\016\361p\274\257Yb<\033\362v\275\304\276\003=\215\301j\275K\201\246<\217wT\274\325Z\013\275\366\177\225\274\306\313\203<\325-\313<\234\306\336\274\277\272\307<9\263c<>\242/;\203\006\237<\213\204\301\274\223\245\360<m\007\034=\202\372\260\275V\272\210:\030u\363<\333&\335\274\306\253\016\275r\336d\274\214:Z=\304\nw\274!\007\032<\376\245\207\274\206\004\360\273\375\032\351\274\213\370\023=x\223\207=\301\3137=\306\326W\275\205H\222<-\357\361<\223\312\323<\313D\331\274\332[\373:\033\203\035\275)\310\234=\021\314\013=:\321&\275\274\205\330<\366-\260\274&\242E=\236=V=\352\312\242\275\036\260\263\274\347\325\337;4\306;\275\353\363\014\275\347T\227=g\371\017=\2360\024\275\261v9=\353\201\257<|\036\001=\234\333+<\343\r?\275\026\r\240<\017\307e<\326\330\225\274O\032\000<\320\232\243=S\235\254\274?}\237\274>$\205<\206\200e\275U\250\236<b\023\303\271(\347;\274\224U6=`\336\201<\2550\324<O\203-=(\335\257<&\214\253\274]]-\275#\246\023\275\253/\020=-d}\275\301\206\364\272MT\024=\263\2571;\201\232\216\273\311\352A<\337\306\257\275(\362j\274\222\345\323\275\260\356j\272\326\312\237<\247\334&\274rk\030=\017\333\010>\007\314\241\275~\302\004<\302\003\r=\036\037/\275R*)\275\311~q\275\3102/=\271Y\235=\235\263\354\273\330KG<\334j\223<\316/\243\275\274>5\274V\014\255\274y\027:<\376\307\260<\373~\203<=\322\200\275\313\347\377\273\024\023)\275R\2025\273\3051%\275v\0134\275B\245\244\274)\241\037<\204y\205=e\206\200<\023\241\"\275z\214\001=[\303H\273\257\003T\273\306\226a\275\371\t,=Dd\311\275\314\227\005\275o\223\234\273\375D>\275\257\264\202\274\352\272\233=\251\376\250;\235I\013<\3111G=*?\001=\366~\222<\016\303\222<\252\177c=\256v\245=\254l\226\274\224\003\347;\t\0164\274\037\320\377<>t&=)\260\207=\344\001u\275z\220\027\272Hnm<\321\252\\\273B\263\326\275D\200:;\261J\315=\357U\244<\034\374B=)=|;\2145!\275\300\204\355\273\314\257I\275LM\222=F\003\265\275\226\340\007=\310\235\\=T\343\210\275\305F\246<x\177\300\274_\346@<\232Q&=\017\022|=\316\256\315\275\227\0200\275\"r:=]\0003\275a\232`=5V\313<\275\261\213=\266\360\200\273\330\307v\274\246yH=\215\027)=\032S\276\2745\211\375\275ly\257;^\326m\272\275iB=\353|\216=\323\251b\275F\017\352<0\315I=I\3140\275Z\314\356<\203\201^\274\236\'.\2748\346\036\275\263\025|\275\030]\272<\254#W=U\254\265<w?\221\275}!\026\275\010\215B=\275|\205;\225\030=\275st\330\275\200-;\275\200|O<\372\304\334<\340\3464=\331\212\035<\224;\220=D\345\031\275\017\203\240<\353S <W\000 \275\215<\251=\354\225r\2750]\325<\376\332o=\370`\271\274}\216\214\275w\314\032=?\235\322;g\001\304\275\233+\232;\017\256Z\275.w\213=\324\365\243<V\322d;\034\'n=\225T\334\274<\003\241\274+\267\033=\370Bh\274\266\321f=\273\251\232=\010A\023\275i\177\007=\377\341v=\353f\321=1\256?=d\270I\275\375\276\220\273=,\212\275\242\201o\275\245\340\316\274\351)\274\273\261\r\312\274\343\350\213=I1\020\275\340\317\204;\266\244\353:;\200\031\275\275\n%\275\330WZ\275r\n\023\276\245??<\017\007\276\275 \007\263:Gd\212\275\355-\314=F\305\024=\347\023?\275\2516\275=\0072\243<\021?\244\275=\330\001\275\370\372\342\273\037H\036=`?\032\275c_d\273\372E\305<\226\216Z=\245\334f\275R\237\227;\261\020\313\274a\335\317;hw\252=\262C\226<\321\354u=\206\200\313\273\ni\217<\367\245\023\274C]\317;\3140\325<)\327\310\274\301\255\352;\352,\030<2*\031=A\\\330\274\347w\251;J\230\374<\237@\016=\033Ds=\266T\261\273\352\360\243=hB\231\275/1)\275\305\320H=jm\240\275\366wx\274k\251\023=\366?\337< fe\273[\2745=\020\214w<@\375\330\274w\337E<\313\275\210\274\201\230\243<\014\355\343;7\251u\274\237\362\215\2751GP\275\376\271\245:\237\035<<L\037\215\274\021\014,=\205`/=\032W\206<\211\326\340\274W0\205\27522\022=\231\257N\274\235h\252\273\247\000n;\211J\205=2N\205\274O\365V\275~\037]=\232\022\003=\365\025\326\274\255B\021:\360\253D=y\375\177\274\033f\337\274\"\215Y\275\2120\216\274g\"\244=\036X\032=\337\231\007\276\240l\261</%\222<\305\224<\273\006B\037=]\234]<\3111\311<\371E\245<r\213\213\273\351k\217\274\rhd\274\312t\334\274Z\276\313\274h\371\316\275\2507\352;3\343\2339o\361#=\240\323\263<\265\362\r=\006\260\035=`;\224\275\270<+\274\201\222z\274]:\277<.\027\341=\033\331\307\274+\375\211\274\335\350\324;\222,\030\275]^_\275\027\240X=\003\270$\274Y|\370;#v\334;\325\217\305;\360\247K<\2349\266\273\r\314\031=w5\221\275\025\342t\274\014LZ=\r&p\274\014\005g\2750[\231\275\202\n\000=a:\r=l;3\274\322\010\3028f\000{=\235\272W<Y\234!\272\333\333}\275f\220\263=b\005+=\267v%\275\210\336\250\275\230Q\243\275\357\242\235\275\315\277\223\273\265\022\004\2754\226e=\223\276t\274\027\027u<fU\002=\207(\312<\021\010d\274lIf=\355\177\237<\214\036\244\274\317\263\027\275\245!k<\273=\":\327\246\203=v\272|;\373?\000\275\203\024\264\273\337\\O\275R\264\355<\006ay\275\264W\353\274:,\r=:\373X=y\250N<w\302\241<%y\\=\273\023\267<\227\r\347\274%\"\257;\2118\333=Ln\225\274\302\310\254<2S\365\274\344\257\224<\217&\237=\251\355\301;#\177<=\327\330\270<\322\314\261\273\364\304\341\275/\032\010\275\305\242\307\274DQF\275\333;\251<D\314=\275\265\260t\273e\177 :Gx\026;1\262E\275\3157\224=8\030J=\033\211l\274\006\235\323<i\307\203\274:\327\r\275\327\245\227=\000R0\274\366\022\273\273\245\3134\275\224+\007\274\017n\034\275<VH\273\274\002\217=s\3476\274\362\356\303\274\237\0337=\0033\034\275\352\021\270\274||\344\274K\177\271\274\221\354\223\275\343f\343\275\'\006\241:t65\274\334\216g=3\352\361\275\371\037\206\274\205\254\027\274]\021\270;#4\217\275\215\343\254\274\337Pr<\334\035\353\274h\007\302=\221\010\027=\354z\027>\020\rn\274\224\232\240\275\257\357\226\275(\3431\275\207O\226\273V\005:<v\031\242\274B\251\316;\366S\237\273b\022\362<\031\245X\274\315B8=\2366\221<\366\364\227<\215\014\317;\241;a\275\364K\220=\007\3658<\200&\223;\254\212\214\275\213\333T\275\025\256\370\274\332&\221=\256d\255;<a[=\026\002t\273+\350\205\2745\373\313<\313l\010\275\215\374\366=\263\257\203;\367\312+=Z\003\335=7\"\217<}\3412=\303f.\275\334wI\275\271[\030\2750\265\232=\013\206\350=\246\360\206\274\257\227\n:\260`\003=\360\351\277\275\216\223\264=\232\003e\275\224B\214<\227A\332\274\360\326P\275\\s\240;Y\373\267\272y\312*\273/\232\024:\330\240\026\275_\305\001\275`\222\254\273\227\2548=GX\354\274\303\2667=-DT=m4\240<\220\205\245;YH\277=\\\n\262\275y\006\000\2726\342\342\274+\331\223\275\274q\211=\275\205\316=\347Q\n\274\253\005\233\271\375\352\024\275u\332\375\273\302J\346<\243\261\\=\374\376\232\272\242\303\223=\342\025m<lz\331\2739\201\246<\345\032S9\204\362\004\274\243\351j\275\374>\322\274\007u\010\275^\016\037\275\245\363^<\203.9:\212\215\273\275d2\300\275\227\036\022=\256q`\274\202\304\275\273\343\376A\274\236\013\000\275\343\352\223<\202\034I<_z1\275<\320\000=\217{x;@\036\033=x\301)\275;\332c=AF\030=\033\232\322\274\273\354W<\331\243\201=hd\270\272\333\306\320\275\310y\246<2-?\274\333\371L\275\273,#\275\376\021f\274fH\233=\323D\273<\230?\035=F\210\242<FB\304<+\247\302<\024\252M<\375\336\242\274\302n\374\274\224\023\370\274\267\363\355\274e\0268\274Q\340\014\275\326\207\244<\276\250\245<\353s\333\274b~\230<Q\305\212<\256\373j\2752*q<VO\221\275\350\332W\274\367\034\225\274\007\317\204\275\212\343i\275\3468\212=C}\254\274\013t\234\273ZT\024\275\202\277\332=q\225\361\275\303\317\017\274s\253\271\273\014\363\267\275r\221\327\274\265\016\336\274\251\026\207\274\364\010r\275\376\334\324\274S\374i\274\311\030\005<\275&\007\276\347b#\275\364\373i=\213g\252<\251:\206\272\033J\030\274\264)\206\275kL\021\275\235M\233\274\225K\035<\364\2074=f\364Z</I\311<d\354#=\"\225o=\305\300\026\273\3066\243=<\276\312\272\026\242\247;\017\344>\274biy<5v\357\274\023:\032\275\253\230\220<\213 \275<\234z\340=\322\346[\275Zo\323<\010\0109\274Q\201F=pZ\r\275\272\227\013=\222\024\273<\334E\210\275\032\355 \2751;\037=\316\001%;\300\237A=\202\356\006=\211\232\031\274E\346\013\2750\036\033\274\030\003p\274O\241\332\274%\257\230<j\262\223\274\370\270#\275\247\206[\274k`\207\274IHC\274\234L\220\275\017eo<\212\035\214\272\307-\203\275I\366\013\275\371\246\370\274o\016\327=\373\306\352\274\036\322\016\274\216\3139=\274\354a\2759\227\327\274<f|=q\251\003\275\372\035\266<o\374X\275\370\276\237\275\341\3537<\321\r@\275\035qf\274_\177\365<.F\213\275\022\242\271=\371\025M=,\021\311=\272\257\006\275\375Po<v\036\'=\213\260\336<\014A\201=\311\271\316\274)\032E\273\264\347\220=\341\262N<\240\371\211<\325\323!\274\026\367\220\272Y\355\331<\330QE=\266]\240\274$\255\"\275\371k\263\275\033\'\355<\206\200\233<\201\022\017\275(\030\261=\351\306\030<\236#G<\342\004\004\275Y\0324=v\037v\275\247\247L\275^\357\216=\277\004\n\274\\\244\260<\202\274\203\274\312N\224=lf&\2759\233_\272\362\204M<\227\\\177=\333\236\276;\315c/=\237\266\225\274\302\236$\275\330\350\376;]\324\n\275\323y6\274\'\230\361\274\350iK\274\364\367 \273+\207`\275U\013t\275C-\275\275nV\t=\276\351\270\275\201\231D\273\335\354U=[\000\203=\202l\024=\034\310n<\244\250\016;\345\314\306<\325\200\361;\0105\316=r\005{<|z\215\275b\354\333\2723/H\275\354O\207\274Fg\036\275\r\311\227<<\241\031\274\323\362%\275\225\233D=m\355(\275\266G\375<\215\326\244\274\216\314f=\n]\311;\242F\347\273\342\231\255\274\3131\247=\366\376\031\275\210?\220\274MO\327\274Ces\274\224\252\030\275\024\216\n\274\217\275\000>\031#\225\275Dh\313=S\352\320\275\256$|\273\237n\027=p\333\347;\317\243\335\275\023\177\246\274\2508\220\274\t\350\223\275\301V\306\274tu\320<\331\205\347<Y\021\020\275\235\\\251=6\301\037\273\217\013?<\264\037;=?\"\310\274P\377D<\270\204\374<\374U\237=\373\267j=5\374\030<MK\375<\337\315\336=\256/i=|H%\275#|\314;\002r\030\275D\231\201=\033\324y=)\035Y=\353F\036\275\230\302\013\275\345}\260<\322\350\371\274\320\022\214<o^\237\274\266\336\"\275^h\356<\375%Z\274C/\233=X\234\305<\026\257\211:\367\031\242\272I\367\310\2754+\270\272\313<==\036\365\241\275\2044S\274m\201\004=C\251\223=\347z\236<\261\312\233<\305\267\316\273\354\200\240<Q\307}\275(\014\212=co*\273\345\242\236;\326\340\201=V\320\255<\014\213\225<\357\252\267\275\333\335\255:\255\212\026=\271F\322\274\230[\223\275\320Ft\275\333\037\217\274\377a\322\2736\300\004\274\024@)\275\201a\265\275\372\354\017\275\351V\214<\002\323\202\274\244\225\344<\203\t+\275K[a\275D;\223\274\\\266\336=\322\354\"=\354\364Q\274n\256\220;\365\3211<\277\236:=\244\220\244\274\243]\003=\003Y\203=R\205\223\275\225\177\345<\206\320\206\274\010\234\327\274\354\323<\275\211\010\305<\305A\204\275\223\t\376<ef\264<\345\201\177\275\022\010[\275\255\260\033\275\376\255\024=L\1779\275M\376\007\275\017\027J<\347\2420<n\336i=\313]\310\273\326C\001<\000\317\271\273h\243\'\275\'O\241<\027\007\225;\321\351Q<\030\251\225=J\215\307=}Yj=\376/\352<\037%\237<<\023\025=\272P<=\247B\232\275\324\363\252\270\310\234\346<(\2700=\331\356\334\275!n\223;\235\217\000=`\352\230<\242\022B\274\027\307\363\274\036\233y\275\202\336\202\275\007/\027=q\2100=\333\224\211;\214*\332\274\262\016\300\275\001~\201\275\200\365\023\275\234#\230;\316\340\255\274F$\372<\027\252\227\274\234\234\342;\223n\003=\0272\305\275 w\232\275o}\023=2\004\361\274\022_\224<\037\231\026\275\233\326\212\275\031T\214;fe\230=i\364\032\275\000\004\257\275\030\242a=\277vo<\240\364\260=\327\017\342\2743\207\222\275\326\344\2777\223\244\035=9\200\334\274d\273\004\275\260\371\223=A\210\202\275\375\363\013\273\305\347\"\275?\320\260\275\212\345\004>\317\334\306\274\300\032n=\004\346\262\274\257!\010\275\357{F=7,\306\274V\237\264\274\0133@\275\222\344`<8\336\212=\312{\n\275\303\375\200<_\307\023\275\213X\223\274xX\271;:I%<\343\215\230<g\355\034=4F6\275_\2104<-!\'\273\271\\\367\274\256\371Y=\323)\231\274\207\300\321\274\211\252\261<\"\246\022\272\0328\020\275#?\014\275\310\230 \275a\3373\275M\377\355;\372\'\314;6\177F=\345\344\247\275\316\027\003\275BxF\275\237\3433\275\242hd\274\343\372r\2757\2743=(\210\374\274\007\267\241<`\265Z\274\311q\205\275\220UQ=\212\205\337\274\203\031\374\273?\236u<\375\261\377\274\356\224\026\275\341\220h\275J0E\275i\213\365<\002\3270=Nx\200=n\216\013\275\263(\240<\233F\325<\227\'\037<@_\025<\0175\256<lc\323\274\'s\233\274\240l\022\275G\020\346\274m\315\003=hX4=zO\016=\30730=\272\251\034\275%2d\274\005T\213\274i\270\016\275\026\215\013=\366p\301\275\004\200o=\006J\016=\327\003\017\275\312\207(=\030\265\214;\006\247\022;\004[);\264co\274\004\315*<J\005}=C\275U<Yt\300<]\303\251<4\367J\274\000e\321<~%2=H/!\275J\014X\274\235\261\264\275\241l\021=f\241\t\275\233\373C\274\233\370c\274V{b<\033\3530<MH\n;\032\370\210\271W\177o\275\226\003F=\265IO\275\001\014\320\273\345\0320\275af\221\275C\264\372=\315^\252\274\244\247\000=\307^G=\230\0220\275g\350\210\274\017,W=\310\007\303\274\240\217\364;H#\311;\227\236o\275\206\020\306\274XI\267\274\373\302}\273\203\314\375<`s\350\274\017bH=\350Y\203\275?\221\024=>\326\235;yTu\275\306g)\275\262Bf\274\350d\323\275\221\334\332\274\375t1=\321,\215=\006T\206=9R\233<\363z!\275\345\261\224=\264\377\274:%\022\366\2743\355\252=\345\222F\275P\320Z\275\037W\324;\255\367\346\275{J&\275\277\027\215=\200pz\275{\325\216\275(?\204=\250\321\316\274\253\253\032\275rm\275<I\277K\274P\026\222\274\356yL\274\0365\216=\317\342!\275\201bN\275U\r8\275b\265\224\272\247\354 =-Y\330\275\321{\017\275\373\253\032=y\001\325<\3044\355\274\353\312\017\271\037O\313\274*Sq=\037\241\252;\366\017N\275\364\260z<\303O\201\274#Y\024\275\263fn;H\324\300\274\270lE=\260\3438=\325\034x\275\355\204`\275`\322\224<\243ay\275@\275\333=\370d\003=\270\\\203\275\362.\353\275\333\311\264<S\300u=\264\341M\274\271M\213=s\036\017=A\233\373\274\256\211\013\275\371\247\230;\030\001\005\275o\267M\273\364\334^=\345\003\342<\320@~\274\252\372\364<\376\305\267\274\226\205S\275&\017\032\275\213\210\226\275\3606\261\272\t\n\263\272Z\226\207\274\217\335\221\2743xk\275\224\375\206=Lv\260;KY\020\274\275\336\033\275\034o%<\347\254\346;\025\376\216\274Z\302a\273\023\013\230;\204\261\201=\tJq=\231\\\373<\336\320\216=\231\006\201\274\252)\021=\026\260\275==\371\220\274\024\334\217<|\373\317\275\246\201\010\274\231Z$\273\007\345\276;R\373\215<\3104\033<\231\022p\272\340\024\037=\225(1=}dS\274\233`\275\274\213$2\275lt\034\275\314\274\360\2741\\I=\035\2279\275\2402\276\274\352\224v\274\323@\312;\000\270\027\275\267_\247<,\204c=\271I:\275\316\331{\275_\206\335\275\213/\327\274\346\037\036\275j\027\371\274u\037\312\274\024\374Y\274k\0055<\354\200\347\274<\216\346\274p\220\233\275\013\306\204=u\344\r\276\353\037\017\274f\231\027=\344\255\312;\003\007\234<\010KI=\301A\030=C\315\251=\177\215[=\036r\n=\002mW\274\342\341\220\274,\355\220\274\326U\'=\010\004\204<\034\372x\275ONM\274\241}x\274\234\276\272\274f\036\235\274\317\027\206=\262\374\264<\326h\211\275\274&c=a\265\317<t;\302\274-g\221<\227\034l\275+P\252\272K\315$\275\361\213\256=P\225E\275WN\'\275F\324\330<y7\343<r\311\240\272\036\204 <\010hn=k\253\034<\352U\322<H\321J\274\272\3558=7\346\233<2\033~\273\rf\352\273\026y\211;\214Q\330\274b\345\324\274\307\003{\274D\226\206<\300\3036\274\351x\310<\333X@\273Ph8=\310\346\353\274w\246\374\274\036\313O;\257\305+\272f\364e\274\031\252\230\273\266Du<\356E\203=\361\244p\274\330\233\272;\253\367\036=\035or=0\0108<\n9\256\274\354\237\340<E&\312\274\241~8=\322m(\275\265|_\274kk\327<\353E\214\275(\277\325\274F2\241\275J\205z<\017\351n\275\330\225\"=\321\311\020;\266\311~\275~\335\313<\301\034\253\275WK\254<\260\017\261\274UU\032\275\201\357\251=\374\351\000=\270\033\023;\332A\202<\257\004\370\274\232z\r=\036X\005>#\327\002\273[\034$\274S\023\017\274\030\321\232\273|m\261\275\366\233C=\335\302H=\365BK<\006\371\222\275\335f\253\2752\316\204\273\177\205!<\006\027\225=\300\340\263<J>\200\275\026\232\313<\352\326\033=\356^69\374\326\322;\201\221A\274\01736\274\022\314g\275\243!\214=\307\251\320<\251GQ\274&\310+\274\274\252\321\273\276El=\027^#\274\220?\351\2736$U<\247U\221=(.\245<M\351*\275|\335@\272\363\227\344\271\315\263+\275\301d\207\275\327\235\207\272;:b<\\P\225=\246\036\261\273ik\336;\243\222i\274\300c5\274~\273n=\254\266\223\274n\361\201;~` \2751f!=3\251/\275b\211\022=\200+\205\273FI\251\274\"\221!=\201\273o\274\342\263\276<\303\261\252\275*=\334=\253\336\223<\302\033\'<\300>\374<f%\227=a\316\327;\234\320R=2\354\205\275\367\032*\275\315\343\033\275>\322|=\002N\275<\030\354C<\253\032\006=\200s\270\275\322U\302\274?\'\312=\235\355\344\273\265\355o\275j1\001=tV\351=t\226\321<H\243\3518\355\002E=\326\276\206\2750t\365\274\263k\320\274\336TO;h\010\346\275\2000\006;\2161`\274\216\013\020\275\241f \275\n>\236=+/\n\275\273\027\220\274\016\323\n\275\226\333\210<\313\313 \275\256\030\t\275\240\232a<8\2551=\321\265\252;n\271\200=-p?=\233\036\216=\371\251G\275\205\002\021\275\300\354\"\275\314tp\274\235.P=(\267\227\275\276\362\'<\220-)\274*# \274\304\373\034=Ey\035\275\342\211\005=\340\326\350<\272Zo<\027\253\375\274F\r\317<\237a?\274\251\361\021\275[l\222;\373\032\245\274Dp-\274\202\367Z=KP\004=,C\276\275\301\336\032<\364\346L=\021&b=\n\313k;:x\216=\317Z\233<\343\270\222=\204\031E;\236\034`\275U\211)=Z\217H\275\251li=\354\207\026<d&\240=#O\227\275\004.\373;\364\305\017<;[\210=Hw9\274\n\323-\275\215\244\236<\305\237\235\273\337~\324<\316\2120\275\2148\214\275\226\226\275\274u\342B<\177 B9\033\334W\274\327\224\r=\312!\241\274\370X\367;\241\274P\273\322\372p\275\302\316G=\304\212\212<\010E\222=\237r\215\275\3401\364<\027(L\275\2134>=\002\370\301<{\036Q=XX\247\274\252\336E\2745^w\274L\366\210\275\365\344\030=\306\360\"\274h\001%<k)s=\200\001G\273\030\261r;t\"\210\274\343Z\263\275jn\263<\366\334J=t\256\220\275{`\200=\372@\013<z\222\024=\277\010\344\275\376Q\235\275\223\031\005\275\016\250\242\275w\216b\275\232\273\023\273/\033\'\275]p\336<#\315\033\2745d\037\275\027\007\202<gS\243=\033\203\255\275R\251F=\304\213q=rkl\275\317\373i\275d\263#=\200u\227\274Q\360\347\274y\013\243<\350\225>=YM\225\274d\315\024\271\262\036<=\242,\034\275\240[\345\274\304_,=\327\310\204<\374\2172=F\257\344<\275\026\223<8\324\274;\025\031\315\274l\000\255<\337L\010<l7\372\273\010\200\362;\006\363\254<;\215o=\307\271\233<\232f\'=\032h\235<\272$?=!\005s\275\321\263\252;\213\353\352<Y\272*\275hu4<Y\215\367<5XY\275\034\'\001<v\372\274<.\310Y\274\350\361\246=\021\264F\275\005_7\275r\003\240\272B\177\310\273\357\334\217\275\177b\247\275\217\235\210\274\232\007\315\274\013U\230=zFf=\367\333\030\275a\253\370\273\275^\2109\256N+\274\330\217\232\274*\276\022\2757f\316\274\037y\026\275\310\337\026\275\215D\274<@\372\372;\3066J=\202\377\201<\027\346p=\225\317a\274eZ\362\274\275\354\217=\247\006\210\274\351*F\275D[\262<?\006\"\275\314T\177=N\033%\273\017\031$\274\021h\004\275\315\213/;\247\207L=\312Y@=J\264\302=\321\313\244\275\220\2137\274\241*\220\274\220\330\323=\3271p=\254\037\252\275\014U[\275\361{\000\275\215\307O<(JV<\341\213\264<\210P\025\275\270\345\027\274\352A\215\274ki\032\275\250\016\276=\220(\307;Z\246\030;I5\214\274\n\322\247\274\312\n\306;2{l<\217\203\274\274\021NY=\306\242\346\272\231n==\355\233\357;\357f\002\275\302\212[\275U\252/\274\247\2521\275\204\216h\272\305\320\211\274\177\265\347<\r\330n\272\374\023m<\226\315\231=I5k=\250\032\257<;\326\325\274\222\347\211<\007\036\232\274`I\302\273$\326\206;$ h\275\344\254N\275\327\373\2129\306\002M=\231\002\354\274s.\021\275\007\345\245\274\0036\366;\376\324\263=\035\336\313\275l\270\245=\374s\265<\244\204\262<\247\237\277\274\307\207G\272Py\206\274*\021\332=7s\000\275\251l\330\275:\205\016<\t6\225\274\247]\206\274n\262;=\0058\245\275X\t-=\375\237M<-\370\315=\326\346\206\275\205h\357\275\002\304\360\274U\0206\274z\340\250=\341Y\220<Tb\\\275a\3164\274\231\034\013\274!\205O\275Qx\301\275@\367\351\274\345D\323\274z\262\004\2754\373\241\275\035\265\247\274\027\263\363\273\336t\355\274\372\300\354;\355\303\322<\326\266h\2747\363\356:\325\025\271\274\357\344\322\274\2533\"=\016\356\340\273\326G%\275\302C\246\274\245\ri\275\341\377^=\231\212y\267\356\224Z\273\nwf=Z\243\024\272\312*\232\275G\371\275;\375\001\326<S\240\250\275Fsi\273\304Nr=w\311\014\275\364\000\212=\344\001\006\275\224]\342<}\375\362;\255\232L\274\200\340\260=*\363\007\275Z]\001\275U\\\221\275\332\261)=!\361f\275j\205+\274\275?5=\330\335j\274\021\3642\274D.s=\370.!=\331\321\022\275^\t\200\273c\375\251=2R\306\272\364C\242\275\232s<=\020yP<!6t\275N\276/=Tj\321\274\300v\371<e\262\002\275\224A-<\324\347\202<5\202+\274\341T\266;I\023\341\272\235\214,\275\017\320\004=\261\222\231\274\t\207e\275\227\234\013\274\244\307\021\276\206\013|<*#\033<kg\013;\033^&=\014\321\265<\260l\036=%\344#\275;@\302<\215\305F\275e\251\276\274\365f\017=s\271\356\274 \026\271\275\006==\274$\027Q;O\007\246\274J\243\006=\352\216?;\013\244\243:\240\237g\275\377*\224\275\364\202o\275\362UE=\365BB=\275\344\317\275\275\231\032=\340\251.\275\006\365\266=Nlu\275x\032\263<p@2=~\216\235;4\376_\275\256\206C=x\3538\274\347!\205<3+\233<\023\323\326<\372c\214\275\305\254\307<a\277\234\274Ik\223<9\007\331<I\376\256\273e\357\021=\240\344\026=#W\204=O\236\253<\016\310\305<r>\256\275=\335\360<\320\336\250=\246\253E\272\274\3357=r\365\210\274%\010\230=\337?D\275\353\316\277\274\022\030\331\274\372}\177\275\370\275\236=\3574\035\275\r\307\031\273\262tW<zC\355\274\010/6\275\324\364\240=\202\237\211=W\211\200<\255\005\227\273\260\265>\275\347].:mq\203\274\032\204\n<\030\036\212\275\252\251\221<\273\3200=C\353\364\273\204\345\214=\n\022\345\274\314\376Q=\036\330\307\273\3211:\275\236\322\206:\307\366\333;p\031\030\274\006\332\212\274\354\016\301<$\265\205\275>M\271\275\274v\"\273\315\330t\274\227-^\273\251\342\332\274k\002\003=G\227\343\274\221\010*=\311=p;up\257\275\1770\273<h\223\332\275\372\201\245\274^J\241=&2G<\220\322\204\274[G\223=\307\257\006\275\204\000\251\274r\331\037\274\001\301\254<axd<\223v\\=\001\261\237<\036\354\203<\005\347\257\273\331\031\247\274c\275\363\273l\207\005\274\001\274\275\275\346`\353\273\020\320\001<R\277&\2754\202\034=\342\2104=\017\277R\275\024w\204<\035N>=\335\004\234\274\345k\371=\2417M\274\305R\243\274\331\331\244=v}a\275\206\302\022=\307m\023\275\321Y7\275iU%<\357\267\355<\220^\213\274X\306\306<\234\205\013\275\202V\360\274\227d\326\274\337?\221</\304\222\274\251\207\334\273!\025\r=\324\322\357\275d\360@\275\350\347\236\273O\273\376<\374q\2259\017!\261=v\221R\274P\034\201\275\000\217,;\375S\210\275\026\0141\275\\\273`</\016m=Tm\233<\272\315\315<-\0013=\321\347\007=\256\216\356\275J\250T\275\350\361?\275@\347\034<e\0054\2748\324.\274!x^<OX~\2746\263\336\274qOC\273\345\203!\275E\331\221=\213\207i\2740\307h\275\275\362:=\342\214.;R\270\361<\232\023\303\272d\206G=\302\025\305\275\237\220\212\274\373\003\226\275\354r\307<\201\016\230\2749\237 \274\311\234\227\275\205\002\346<\377\331\014<8j\343\273\302\373\311=\271\320@=N\302\210=\215\031I\275\021\226\357\273_K\014\273\227\357\032<\365Z\225\273]\334^=G\320\271\274\345\361\022=\272\027\327\275\326\300\342;q{\333<}\324\205=\001\202\013<&\020\321\274\223\010I\273!\272\014\274mq>=\344g$=2\302\203=\352\221\206\274\243N\016\274\004;\332\274\320R>=\311\323\007=\261O+\2757\277\206\275\314#\001\275\014P\017;\032C\037=8\014\336\273\353\260\n;r\243\373<\307\023F\273\010\241\270\273\306\240L\275\310\366K\274Lz:\275XxF=!yE\275\263\016\331\274\221g\202\274\2518b\275S\377J=\246\tP\273\324\371\233\275\267\263]\275\230\355\036\275HV\261<\301\350R\274H$M\273\037J\032\274ot\t\275g\317/<\002\343!=\032^\216<\017\263\222<(\203\014<\212\026\364=q\247\356\274\177\016\232\273\371\251*\273=C\314\274o\023\332\275\256\2732=\366\234\240=-\373\004=\342\357\231<&\003\034\275;\205\323<$\027(\275X\316\204\274R|\333<\334*5\275\014\037!<t(\030=\274S:=TG\245\275\325s0<(\030\027\275f\271~=F%:;)\364k<R&\021\275\276\207\351;\304W`<\002\000\345<\270*\025\274G\377-\275\221\333\t\273\225\233\307=\356\365\t=\023\0219=-\206\241=\230\010z\273\322\300+\275G\025\010\271\246\031\t=\324\304\230\274\237\330\242=\003u0\275\214\256?\275\262\035\007;\314y,=\307p\204=\213\244}<\250\031\\<6\372\340<\330\335\353<\217[\023\275\315\027\275<+\340W\275\347\362u=\030\3519;\366\032\277<\203}R\274\001\246\305\274\302Y\2179\035\327\036\275\246!\231<\362\320\301\274U\377z=]*\027\275\320G\022\274\320\332b\274\212\314G\275\374\303\212=\022\210\267=\273K`<*\364\335=\336\201\303\273\205\334\035\275\312\221\221\273\342\331u=\024?\014;\001\202T=q\356%\274[\024\262\275R\200\033\275\264]\323<\204\373\003<\016C\202<`\231\240<\225\3077\275\261Ez\275u\325\344\274im\227\274\324a\351\273\321.\327\274\n\031\203\275\301\225\000=O\374\326;6gB\275\243\031\237=\226-\263\275^TX\275\265\325 \274\374g\325=\275U\0308\316\315\247=\274}\346\274\031q\252;M\035\334<\361\276\024=\014`\325\274\201\3145\275\220\216\343<3\037\254\275\260\260\333<\247\326^\275\016\350\206;\265\022K\275af\350\274\320m+\273\000m\231\275\351o\224\274B\236\304\273\326K-;H\204\242<D}\252;\337J\010\274\350\023k\2744\244<<\240`\240\275Eg];\242\222\351\273\204^\000\275bd\374:qv-<\035\267+=\3029\031=\274<1\275\";\220\273\275q\377<\336\036\207\275\001\336\214\273dB\347<z}\247\273\320~\326<c\354\367\270\311\010a=%\363A\275&\003\024<?m\204<-\201\237<5.\270\274\250\026\312<\221\034E=*\353\232\274y\366$\274\266\023w=\2042\316=+\362u\274s\351c=`n\223=\0206\266=pC\227<\261\230\002\275\306\337q\275\033\267\222\275?\264\261<\325\362.=t\223\266;\317\222t=\244\337\256\275\006%\035<\203\365\302<\331Z]=\211\322n\275\221\220:<.\231 \275Q\355\317\274\265n\254<h\361\242\275\r\002\007=\331\210\024\2750&?\275u\336\207<U\023\021\275\262O&\273G;\343\274\203\367\215<\177\026+<\212\276\237=zo(\275v\326\355<\204\003\323\274F\311}<;\017\353<\3075\r=\207\224\315\274~\212\2109\202tq\275\266x\177<X\t\254\2752s\331\273\271=a\274\'F*\275\224\352\001=\216\270\257\274W\337,=\364\247\005=b9\336\274\033\237\251=\\\217s=\355\242\r\275,S\211=\202\347\025\275\0253Q<\201\342#=Ny><\242\217\216\275\315\'\025>\203$Q=\017\245\301\275\325N\365<`N\";\320 5=\315\332(<\275^\315\274E\373\227<\326\344\361\274\253\3307;\340\264\206\275b\363\366\274U\016\252\273\362w\225=\256]Y=\024\033.=\377/\321=JJ\014\274\320 ^\274K\254\325\274\343\337\277\274\254\252\n\272^\222\013<\313\315\222<\251M\363=~\303\017\273q\343F\274|F#=\016\372>\275\327\230\251=e\nC<\274d\022=\037\221_=HIr\275\220_O=\203f\233=\243~\354<\372\304N=\374\007\314\274U\323\214\274\343c\206\274Ax\220\274\013\315\332<\002\277\222\274\330\243\362<\271P\216\275\005\270\013=q\325<=3\377\315\274\364\033\272;\t\323\275=~eo\274\205\327m\275a\036\357\275-\003]=\030B\026=\263\023\312\274\037\003\004=b\342w=\237\371\310=~&\247<|\203_=\354&[=\265\252#<\373x\006;OgM\275\216K\223\275\350L\\=\233\305\251<\264z\002\275!F\242<JH\020\273\341F\330\274\342\332\021;I\226\032<s\376\206=EQ\303=j)T=\306\222\231\272\346\231\233<\"\375+\275\210\200\320=\215D:\274\"Z\275=gs!=\233\324\250;\303E{:\253\021\337<\345\365\t\274\020\256\"=1\2400\273\001\375\204<<\371\214<N\004\231\274*^Q\275R#\232<y\343\217\275\213hx\274\243\247Q\275\255\007\024=k\006N=/rI\275\264\320\242<2H,=\275|Z\275Mfd\274\325]\266\2752\224\r\275W\272\005=\246\227\t=|?\337;\001I\310<\374\3668<F\001g=\024\'-\274[{\272=\222j\200\275^\223N;l\002S=\336^P\274j\316E=\001\231\301\274\362\217\024;\250\001\303:\245\r\004\275R\016\250\273\267\266\311<2\003\323;\361\261)\275\344b\022\275\356\304\263<\017\200\361\273#TT=\023\351\034\275\253\310\031<\232\274\216\275\275\205*=\256\355\221\274\330\303\243<\216\364\177\275\307\242s\273\266\001\264\274\3347K<\230h\211=\373\312\207\275\345\315Y\275\035\235\236\274+\354\005=y\242\215\2727\276_\274\t\020)\274\n]!<\361\266\024\274\205\347[=\0229!>\020\206A\275\021@\241\272\007\204N9\004x\346;\001)\324<b\352c\275\320\320\336=y\232\376\274z\376\356\274\347.\366=\346\215Z\275|p\374\274:Cf\274\2138\212\273\353i\211=P\016\017\275\376\353\254<\365&k\273\314!\275;\227\311\005\275\350s\313;\0352\n=qK\204\274\316\213\232=\361\363\317\274\376\374d=\237\354\202=\023\032\207=\007\352d=\376\035h\275\n\003A\275\006\223T\2741\3132\275\027\3745=\2618\250:\320\221\206<\2066\253<_W\305<\366\301$=j\324\017\275\262-L=\232\035R<\247\332\035=4p\005;5\332\260\274\032\307\314\2748*\205=\261\260\177<\224\333\310\273\277\000\202\275K\214|=\0230\013\274+\372\360\274Q\036<\275\\\271v=l\203\307;\247Z =\203\253\202=\254\366\353\274\024\316\036=\207\2000<w\217o\275\266\224\314\274\241\271\246\275\262i\021\274[\326\3659\235~\020\273T\210\026<\243\244\'\274\253\307D=\275\225:\274g\323B\2751\263\315<z\006\003\275\274\256:=\240\262-<\323\237C\275\354\006\214\275PO\312\275\201\276\244=\233\333e=\177\206g\274\357B\245\274f\303\t\275(b\307=\"\254\220=Dk\013\275@\254^\2742}W\275\"\240p\275\352\277>=\336$.=\016b\242\275\230$\221\274\274\317\317<i`c=\3574[\274C\347\004\276\217\212\353:\206\306\022;\2470\302<J\360:=y\010\320\274\254\215\007\275\3505#\275\343\r\260<\254\226r=\356\250N\275\262\225j<I\352\010\275LY\204\274\023wG\275\037\274\261\2754U\004\275\006!\314=\322\247\225\275?\241\315\275\264|\250=\300\335\326=\244Z\210=5\327\274\274/6\003\273\345\303p=\222\364\001\275x\260K\275\270s\257\272\350\212==_\321\270\275m)\272\274\214\237\371\274Y\234\345\274X3\371\274I\351\341<]a\253\274\215\257\325<h\331W=\305\007\200;\375\'\222\274\022\326\"\275{\272\377\274\273\374\242\275\234\3414=+\'\006==r\005\275\210\233D=p\233\331\274;\206G\274\356%\377\272\341\320\376\274J\030s=\356\206\305\272\325\217\031=yX\234=\300n2=l$\275=1uS\2736\007]\275\204k\310\272\320{\322<p\027\200\275@7\247<\362(\273\274\321\237\301\274z\345\215\275\210[\265:2\366\300\274\343!3=\235F\010\275\317\330\310<\277\324\020\275\202j\036\274Fa0<\255\275\010=\345\314\200\274\304,\363;\262\032N\274\377\020\236\275N\006\370\274 \327-=3\213\330\272\317\340\242\274\232A\266\273\022\364\265\275k\rG\275F\342\216<\312\r\215\274\341\2421\274\347\240\357\273\352>\315;\324YB<\240\255u<\221\337H:f\207\207\2752\r\252\275c\332N\275\246\333\"\275\230W\235\275\237\245\265=\341\346\267\275\365p\001=\307\220(\275\036@\344\275\342s(=\n\273\006;\203^~\274\255\202\003;[\271R\273D\352b\274\327\250\247=\376\r\253;\321\313\206\273\317p\017\275*\254\342:\273\365,=\362\000\251\275.\372\252\274\032\246\221\274\374c\237\274\024\3711\275\030\354\225<\306\2303\274\2349\n\274A\352\002\275\006\2110\275\225\304\357\273\240DI<\265D8\275\201|\315;\253\325\256<\301\r\226\275LFW<\365\224h=\332\326\003=\246\010\304\274<`H<`\300\233\275\211{\353\274\322\330Q\275\027\356*\2741(\310;N0\310<\277\032\030=\025\210\352=\232\251\276\273\276\3546=\360z\321<\254\321\257=\021 G\275\307\236\237\275\005\037.\274k\032{=\311O\244\274>\336\032<\271]I:\351\367\377;f\247E\274\243\026N=\360~\222\274\304q\242\271\255$G\273<\325\266<\320\013\200<\2675\343\274\026\n\027\275K\267\220\275\002>\016=\310\022<\273\317T\033=\317#\021\275\201\006\252\2750\021J\275\343#y\273V\345.\273\230W\333\273\010\303c\275\243gD\275\356\002\211\275\254fp=\002\230\230\274<G\355<\330O\006\275G\013+\275\261\321:=3\264\355;|\031\220\274\351\216\337<(\227W=\356I0=\347\210\257=\310\004\301<G]\250\274\360?2=\3316\301<%\233G=C\262\300=\372\273\206\274>\257t=\264\tp<k\215\206<\214\'\202\274B\244\252=2\207r=\361\224\316<\335\"\343\274\2370<\275\336\227\253\273\004\252\'\2758\035#=c)\372\273\372b)<\375\300\343\273\003\212\341<\0259B\275`\004\206\275B\324m=\r\255 \274\267\360\333=]q\001\275]\213\374\274\215\360\032=\234S\330;\367X\021\275\362\030\177<\026|f\275\2002\315<\220\341\362;(\364\271=z\014a<\370wj\273\316hS\275KW\004=\206e\320<\273\370\234\273y\266\262=\350{+\275X\203]<o\t\202=\250\031g=\257\203\315<\343\333\321<m5J\275\206\364W\274n\007F\275\021\264w\275X\035\215\275\035\377\366;\037\024\250\274K$\313\274\225\214,<\331\315\316\2731\225\000=\251\330\371\273\203\345\370\274\321\373=\273\266;2=Y\207\031<\342\330!==\213\371\274\250M\212<q`n=\231\273\272<\027\257\213<\335|\215\274O,X=\300\250\252\275\213\310\221=\216u\357\274\204\213\244=\266\331*\275i\327\345<\356=5\275\375\310\023\275\234\337\340\273\270\364\351;\361J\220\273k\320\210\275\023x\000\275\213\260\000\274n&\027<+b\021\273\344\314\255<\314\357\255\275d\255\232=1\365z<^#Z\275\037\357\020=Pmq\273FL\252=8\020\226\275l\220\250\274A\233B=\304\314V=$q\342<\263YC\275\202\315\213<\177\213\336<B+\235\273\255\313D\275^\227\323=\337^\304<\006I\247\274\216\242,<iHT=*^\253\267\264\234\361;0S\331\272\373\034\222<j\352\270=\223\323L;Qh\021=Z\366h\275D<G=\216\030\264\274\322\300\351;[\267\207\275\3009f\273\330\365\355\274\264h8\275\231\2062:\370\230\366<E\025\276\275\035\231\302\274\310\002\344\273l\371\253\272\243\\\210=\210\n&=\177\304\214\273\260\311\032\275\234\0163<\003T\037;f\224K\275\337\323\202\275\306u\224\275\013\030\212\275\036\254\277;*\035\252=\257U\017<\245\221\300<\334\233\005<Y\001\203\274\034]\302=\331\375\312<%\244y<\327\356{;c\265\224\274V*\314<rU\213\274\330\264\337<\023\032a=\036b\001\275\343\2654<\231\n\000\275\255\333\245\273^!\324=\272\211\201\274T\030q<\265\253 =\322d/\275^\215m\275sn\332\274Oq\300\275\237i\364<k\307\250\274\033\023>=l\376Y=V;s\272\n\203\301=]a\331<{\320\335\273\300R\030=\355\tp=\215\014\035\2741~\333\273\0314\214\274\223\302\376\274\\c\233\275n?\000\275\336\315o\275\370u[\275\252\205<\273\346\276\202\275o\232<<\261\365\035<\322\240\247;\3332\027\275\364\016\246\275\246f\206=\375<8\274\320F\375<\276\370O<s\247\013\275\226B@<\032\317R\275\213\013\270\275f>{\275\231#u<\245\377\205\275F\357\036\272\365g\372<\331L\036=.\314\256\274\363\273\240<\367x\235\272[\213X\275%\005\340<\n\034p\272$\366\337<\034\014\240=\002\200N=\221\2352=\207\356\234\274\325s\243=\257fM<\307Bq\274>\225\'=\210[O\273)\233R\275\020.[\274F\301==\tn%=\320\036N;pZ\275\275\213\014W\275\246Y\034<FW\006\274{\245\023\275!FC\275\000\361\204=)\224\356;\003~3\274tl5<\026:\310<y\371N\274\204(\377<$\300\016=\0329\000=\365\272-\275\272\201}\273\037\3064\275\245\334F=N\363\241\273&\336\311=\320\301j\275i\344R\275\246\020\236=\342\376\265\274\244\330J\275FNO=o[\327<;\033\334<\275c\230=\352\210\257\275k\207(\275\020\244\221\275:\365R\275\372\216\313\274\275o\264\272\370\231\216=\317=\300=\255\004\031=U~r\275\315\240l=\026\335\003=\333\246\312\274\225e\243\274y\006\222\274\216\202\214<\033\346\333=\315C\263\274\243/,\275\357\200\250:o\352\326=\200]\225=7u\007=aBB\275\225\216\207<\307\210K\275\361\351J\275\360\371\205\275\225\235\"=\335\315\241=\340\367 =\210r\357<\212K\250\274;.\313\273T\366E\275B\203\231\2742t\242=4\021\216<\370_\231\273\261\345\305<r\013\310\275\261V \275\321_\253<\231\320\010\275\246v\345;4\344\251\274\377\303V\275\302k\341\274\231\320\372\274\3253\234<:T\206=_\362X\275\234\016v;\330\245,\275\373\223\226\274\306.M=\316\r\215\275l\356\202\274\036F\225=*V\275\275\375\214\037\274\262\333)=$;\032=\263n=\274\211\206n=\2102\324<\t5\305=?\3003\275\252\362\002\275r\231\347\274F\317#<\024A\200\275\215+\026=\343\270\340\274n|K\275\227Y\323\273\223N\374\274\311b\206\2747h\223\275\372\035\263\274\240\343\267=\235[\342\274\316!\300\274\377\345L=\337J\007\275\324\020\203\273-B\020\275\003\371\245:t\253\216\273\315\311\265\273(\304\276\274\234\317\275<q\033\325<!\nd<\006\003g\275\021\313[=\264\213\242<\3440\273\274\333\225r<ue\360\274J\032\003\275\207\342L\275^7P<\000:{<b\032$=\265\236\201=\2512\321\274Z\225\341\274=\345\232<\225\234&=}\244\273<\316\343\200=\006\263(<f\316V\272\320\377\272=A\254\006\275\274\351\262\275\020\021P\275\323\225`\2751\312\371;~\214\326=X\263\226\274%\202_=\021ze\274\276W\t=c\323\313\274\220\230\255\274\347^l\275/9\237\274\341t\267\275^\265\367\274\262\336^<\\\325&<\\\2658\273\te\010<U[\204<cT\t=Il\225<b\256\375\274s\246\330\274/\006\033=\t\201\273\274s\363N;rp\337\274W\240\025\273\317\210\215<\211\250G\275\221rt<ZjA<x\277y<\017\240*\274\323/f=H\257\010\275xm\024=iu\016\275q#7\274\272C\233=\360\353\306\275\177/\353;_9$=\325^\200\274\205\377\013\275N|\311\274\254\335\242<\206ku<\243c\351<\226X\032=`]0=Ecj\275w@H=~\362\035<7\236\231=\017\373\n\274V\177G=\205\225Z=\233\214\030\275\263\225\025=4_#<\026d\221\274\264\356\232\275\200\352\350=\014>\204<S;8\274;\326\346\274X\304\014=\265\037\t\275y\272l=c\345y\273~\275\224=\014\206\r\275\274\027\217\274\311\260\021\274\204!\323\274\330\337\333<\000\357\205=i\006\321\274\313>\221=$\301\205= \333\037\275\252\267\244<\207\327\026=\374\014\257\274\351OB\273\301\240l\275\373\021\205\275\335\340?\275\235$\205=\243\244g\275\001\027e=\336\225\344\274\322\024\222\275\350:\221=\2464\204\274\377\273\024=O8\226=\007\301I\275a\253\006\274\234\234\022=i\376n\274WD\275\273X\346\005\274g\213\023\275_\306o;\017~Z=\333\315\036\275\301\322\332\274W\246\n\275\236\016\254\274\r\214\325=pd\245<\256\ta\275\353\227\356\274\214\363\227<\263*T\2758\317\272=v\335\204\274\371\226\316\274\004\301|\274\254\244\215\274\271\0006==\355\322\2748\222X;\244Y>=\001\211W<\266\202\203\271o\036_=\302o\016\275\324x\222<\222qk<,[V=\274Q\244=FF\021=\262f\252\275\020W\007=GY\265;\347D[\275\215\000\257=.U\035\275\004\255{\274\353\213p=\265Q6\275\233y\"=+\312\251\272\254\256\264\274\020y\3539i\365\267;\027\231\025\275.@>=\201\304o;\233iS=\300\273%;\243\222@\273\364\266{\275\235\217\020=\033\263J\275\215\217\216=H\347\303;e=\032\275\221\316\r=\353V\224<[\265\030\274\272\257\211;\217\250\320<`\206\202;\244\032\350<\261\276e;k\260\321\274K\200\374;,\253\361\274\242t\235\273\200H\200\275\222\356\240=\215Hb=\354v\213\275\232\257\256;\366e\306\275\007\277\177\275\365\004\024\275\3107\177\274\205\000\301\274=\3572=}\327`\275\233i?=\225\201\222=\rP\030\275\361\267R=S\350\013\275\344f\007=W\013\250:*\361\210;\276\314\026=\326f\006\275\240\335\2359b\235\033\274\257\373V\274\035\223x\274\252\032N\275\264\266\360<\201\220\001<*\361\007\275\034\225\344\275\260\247\026\275\352\312\003=\377\026\341\274\274a\225\273\345\265H\275G\274~=\037\217U=\226C\366\273mT\250\275\301\316\266\275\204U\020=\346\265\324<\324]\010\273MkJ=\027\321a<\253\223\216;\026\217\323\275\222S\246\274\177\347\032\275~\342\374\274\035\264\034\275z]B\274\377L[\275l-\234\274\311\2100\275\224Z%=\335\241m\275\266\301\025=Fdj;\224\305F=\375\341)=\017\254o\275l\234#<v\376\023=\233FI\274\222\264Q\275\243\313\267\275%A\016\274\275\177\250\275\303\000\203=f\376\214=\340\014\020=\367\035B\275\222\'\365;4\221I\275 \306\204\275|\316\037=X\\[\275\361\025\226;\276\014H=le\210\275K\272\367\274\'XO=.bB\274\367l\036<\270\206\253\275\323\267S\275\207e\315;9m#=A8Q<\250\366\320\273\014\301C\275\237\224\272;,\261\037\275Au\254\274\'K\206<\3270#\275\305\270{\275\327\356\225=K\233\277;\035]\030=\321\271<\274\366f\022\275\224\330\270<\316\372\n;J\324:=\265\357}=:\006\204=o$5=B\217\317<\324\013\244=\245\363$\275\30706\275\227\304\351\274\300\362x<zn\221\274\324\333\331<*\376\233\275\277$v\274\370H\216\275\251\356\345\272\335P\n<\350\204y\275\347~\231\274T\223\014=\311\375D;\303\212\365<\213a\200\275\341\363%\275JJ!\2739\316\220<c\203\277<\037\227e\275\023\'#:\201\352\272;V\370@\275gq\014\276\027\367b=\330\033\246\274\013\t\035<\025\'\205\275X\352\347\274\357\335\267<V7\373<~\260\201\274\2315\203=\251\322\257\275\000\227r=8j\335\274\244\020\224\274\262\376{={\371\221<8%\306\274q\355\347\275\025n\363\272_\342\273<\302i\235=\247\365\237\275\247\007!;\2023k=\"G\014\275x\001.\267?q\002<\356\241\342\273\203\232\214=w\267,\273b\260\210=Eg\274\275C\267\375\274S\274\217<\261\372\312\274_\204\323<\252\276><#.K\275\205{\311\274\300\211\323<\271\311o<\245k\247<W\005\210<\204\220\303<Nf\246\273 e\312\274\362K\306\274o\023\233<\203yR=\022c\360<k\306\354\274\206<\210<\362\024\276<\222\035\307\274h\n_=\251\2509=\272\031\003\275;4\034=\360\272\337\274)\223\350\274\337~\204\275\212\301\354\274\230\206\241<\206A\254\274QX\270=U6\243=1\262;=\006\325\334=\213\312\227<\245\251\246<u\267\323=\217\t\215=\031\023\303<iQ\206\274\304\246\204\2754\031\301<I\256\245\273\252\006\350<\356\200\237=\225\352\002\275G\226\261\274K\237\004=\326\374\263\275\264\274N<Q}\274\275\252\203\234<x;\221=\030Ql<|\3250<\243\201?\275\005\3702\275\021\357\000=K\r`=\332\223!\274KNM\275.\330\340<\002\034{\274\232\037\026<*U\034<S\225\266:\376D\216\274j\224\005\275\210?D=whg\274 \245\264<\375\377\344<\356j9<D\347+=\320\3679<\212\311\036\272{\234\255\274\357C\020\275O\330-\274\010Y\316\274e\301]<\324\253A;\n\3379=\220\243\220\275\371#\321\275\251\366\276=\r.\233\275\023r\021\275\265a\205\275m\005V=7-\017\275mY$<\230d)\275\rdH<\257\346\224\275\031\364\246\275\031\367\310=\2469j\275\3628O=\202\324\245\275\247\305\311\274\321Iy\275\372\201\230\275\326\337?=\234j\254<1\032\212\2758\021\224\275\231\313\217=%\240\272=r\370y\273A\024&\274\241DD\275\360\357\034\273\200Me;7\004\000=F\000\252<}<\340<C\225\201\273\206,r=\325\232\241\274\245a\023\275\351\215\244<\223$\205\274\333n\243<<E\251\273E[W<\003\274\260<\031,\020\275\300k\234<\271x$\274\306\234\216<\240#\227\275a4\203\273z\023\341\273_\007*=\377w`<\312AA=\303\246A;\357\3276<YX\214=m7|=-\341I\275\206>r=\205s\025=\357\245\020=\315\222.;d\000\307<\366\315\225\274\322\302\253\275\316\0066=\255\032\225\274W\355\200=O\003D;\223\034K<\376p!=2\0203\275!\212\210\274${\241\274\215A\276<\352\336?\273s\277\366\273v\363\'\274%x\226<\336j\227\274_\177\203\275\333\333><9\007#<\376V\204\274\004\241\237;\333\373\370;.$\257=\324!\323\274Z\345\277<\ry\364\274\242\353\205=~\332\236\274`\230T=\375\215d=&\356K\275i#\240=\226\246\215<\2120\327\275\275\261\005=\366\356<=\021\372x\274\330\303\223<\016\350\214\275\363\213[\275v\023\344\274\221\030 \274\021\276\307<\234\246\262<\345;\274<1\351<\275P\364F\274\274\010\370<D%\300\273\224U\267\275g\000\233\274\366\235G=#\210\203\275DU\217<\177\nn=\331~Y=)^\307<\301M\216\273R\203\345\274\210\2570;k\355U<9\317\223=/\275\271\275}\345\3529\375\004\206\274\242\t\255=\364N#=\3707\013=\315B\340<w\207\210<\264Y\201=\221\377Z\275@\267]\271\236\202\021=Q\203y:\342\023O\275\253\354\330;\351x\243\275_U\267\274\263gQ\275\016D\025=\2339\300\275\351\262\216\272\316j\223\275\271\217\241< \t\245=\275\356\355\275\352\032\224\275\017\243\036\274f\251\030\275\366\007\315<\202xD;\330w\263\275\340Gy\274\241\025\314<\335\277\023=\246\332\346<B*\030\275,32=]\264\225\275d \204=\0320\202<SW\t=\377\027.\2741\276\244\273O\223\220\274x\261B<\006t\026\274\\e\302=\200\243\357;\004U\316\272\265\372\303\2731\351|\275\324\247P<\361\r\220\275U\277#=n\177\304\274\307B\227=[[\255\274P@{\275\350\"\314<\361|\354\272\254\336-\275\006E\311=\312%\320\273X?I:\224_\342\272\330\010\237<\376b\307\275/E\356\274Y\363\376<E\351S\274\254\347\224\274\345V\267<>\334\240=/\363|=\210\207\023<\347\305\362\274\364\tw\275\003\2661\274c1_\274\234R&\275/\2206<Y\326\203<\033>&<\306S\323\274(\2611\275\233\336\247\274-\027\021=TW$=z\367\244<\263\265\310<\311\340\225<*\217\203=\302\377\201<\307C\212\275\217\226\203\274Aw\320<_q\267<M\241q\274a\270\311\274\343\251\363<\003\037\330;p\263\3709\303\222\245\275\034\261\255<}\310\361<\336\321\023\275\300,\036\275E\313/\274\310C\363;w+\213\275\264\353\255=._\322\274\017\007\374<vBQ\275\033\233\t\275\213\203L=s\2633=\342;[={\350\341\2741\210:<}\216\337\274=\001:=\2107\207\274\005\265\272=3[\243\275\375\010\033=t\342\332<m4,\275\231\276\377\273\002\314a=v\266\031\275vs\024=d^\343\274\"\023\247\275\336\215\016\2769\211\355\274\204\313q\274#\354\016=\252G(\275,\330C=\2772{=\244\r\314=\347\241u=\256\314q<\231\263\220=\252\211=\275\375\030\034=p\006x=\003\316\377\273\364\237\3109\274\275\334\272M\232\332;\202c\317\273\361\3460\274\231\323\361;\265\312\270\274\275\030\261\274\'\206\002=a\023\266<7\251\352\274\313qW=p3\244<C\273\352:kU\244;W\270\200\275\221\251L\273\343%\203\275~z\017\275\027t<\275k\345\n\275\215;\234=\255^\272<\222\233A\275]\243\202=\306_\232<\"pg<\r\233\'\274\017\311@=\035Jy\275hQ\216\271\373\335u\274\341R&\275\326E\000=\232\334\336\274\325\\\374\274%\002\330<\233wi=\272\2534\274\312^\004<\177Zn\275N\262$\274:\353\213=\314*O\274\007\251\001\273\2443\034=(_\300<\2667\241\274\360\035\300<\023\240\274\275\2027\231\275h\363\313\273K%\326<X\355\t=]\330\345\273\223f\243\2745\242O\275\251\374!=\3235\217\275\033\307\277<\300+\332<\315\351\332<\351\320\315;?\360\366<\261O\276<\342OM\2751\013w=\361\350\002=O9\206=R\301b\274\026\255\212\274\340\214\370<d\326\312=\216z\223\274\273\202\026=\212s\215\275\301\000\313<\262U\334<D\350\033\275X\256\325\274I\t\232<q\n\216=V\'\270\273\231\210\370\274r\225A\275\346\301u\275\220\034\244\274[\240\242\274C{\244\274<\364\336:\'\313S\275\204\250/=\372\232,\275\366{!\275\363\227<=S\366V\275\017!2=\254/j\275\r-\010=\372\332\203=k\367\032\275\270r3=\335#\022\274]\277\367:\250\225q\275"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/concat"
  op: "ConcatV2"
  input: "lstm_1/Const"
  input: "lstm_1/Const_1"
  input: "lstm_1/Const_2"
  input: "lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/bias/Assign"
  op: "Assign"
  input: "lstm_1/bias"
  input: "lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/bias/read"
  op: "Identity"
  input: "lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/Variable/Assign"
  op: "Assign"
  input: "lstm_1/Variable"
  input: "lstm_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/Variable/read"
  op: "Identity"
  input: "lstm_1/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Variable"
      }
    }
  }
}
node {
  name: "lstm_1/zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/Variable_1/Assign"
  op: "Assign"
  input: "lstm_1/Variable_1"
  input: "lstm_1/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/Variable_1/read"
  op: "Identity"
  input: "lstm_1/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Variable_1"
      }
    }
  }
}
node {
  name: "lstm_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose"
  op: "Transpose"
  input: "lstm_1_input"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\214\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_1/Shape"
  input: "lstm_1/strided_slice_12/stack"
  input: "lstm_1/strided_slice_12/stack_1"
  input: "lstm_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_1/transpose"
  input: "lstm_1/strided_slice_13/stack"
  input: "lstm_1/strided_slice_13/stack_1"
  input: "lstm_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/MatMul"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_1"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_2"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_3"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/MatMul"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/MatMul_1"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/MatMul_2"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/MatMul_3"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/MatMul_4"
  op: "MatMul"
  input: "lstm_1/Variable/read"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add"
  op: "Add"
  input: "lstm_1/BiasAdd"
  input: "lstm_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul"
  op: "Mul"
  input: "lstm_1/mul/x"
  input: "lstm_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_1"
  op: "Add"
  input: "lstm_1/mul"
  input: "lstm_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/add_1"
  input: "lstm_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value"
  op: "Maximum"
  input: "lstm_1/clip_by_value/Minimum"
  input: "lstm_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_5"
  op: "MatMul"
  input: "lstm_1/Variable/read"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_2"
  op: "Add"
  input: "lstm_1/BiasAdd_1"
  input: "lstm_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_1"
  op: "Mul"
  input: "lstm_1/mul_1/x"
  input: "lstm_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_3"
  op: "Add"
  input: "lstm_1/mul_1"
  input: "lstm_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/add_3"
  input: "lstm_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/clip_by_value_1/Minimum"
  input: "lstm_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_2"
  op: "Mul"
  input: "lstm_1/clip_by_value_1"
  input: "lstm_1/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_6"
  op: "MatMul"
  input: "lstm_1/Variable/read"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_4"
  op: "Add"
  input: "lstm_1/BiasAdd_2"
  input: "lstm_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh"
  op: "Tanh"
  input: "lstm_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_3"
  op: "Mul"
  input: "lstm_1/clip_by_value"
  input: "lstm_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_5"
  op: "Add"
  input: "lstm_1/mul_2"
  input: "lstm_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_7"
  op: "MatMul"
  input: "lstm_1/Variable/read"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_6"
  op: "Add"
  input: "lstm_1/BiasAdd_3"
  input: "lstm_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_4"
  op: "Mul"
  input: "lstm_1/mul_4/x"
  input: "lstm_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_7"
  op: "Add"
  input: "lstm_1/mul_4"
  input: "lstm_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/add_7"
  input: "lstm_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/clip_by_value_2/Minimum"
  input: "lstm_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh_1"
  op: "Tanh"
  input: "lstm_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_5"
  op: "Mul"
  input: "lstm_1/clip_by_value_2"
  input: "lstm_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\214\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/TensorArrayUnstack/Shape"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_1/TensorArrayUnstack/range/start"
  input: "lstm_1/TensorArrayUnstack/strided_slice"
  input: "lstm_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_1/TensorArray_1"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "lstm_1/transpose"
  input: "lstm_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "lstm_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 140
      }
    }
  }
}
node {
  name: "lstm_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/Enter"
  op: "Enter"
  input: "lstm_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_1"
  op: "Enter"
  input: "lstm_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_2"
  op: "Enter"
  input: "lstm_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_3"
  op: "Enter"
  input: "lstm_1/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_4"
  op: "Enter"
  input: "lstm_1/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge"
  op: "Merge"
  input: "lstm_1/while/Enter"
  input: "lstm_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Merge_1"
  op: "Merge"
  input: "lstm_1/while/Enter_1"
  input: "lstm_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Merge_2"
  op: "Merge"
  input: "lstm_1/while/Enter_2"
  input: "lstm_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_3"
  op: "Merge"
  input: "lstm_1/while/Enter_3"
  input: "lstm_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_4"
  op: "Merge"
  input: "lstm_1/while/Enter_4"
  input: "lstm_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Less"
  op: "Less"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Less/Enter"
  op: "Enter"
  input: "lstm_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Less_1"
  op: "Less"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Less_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "lstm_1/while/Less"
  input: "lstm_1/while/Less_1"
}
node {
  name: "lstm_1/while/LoopCond"
  op: "LoopCond"
  input: "lstm_1/while/LogicalAnd"
}
node {
  name: "lstm_1/while/Switch"
  op: "Switch"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_1"
  op: "Switch"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_2"
  op: "Switch"
  input: "lstm_1/while/Merge_2"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_3"
  op: "Switch"
  input: "lstm_1/while/Merge_3"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_4"
  op: "Switch"
  input: "lstm_1/while/Merge_4"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity"
  op: "Identity"
  input: "lstm_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_1"
  op: "Identity"
  input: "lstm_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_2"
  op: "Identity"
  input: "lstm_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_3"
  op: "Identity"
  input: "lstm_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_4"
  op: "Identity"
  input: "lstm_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add"
  op: "Add"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/while/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity_1"
  input: "lstm_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul"
  input: "lstm_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_1"
  input: "lstm_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_2"
  input: "lstm_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_3"
  input: "lstm_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4"
  op: "MatMul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_1"
  op: "Add"
  input: "lstm_1/while/BiasAdd"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul"
  op: "Mul"
  input: "lstm_1/while/mul/x"
  input: "lstm_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_2/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_2"
  op: "Add"
  input: "lstm_1/while/mul"
  input: "lstm_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_2"
  input: "lstm_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "lstm_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5"
  op: "MatMul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_3"
  op: "Add"
  input: "lstm_1/while/BiasAdd_1"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_1/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_1"
  op: "Mul"
  input: "lstm_1/while/mul_1/x"
  input: "lstm_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_4/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_4"
  op: "Add"
  input: "lstm_1/while/mul_1"
  input: "lstm_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_3"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_4"
  input: "lstm_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "lstm_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_2"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_1"
  input: "lstm_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6"
  op: "MatMul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_5"
  op: "Add"
  input: "lstm_1/while/BiasAdd_2"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh"
  op: "Tanh"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_3"
  op: "Mul"
  input: "lstm_1/while/clip_by_value"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_6"
  op: "Add"
  input: "lstm_1/while/mul_2"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7"
  op: "MatMul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_7"
  op: "Add"
  input: "lstm_1/while/BiasAdd_3"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_4/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_4"
  op: "Mul"
  input: "lstm_1/while/mul_4/x"
  input: "lstm_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_8/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_8"
  op: "Add"
  input: "lstm_1/while/mul_4"
  input: "lstm_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_4"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_5"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_8"
  input: "lstm_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "lstm_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh_1"
  op: "Tanh"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_5"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_2"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_1/while/Identity_1"
  input: "lstm_1/while/mul_5"
  input: "lstm_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_9/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add_9"
  op: "Add"
  input: "lstm_1/while/Identity_1"
  input: "lstm_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration"
  op: "NextIteration"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_4"
  op: "NextIteration"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit"
  op: "Exit"
  input: "lstm_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Exit_1"
  op: "Exit"
  input: "lstm_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Exit_2"
  op: "Exit"
  input: "lstm_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_3"
  op: "Exit"
  input: "lstm_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_4"
  op: "Exit"
  input: "lstm_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range"
  op: "Range"
  input: "lstm_1/TensorArrayStack/range/start"
  input: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/TensorArrayStack/range"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "lstm_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/sub"
  op: "Sub"
  input: "lstm_1/while/Exit_1"
  input: "lstm_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/sub"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose_1"
  op: "Transpose"
  input: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "activation_1/Relu"
  op: "Relu"
  input: "lstm_1/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/keras_learning_phase/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "dropout_1/keras_learning_phase"
  op: "PlaceholderWithDefault"
  input: "dropout_1/keras_learning_phase/input"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "dropout_1/cond/Switch"
  op: "Switch"
  input: "dropout_1/keras_learning_phase"
  input: "dropout_1/keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/switch_t"
  op: "Identity"
  input: "dropout_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/switch_f"
  op: "Identity"
  input: "dropout_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/pred_id"
  op: "Identity"
  input: "dropout_1/keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/mul/y"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/mul"
  op: "Mul"
  input: "dropout_1/cond/mul/Switch:1"
  input: "dropout_1/cond/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/mul/Switch"
  op: "Switch"
  input: "activation_1/Relu"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/rate"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/Shape"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/min"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/max"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_1/cond/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7020863
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_1/cond/dropout/random_uniform/max"
  input: "dropout_1/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_1/cond/dropout/random_uniform/RandomUniform"
  input: "dropout_1/cond/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform"
  op: "Add"
  input: "dropout_1/cond/dropout/random_uniform/mul"
  input: "dropout_1/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/sub/x"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/sub"
  op: "Sub"
  input: "dropout_1/cond/dropout/sub/x"
  input: "dropout_1/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/truediv/x"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/truediv"
  op: "RealDiv"
  input: "dropout_1/cond/dropout/truediv/x"
  input: "dropout_1/cond/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dropout_1/cond/dropout/random_uniform"
  input: "dropout_1/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/mul"
  op: "Mul"
  input: "dropout_1/cond/mul"
  input: "dropout_1/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/Cast"
  op: "Cast"
  input: "dropout_1/cond/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "dropout_1/cond/dropout/mul_1"
  op: "Mul"
  input: "dropout_1/cond/dropout/mul"
  input: "dropout_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/Switch_1"
  op: "Switch"
  input: "activation_1/Relu"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
}
node {
  name: "dropout_1/cond/Merge"
  op: "Merge"
  input: "dropout_1/cond/Switch_1"
  input: "dropout_1/cond/dropout/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21483446657657623
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21483446657657623
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9685366
    }
  }
}
node {
  name: "dense_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1/random_uniform/max"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform"
  input: "dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform"
  op: "Add"
  input: "dense_1/random_uniform/mul"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dropout_1/cond/Merge"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Sigmoid"
  op: "Sigmoid"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "lstm_1/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "lstm_1/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "lstm_1/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^lstm_1/Variable/Assign"
  input: "^lstm_1/Variable_1/Assign"
  input: "^lstm_1/bias/Assign"
  input: "^lstm_1/kernel/Assign"
  input: "^lstm_1/recurrent_kernel/Assign"
}
node {
  name: "SGD/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "SGD/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SGD/iterations/Assign"
  op: "Assign"
  input: "SGD/iterations"
  input: "SGD/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SGD/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SGD/iterations/read"
  op: "Identity"
  input: "SGD/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SGD/iterations"
      }
    }
  }
}
node {
  name: "SGD/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SGD/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SGD/lr/Assign"
  op: "Assign"
  input: "SGD/lr"
  input: "SGD/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SGD/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SGD/lr/read"
  op: "Identity"
  input: "SGD/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SGD/lr"
      }
    }
  }
}
node {
  name: "SGD/momentum/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SGD/momentum"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SGD/momentum/Assign"
  op: "Assign"
  input: "SGD/momentum"
  input: "SGD/momentum/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SGD/momentum"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SGD/momentum/read"
  op: "Identity"
  input: "SGD/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SGD/momentum"
      }
    }
  }
}
node {
  name: "SGD/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SGD/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SGD/decay/Assign"
  op: "Assign"
  input: "SGD/decay"
  input: "SGD/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SGD/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SGD/decay/read"
  op: "Identity"
  input: "SGD/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SGD/decay"
      }
    }
  }
}
node {
  name: "dense_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "dense_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/sub"
  op: "Sub"
  input: "loss/dense_1_loss/sub/x"
  input: "loss/dense_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/clip_by_value/Minimum"
  op: "Minimum"
  input: "dense_1/Sigmoid"
  input: "loss/dense_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/clip_by_value"
  op: "Maximum"
  input: "loss/dense_1_loss/clip_by_value/Minimum"
  input: "loss/dense_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/sub_1"
  op: "Sub"
  input: "loss/dense_1_loss/sub_1/x"
  input: "loss/dense_1_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/truediv"
  op: "RealDiv"
  input: "loss/dense_1_loss/clip_by_value"
  input: "loss/dense_1_loss/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Log"
  op: "Log"
  input: "loss/dense_1_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/zeros_like"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/dense_1_loss/Log"
  input: "loss/dense_1_loss/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/Select"
  op: "Select"
  input: "loss/dense_1_loss/logistic_loss/GreaterEqual"
  input: "loss/dense_1_loss/Log"
  input: "loss/dense_1_loss/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/Neg"
  op: "Neg"
  input: "loss/dense_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/Select_1"
  op: "Select"
  input: "loss/dense_1_loss/logistic_loss/GreaterEqual"
  input: "loss/dense_1_loss/logistic_loss/Neg"
  input: "loss/dense_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/mul"
  op: "Mul"
  input: "loss/dense_1_loss/Log"
  input: "dense_1_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/sub"
  op: "Sub"
  input: "loss/dense_1_loss/logistic_loss/Select"
  input: "loss/dense_1_loss/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/Exp"
  op: "Exp"
  input: "loss/dense_1_loss/logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss/Log1p"
  op: "Log1p"
  input: "loss/dense_1_loss/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/logistic_loss"
  op: "Add"
  input: "loss/dense_1_loss/logistic_loss/sub"
  input: "loss/dense_1_loss/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean"
  op: "Mean"
  input: "loss/dense_1_loss/logistic_loss"
  input: "loss/dense_1_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_1"
  op: "Mean"
  input: "loss/dense_1_loss/Mean"
  input: "loss/dense_1_loss/Mean_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/mul"
  op: "Mul"
  input: "loss/dense_1_loss/Mean_1"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/NotEqual"
  op: "NotEqual"
  input: "dense_1_sample_weights"
  input: "loss/dense_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Cast"
  op: "Cast"
  input: "loss/dense_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_2"
  op: "Mean"
  input: "loss/dense_1_loss/Cast"
  input: "loss/dense_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/truediv_1"
  op: "RealDiv"
  input: "loss/dense_1_loss/mul"
  input: "loss/dense_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_3"
  op: "Mean"
  input: "loss/dense_1_loss/truediv_1"
  input: "loss/dense_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/dense_1_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Round"
  op: "Round"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "dense_1_target"
  input: "metrics/acc/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/acc/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean_1"
  op: "Mean"
  input: "metrics/acc/Mean"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/Fill"
  op: "Fill"
  input: "training/SGD/gradients/Shape"
  input: "training/SGD/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/f_count_1"
  op: "Enter"
  input: "training/SGD/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/Merge"
  op: "Merge"
  input: "training/SGD/gradients/f_count_1"
  input: "training/SGD/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/Switch"
  op: "Switch"
  input: "training/SGD/gradients/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/Add/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/Add"
  op: "Add"
  input: "training/SGD/gradients/Switch:1"
  input: "training/SGD/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/Add"
  input: "^training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_1_grad/Mul/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_2_grad/Mul/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/f_count_2"
  op: "Exit"
  input: "training/SGD/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/b_count_1"
  op: "Enter"
  input: "training/SGD/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/Merge_1"
  op: "Merge"
  input: "training/SGD/gradients/b_count_1"
  input: "training/SGD/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/SGD/gradients/Merge_1"
  input: "training/SGD/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/SGD/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/b_count_2"
  op: "LoopCond"
  input: "training/SGD/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/Switch_1"
  op: "Switch"
  input: "training/SGD/gradients/Merge_1"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/Sub"
  op: "Sub"
  input: "training/SGD/gradients/Switch_1:1"
  input: "training/SGD/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/SGD/gradients/Sub"
  input: "^training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/b_count_3"
  op: "Exit"
  input: "training/SGD/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/SGD/gradients/Fill"
  input: "loss/dense_1_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/SGD/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/loss/mul_grad/Mul_1"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Tile"
  op: "Tile"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Prod"
  op: "Prod"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Shape_1"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Prod_1"
  op: "Prod"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Shape_2"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Maximum"
  op: "Maximum"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Prod_1"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/floordiv"
  op: "FloorDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Prod"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Cast"
  op: "Cast"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/truediv"
  op: "RealDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Tile"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Shape"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/truediv"
  input: "loss/dense_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/RealDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Neg"
  op: "Neg"
  input: "loss/dense_1_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Neg"
  input: "loss/dense_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/RealDiv_1"
  input: "loss/dense_1_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/mul"
  op: "Mul"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_3_grad/truediv"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/mul"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Sum_1"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Shape"
  input: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Reshape"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Mul"
  input: "training/SGD/gradients/loss/dense_1_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Mean_1"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Mul_1"
  input: "training/SGD/gradients/loss/dense_1_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Sum_1"
  input: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/add"
  op: "Add"
  input: "loss/dense_1_loss/Mean_1/reduction_indices"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/mod"
  op: "FloorMod"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/add"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/range"
  op: "Range"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/range/start"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Size"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Fill"
  op: "Fill"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Shape_1"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/range"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/mod"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Shape"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Maximum"
  op: "Maximum"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/DynamicStitch"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Shape"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/mul_grad/Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Tile"
  op: "Tile"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Shape_2"
  op: "Shape"
  input: "loss/dense_1_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Shape_3"
  op: "Shape"
  input: "loss/dense_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Prod"
  op: "Prod"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Shape_2"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Prod_1"
  op: "Prod"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Shape_3"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Maximum_1"
  op: "Maximum"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Prod_1"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Prod"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Cast"
  op: "Cast"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Tile"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/add"
  op: "Add"
  input: "loss/dense_1_loss/Mean/reduction_indices"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/add"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/range"
  op: "Range"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/range/start"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Size"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Shape_1"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/range"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/mod"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Shape"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/DynamicStitch"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Shape"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_1_grad/truediv"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/dense_1_loss/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/dense_1_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Shape_2"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Shape_3"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Prod_1"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Prod"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Tile"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/logistic_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Shape"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/truediv"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/Mean_grad/truediv"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Sum_1"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/sub"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/sub"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Shape"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/sub"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/sub"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/sub"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/sub"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/sub"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Neg"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/sub"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/Log1p"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/add/x"
  input: "loss/dense_1_loss/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/Log1p"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/Log1p"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss_grad/Reshape_1"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/Log1p"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Select_grad/zeros_like"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/Select"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "loss/dense_1_loss/logistic_loss/GreaterEqual"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/Select"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "loss/dense_1_loss/logistic_loss/GreaterEqual"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Select_grad/zeros_like"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/Select"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "dense_1_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Shape"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Reshape_1"
  input: "dense_1_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Mul"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Log"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/sub_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Mul_1"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Sum_1"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Log1p_grad/mul"
  input: "loss/dense_1_loss/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/Exp"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/zeros_like"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/Select_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "loss/dense_1_loss/logistic_loss/GreaterEqual"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Exp_grad/mul"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/Select_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "loss/dense_1_loss/logistic_loss/GreaterEqual"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/zeros_like"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/Select_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/Neg"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/AddN"
  op: "AddN"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Select_grad/Select"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/mul_grad/Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Select_1_grad/Select_1"
  input: "training/SGD/gradients/loss/dense_1_loss/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/logistic_loss/Select"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/dense_1_loss/truediv"
  input: "^training/SGD/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Log"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/Log_grad/mul"
  op: "Mul"
  input: "training/SGD/gradients/AddN"
  input: "training/SGD/gradients/loss/dense_1_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Log"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Shape"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/Log_grad/mul"
  input: "loss/dense_1_loss/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/RealDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Neg"
  op: "Neg"
  input: "loss/dense_1_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Neg"
  input: "loss/dense_1_loss/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/RealDiv_1"
  input: "loss/dense_1_loss/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/SGD/gradients/loss/dense_1_loss/Log_grad/mul"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/mul"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Sum_1"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Shape"
  input: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Reshape_1"
  input: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Reshape_1"
  input: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Neg"
  op: "Neg"
  input: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Neg"
  input: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/AddN_1"
  op: "AddN"
  input: "training/SGD/gradients/loss/dense_1_loss/truediv_grad/Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/sub_1_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Shape_2"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/dense_1_loss/clip_by_value/Minimum"
  input: "loss/dense_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Shape"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Select"
  op: "Select"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/GreaterEqual"
  input: "training/SGD/gradients/AddN_1"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Select"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/GreaterEqual"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/zeros"
  input: "training/SGD/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Select_1"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Sum_1"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Shape_2"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "dense_1/Sigmoid"
  input: "loss/dense_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Shape"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Select"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/zeros"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Select_1"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Sum_1"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "dense_1/Sigmoid"
  input: "training/SGD/gradients/loss/dense_1_loss/clip_by_value/Minimum_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Sigmoid"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/SGD/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/SGD/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/SGD/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dropout_1/cond/Merge"
  input: "training/SGD/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "training/SGD/gradients/dense_1/MatMul_grad/MatMul"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/Switch_2"
  op: "Switch"
  input: "activation_1/Relu"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/Identity"
  op: "Identity"
  input: "training/SGD/gradients/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/Shape_1"
  op: "Shape"
  input: "training/SGD/gradients/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/zeros/Const"
  op: "Const"
  input: "^training/SGD/gradients/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/zeros"
  op: "Fill"
  input: "training/SGD/gradients/Shape_1"
  input: "training/SGD/gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "training/SGD/gradients/dropout_1/cond/Merge_grad/cond_grad"
  input: "training/SGD/gradients/zeros"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "training/SGD/gradients/dropout_1/cond/Merge_grad/cond_grad:1"
  input: "dropout_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/SGD/gradients/dropout_1/cond/Merge_grad/cond_grad:1"
  input: "dropout_1/cond/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Shape"
  input: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Mul"
  op: "Mul"
  input: "training/SGD/gradients/dropout_1/cond/dropout/mul_1_grad/Mul"
  input: "dropout_1/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Mul"
  input: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Sum"
  input: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dropout_1/cond/mul"
  input: "training/SGD/gradients/dropout_1/cond/dropout/mul_1_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Mul_1"
  input: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Sum_1"
  input: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/dropout_1/cond/mul_grad/Shape"
  input: "training/SGD/gradients/dropout_1/cond/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/mul_grad/Mul"
  op: "Mul"
  input: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Reshape"
  input: "dropout_1/cond/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/mul_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/dropout_1/cond/mul_grad/Mul"
  input: "training/SGD/gradients/dropout_1/cond/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/mul_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/dropout_1/cond/mul_grad/Sum"
  input: "training/SGD/gradients/dropout_1/cond/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/mul_grad/Mul_1"
  op: "Mul"
  input: "dropout_1/cond/mul/Switch:1"
  input: "training/SGD/gradients/dropout_1/cond/dropout/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/mul_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/dropout_1/cond/mul_grad/Mul_1"
  input: "training/SGD/gradients/dropout_1/cond/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/dropout_1/cond/mul_grad/Sum_1"
  input: "training/SGD/gradients/dropout_1/cond/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/Switch_3"
  op: "Switch"
  input: "activation_1/Relu"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/Identity_1"
  op: "Identity"
  input: "training/SGD/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/Shape_2"
  op: "Shape"
  input: "training/SGD/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/zeros_1/Const"
  op: "Const"
  input: "^training/SGD/gradients/Identity_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/zeros_1"
  op: "Fill"
  input: "training/SGD/gradients/Shape_2"
  input: "training/SGD/gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/dropout_1/cond/mul/Switch_grad/cond_grad"
  op: "Merge"
  input: "training/SGD/gradients/zeros_1"
  input: "training/SGD/gradients/dropout_1/cond/mul_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/AddN_2"
  op: "AddN"
  input: "training/SGD/gradients/dropout_1/cond/Switch_1_grad/cond_grad"
  input: "training/SGD/gradients/dropout_1/cond/mul/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/activation_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/SGD/gradients/AddN_2"
  input: "activation_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@activation_1/Relu"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
        s: "loc:@lstm_1/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/SGD/gradients"
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_1/while/Exit_2"
  input: "^training/SGD/gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
        s: "loc:@lstm_1/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/SGD/gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/sub"
  input: "training/SGD/gradients/activation_1/Relu_grad/ReluGrad"
  input: "training/SGD/gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/SGD/gradients/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/SGD/gradients/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/Exit_2_grad/b_exit"
  input: "training/SGD/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/Exit_3_grad/b_exit"
  input: "training/SGD/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/Exit_4_grad/b_exit"
  input: "training/SGD/gradients/lstm_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/Switch_2_grad/b_switch"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/Switch_3_grad/b_switch"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/Switch_4_grad/b_switch"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_4"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/SGD/gradients/lstm_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/SGD/gradients"
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/SGD/gradients/lstm_1/while/Merge_2_grad/Switch:1"
  input: "^training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity_1"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_1_grad/Mul/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_2_grad/Mul/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/SGD/gradients/lstm_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/AddN_3"
  op: "AddN"
  input: "training/SGD/gradients/lstm_1/while/Merge_3_grad/Switch:1"
  input: "training/SGD/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/SGD/gradients/AddN_3"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/Enter"
  input: "lstm_1/while/Tanh_1"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/SGD/gradients/AddN_3"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1/Enter"
  input: "lstm_1/while/clip_by_value_2"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_5_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/lstm_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_8"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/AddN_4"
  op: "AddN"
  input: "training/SGD/gradients/lstm_1/while/Merge_4_grad/Switch:1"
  input: "training/SGD/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_8_grad/Shape"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/lstm_1/while/add_8_grad/Shape"
  input: "training/SGD/gradients/lstm_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_8_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/SGD/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/add_8_grad/Sum"
  input: "training/SGD/gradients/lstm_1/while/add_8_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/SGD/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/add_8_grad/Sum_1"
  input: "training/SGD/gradients/lstm_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul"
  op: "Mul"
  input: "training/SGD/gradients/AddN_4"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_4"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_4"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul/Enter"
  input: "lstm_1/while/Identity_4"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/SGD/gradients/AddN_4"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1/Enter"
  input: "lstm_1/while/clip_by_value_1"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/SGD/gradients/AddN_4"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/Enter"
  input: "lstm_1/while/Tanh"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/SGD/gradients/AddN_4"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1/Enter"
  input: "lstm_1/while/clip_by_value"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Shape_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Shape"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/SGD/gradients/lstm_1/while/add_8_grad/Reshape"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul/Enter"
  input: "lstm_1/while/add_7"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Sum"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul_1/Const"
  input: "training/SGD/gradients/lstm_1/while/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Mul_1"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Sum_1"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Shape"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Shape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/zeros"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_3_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_4"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/lstm_1/while/mul_2_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_2"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_1/while/Identity_3"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_4_grad/Shape"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/lstm_1/while/add_4_grad/Shape"
  input: "training/SGD/gradients/lstm_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/SGD/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/add_4_grad/Sum"
  input: "training/SGD/gradients/lstm_1/while/add_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/SGD/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/add_4_grad/Sum_1"
  input: "training/SGD/gradients/lstm_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_2_grad/Shape"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/lstm_1/while/add_2_grad/Shape"
  input: "training/SGD/gradients/lstm_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/SGD/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/add_2_grad/Sum"
  input: "training/SGD/gradients/lstm_1/while/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/SGD/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/add_2_grad/Sum_1"
  input: "training/SGD/gradients/lstm_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/SGD/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/SGD/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Shape_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Shape"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul"
  op: "Mul"
  input: "training/SGD/gradients/lstm_1/while/add_4_grad/Reshape"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul/Enter"
  input: "lstm_1/while/add_3"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Sum"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul_1/Const"
  input: "training/SGD/gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Mul_1"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Sum_1"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Shape_1"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Shape"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Mul"
  op: "Mul"
  input: "training/SGD/gradients/lstm_1/while/add_2_grad/Reshape"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Mul/Enter"
  input: "lstm_1/while/add_1"
  input: "^training/SGD/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Mul"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Sum"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Mul_1"
  op: "Mul"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Mul_1/Const"
  input: "training/SGD/gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/SGD/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Mul_1"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Sum_1"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/SGD/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_11_grad/Shape"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_7_grad/Shape"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_10_grad/Shape"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_6_grad/Shape"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  input: "training/SGD/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_3_grad/Shape"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_2_grad/Shape"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  input: "training/SGD/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/SGD/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/SGD/gradients/lstm_1/while/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/AddN_5"
  op: "AddN"
  input: "training/SGD/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  input: "training/SGD/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  input: "training/SGD/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  input: "training/SGD/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_9_grad/Shape"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_5_grad/Shape"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  input: "training/SGD/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/SGD/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/SGD/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/SGD/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_8_grad/Shape"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  input: "training/SGD/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/SGD/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_4_grad/Shape"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  input: "training/SGD/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_1_grad/Shape"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  input: "training/SGD/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_grad/Shape"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  input: "training/SGD/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/SGD/gradients/AddN_6"
  op: "AddN"
  input: "training/SGD/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/AddN_7"
  op: "AddN"
  input: "training/SGD/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/SGD/gradients/AddN_8"
  op: "AddN"
  input: "training/SGD/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/SGD/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/SGD/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/SGD/AssignAdd"
  op: "AssignAdd"
  input: "SGD/iterations"
  input: "training/SGD/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SGD/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/SGD/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/zeros"
  op: "Fill"
  input: "training/SGD/zeros/shape_as_tensor"
  input: "training/SGD/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/Variable/Assign"
  op: "Assign"
  input: "training/SGD/Variable"
  input: "training/SGD/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/Variable/read"
  op: "Identity"
  input: "training/SGD/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable"
      }
    }
  }
}
node {
  name: "training/SGD/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/SGD/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/zeros_1"
  op: "Fill"
  input: "training/SGD/zeros_1/shape_as_tensor"
  input: "training/SGD/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/SGD/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/Variable_1/Assign"
  op: "Assign"
  input: "training/SGD/Variable_1"
  input: "training/SGD/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/Variable_1/read"
  op: "Identity"
  input: "training/SGD/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_1"
      }
    }
  }
}
node {
  name: "training/SGD/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/Variable_2/Assign"
  op: "Assign"
  input: "training/SGD/Variable_2"
  input: "training/SGD/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/Variable_2/read"
  op: "Identity"
  input: "training/SGD/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_2"
      }
    }
  }
}
node {
  name: "training/SGD/zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/Variable_3/Assign"
  op: "Assign"
  input: "training/SGD/Variable_3"
  input: "training/SGD/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/Variable_3/read"
  op: "Identity"
  input: "training/SGD/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_3"
      }
    }
  }
}
node {
  name: "training/SGD/zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/SGD/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/SGD/Variable_4/Assign"
  op: "Assign"
  input: "training/SGD/Variable_4"
  input: "training/SGD/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/Variable_4/read"
  op: "Identity"
  input: "training/SGD/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_4"
      }
    }
  }
}
node {
  name: "training/SGD/mul"
  op: "Mul"
  input: "SGD/momentum/read"
  input: "training/SGD/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/mul_1"
  op: "Mul"
  input: "SGD/lr/read"
  input: "training/SGD/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/sub"
  op: "Sub"
  input: "training/SGD/mul"
  input: "training/SGD/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/Assign"
  op: "Assign"
  input: "training/SGD/Variable"
  input: "training/SGD/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/add"
  op: "Add"
  input: "lstm_1/kernel/read"
  input: "training/SGD/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/Assign_1"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "training/SGD/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/mul_2"
  op: "Mul"
  input: "SGD/momentum/read"
  input: "training/SGD/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/mul_3"
  op: "Mul"
  input: "SGD/lr/read"
  input: "training/SGD/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/sub_1"
  op: "Sub"
  input: "training/SGD/mul_2"
  input: "training/SGD/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/Assign_2"
  op: "Assign"
  input: "training/SGD/Variable_1"
  input: "training/SGD/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/add_1"
  op: "Add"
  input: "lstm_1/recurrent_kernel/read"
  input: "training/SGD/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/Assign_3"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "training/SGD/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/mul_4"
  op: "Mul"
  input: "SGD/momentum/read"
  input: "training/SGD/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/mul_5"
  op: "Mul"
  input: "SGD/lr/read"
  input: "training/SGD/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/sub_2"
  op: "Sub"
  input: "training/SGD/mul_4"
  input: "training/SGD/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/Assign_4"
  op: "Assign"
  input: "training/SGD/Variable_2"
  input: "training/SGD/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/add_2"
  op: "Add"
  input: "lstm_1/bias/read"
  input: "training/SGD/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/Assign_5"
  op: "Assign"
  input: "lstm_1/bias"
  input: "training/SGD/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/mul_6"
  op: "Mul"
  input: "SGD/momentum/read"
  input: "training/SGD/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/mul_7"
  op: "Mul"
  input: "SGD/lr/read"
  input: "training/SGD/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/sub_3"
  op: "Sub"
  input: "training/SGD/mul_6"
  input: "training/SGD/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/Assign_6"
  op: "Assign"
  input: "training/SGD/Variable_3"
  input: "training/SGD/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/add_3"
  op: "Add"
  input: "dense_1/kernel/read"
  input: "training/SGD/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/Assign_7"
  op: "Assign"
  input: "dense_1/kernel"
  input: "training/SGD/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/mul_8"
  op: "Mul"
  input: "SGD/momentum/read"
  input: "training/SGD/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/mul_9"
  op: "Mul"
  input: "SGD/lr/read"
  input: "training/SGD/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/sub_4"
  op: "Sub"
  input: "training/SGD/mul_8"
  input: "training/SGD/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/Assign_8"
  op: "Assign"
  input: "training/SGD/Variable_4"
  input: "training/SGD/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/SGD/add_4"
  op: "Add"
  input: "dense_1/bias/read"
  input: "training/SGD/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/SGD/Assign_9"
  op: "Assign"
  input: "dense_1/bias"
  input: "training/SGD/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Assign"
  op: "Assign"
  input: "lstm_1/Variable"
  input: "lstm_1/while/Exit_3"
  input: "^loss/mul"
  input: "^metrics/acc/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Assign_1"
  op: "Assign"
  input: "lstm_1/Variable_1"
  input: "lstm_1/while/Exit_4"
  input: "^loss/mul"
  input: "^metrics/acc/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean_1"
  input: "^training/Assign"
  input: "^training/Assign_1"
  input: "^training/SGD/Assign"
  input: "^training/SGD/AssignAdd"
  input: "^training/SGD/Assign_1"
  input: "^training/SGD/Assign_2"
  input: "^training/SGD/Assign_3"
  input: "^training/SGD/Assign_4"
  input: "^training/SGD/Assign_5"
  input: "^training/SGD/Assign_6"
  input: "^training/SGD/Assign_7"
  input: "^training/SGD/Assign_8"
  input: "^training/SGD/Assign_9"
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "SGD/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SGD/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "SGD/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SGD/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "SGD/momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SGD/momentum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "SGD/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SGD/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "training/SGD/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "training/SGD/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "training/SGD/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "training/SGD/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "training/SGD/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^SGD/decay/Assign"
  input: "^SGD/iterations/Assign"
  input: "^SGD/lr/Assign"
  input: "^SGD/momentum/Assign"
  input: "^training/SGD/Variable/Assign"
  input: "^training/SGD/Variable_1/Assign"
  input: "^training/SGD/Variable_2/Assign"
  input: "^training/SGD/Variable_3/Assign"
  input: "^training/SGD/Variable_4/Assign"
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "SGD/iterations"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SGD/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "training/SGD/Variable"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "training/SGD/Variable_1"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_8"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_8"
  op: "Assign"
  input: "training/SGD/Variable_2"
  input: "Placeholder_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_9"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "Assign_9"
  op: "Assign"
  input: "training/SGD/Variable_3"
  input: "Placeholder_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_10"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "Assign_10"
  op: "Assign"
  input: "training/SGD/Variable_4"
  input: "Placeholder_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/SGD/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_11"
  op: "Assign"
  input: "lstm_1/Variable"
  input: "lstm_1/while/Exit_3"
  input: "^dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_12"
  op: "Assign"
  input: "lstm_1/Variable_1"
  input: "lstm_1/while/Exit_4"
  input: "^dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^Assign_11"
  input: "^Assign_12"
  input: "^dense_1/Sigmoid"
}
node {
  name: "my_variable/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "my_variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "my_variable/Assign"
  op: "Assign"
  input: "my_variable"
  input: "my_variable/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@my_variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "my_variable/read"
  op: "Identity"
  input: "my_variable"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@my_variable"
      }
    }
  }
}
versions {
  producer: 38
}
